openapi: 3.0.1
info:
  title: METRC API
  description: This document is created and maintained by the community and is designed to be a non-state specific specification. Please refer to your regions documentation for specific details and deviations. https://api-<state/province code>.metrc.com/documentation.Please keep in mind that there are rate limits and other terms of use enforced by Franwell (METRC). This document is only designed to give developers a standard used for code generation and testing.
  version: v2
servers:
  - url: https://api-ak.metrc.com
  - url: https://api-ca.metrc.com
  - url: https://api-co.metrc.com
  - url: https://api-dc.metrc.com
  - url: https://api-gu.metrc.com
  - url: https://api-la.metrc.com
  - url: https://api-ma.metrc.com
  - url: https://api-md.metrc.com
  - url: https://api-me.metrc.com
  - url: https://api-mi.metrc.com
  - url: https://api-mn.metrc.com
  - url: https://api-mo.metrc.com
  - url: https://api-ms.metrc.com
  - url: https://api-mt.metrc.com
  - url: https://api-nj.metrc.com
  - url: https://api-nv.metrc.com
  - url: https://api-oh.metrc.com
  - url: https://api-ok.metrc.com
  - url: https://api-or.metrc.com
  - url: https://api-ri.metrc.com
  - url: https://api-sd.metrc.com
  - url: https://api-wv.metrc.com
  - url: https://sandbox-api-ak.metrc.com
  - url: https://sandbox-api-ca.metrc.com
  - url: https://sandbox-api-co.metrc.com
  - url: https://sandbox-api-dc.metrc.com
  - url: https://sandbox-api-gu.metrc.com
  - url: https://sandbox-api-la.metrc.com
  - url: https://sandbox-api-ma.metrc.com
  - url: https://sandbox-api-md.metrc.com
  - url: https://sandbox-api-me.metrc.com
  - url: https://sandbox-api-mi.metrc.com
  - url: https://sandbox-api-mn.metrc.com
  - url: https://sandbox-api-mo.metrc.com
  - url: https://sandbox-api-ms.metrc.com
  - url: https://sandbox-api-mt.metrc.com
  - url: https://sandbox-api-nj.metrc.com
  - url: https://sandbox-api-nv.metrc.com
  - url: https://sandbox-api-oh.metrc.com
  - url: https://sandbox-api-ok.metrc.com
  - url: https://sandbox-api-or.metrc.com
  - url: https://sandbox-api-ri.metrc.com
  - url: https://sandbox-api-sd.metrc.com
  - url: https://sandbox-api-wv.metrc.com
paths:
  '/caregivers/v2/status/{caregiverLicenseNumber}':
    get:
      tags:
        - Caregiver
      summary: Data returned by this endpoint is cached for up to one minute
      description: '<b>Permissions Required</b>: Lookup Caregivers</br><b>Available In</b>: gu, mn, ms, nj, ri, sd'
      operationId: GetCaregiverStatus
      parameters:
        - name: caregiverLicenseNumber
          in: path
          description: The license number of the Caregiver.
          required: true
          schema:
            type: string
        - name: licenseNumber
          in: query
          description: The license number of the Facility under which to get the Caregiver status.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CaregiverStatus'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /employees/v2:
    get:
      tags:
        - Employee
      summary: Get all employees for a license
      description: '<b>Permissions Required</b>: Manage Employees</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetEmployees
      parameters:
        - name: licenseNumber
          in: query
          description: The license must have `IsOwner` equal true.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/EmployeeMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /facilities/v2:
    get:
      tags:
        - Facility
      summary: 'A Facility represents a building licensed for the growing, processing, and/or selling of product'
      description: 'This endpoint provides a list of facilities for which the authenticated user has access.</br><b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetFacilities
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/FacilityMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  '/harvests/v2/{id}':
    get:
      tags:
        - Harvest
      summary: Get a specific harvest by id
      description: '<b>Permissions Required</b>: View Harvests</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetHarvestById
      parameters:
        - name: id
          in: path
          description: Harvest ID
          required: true
          schema:
            type: integer
            format: int64
        - name: licenseNumber
          in: query
          description: 'If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User''s current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Harvest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /harvests/v2/active:
    get:
      tags:
        - Harvest
      summary: Get harvests in an active status
      description: '<b>Permissions Required</b>: View Harvests</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetActiveHarvests
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of active harvests.  License <code>CanGrowPlants</code>
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/HarvestMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /harvests/v2/onhold:
    get:
      tags:
        - Harvest
      summary: Get harvests in an onhold status
      description: '<b>Permissions Required</b>: View Harvests</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetOnHoldHarvests
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of onhold harvests.  License <code>CanGrowPlants</code>
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/HarvestMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /harvests/v2/inactive:
    get:
      tags:
        - Harvest
      summary: Get harvests in an inactive status
      description: '<b>Permissions Required</b>: View Harvests</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetInactiveHarvests
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of inactive harvests.  License <code>CanGrowPlants</code>
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/HarvestMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /harvests/v2/waste:
    get:
      tags:
        - Harvest
      summary: Get harvests waste
      description: '<b>Permissions Required</b>: View Harvests</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetHarvestWaste
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/HarvestWasteMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
    post:
      tags:
        - Harvest
      summary: Remove waste from a harvest
      description: '<b>Permissions Required</b>: View Harvests • Manage Harvests</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: RemoveHarvestWaste
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RemoveWasteRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RemoveWasteRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /harvests/v2/waste/types:
    get:
      tags:
        - Harvest
      summary: Get harvests waste types
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetHarvestWasteTypes
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/HarvestWasteTypeMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /harvests/v2/packages:
    post:
      tags:
        - Harvest
      summary: Create packages for one or more harvests
      description: '<b>Permissions Required</b>: View Harvests • Manage Harvests • View Packages • Create/Submit/Discontinue Packages</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: CreateHarvestPackage
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateHarvestPackageRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateHarvestPackageRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /harvests/v2/packages/testing:
    post:
      tags:
        - Harvest
      summary: Create packages for one or more harvests for testing
      description: '<b>Permissions Required</b>: View Harvests • Manage Harvests • View Packages • Create/Submit/Discontinue Packages</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: CreateHarvestPackageTesting
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateHarvestPackageRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateHarvestPackageRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /harvests/v2/location:
    put:
      tags:
        - Harvest
      summary: Move a harvest to a new room
      description: '<b>Permissions Required</b>: View Harvests • Manage Harvests</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: MoveHarvest
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MoveHarvestRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MoveHarvestRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /harvests/v2/rename:
    put:
      tags:
        - Harvest
      summary: Rename a harvest
      description: '<b>Permissions Required</b>: View Harvests • Manage Harvests</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: RenameHarvest
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RenameHarvestRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RenameHarvestRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /harvests/v2/finish:
    put:
      tags:
        - Harvest
      summary: Finish a harvest
      description: '<b>Permissions Required</b>: View Harvests • Finish/Discontinue Harvests</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: FinishHarvest
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FinishHarvestRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FinishHarvestRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /harvests/v2/unfinish:
    put:
      tags:
        - Harvest
      summary: Unfinish a harvest
      description: '<b>Permissions Required</b>: View Harvests • Finish/Discontinue Harvests</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: UnfinishHarvest
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UnfinishHarvestRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UnfinishHarvestRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /harvests/v2/restore/harvestedplants:
    put:
      tags:
        - Harvest
      summary: Restore harvested plants
      description: '<b>Permissions Required</b>: View Harvests • Finish/Discontinue Harvests</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: RestoreHarvestedPlants
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RestoreHarvestedPlantsRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RestoreHarvestedPlantsRequest'
        required: true
      responses:
        '200':
          description: Success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  '/harvests/v2/waste/{id}':
    delete:
      tags:
        - Harvest
      summary: Delete Harvest Waste
      description: '<b>Permissions Required</b>: View Harvests • Discontinue Harvest Waste</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: DeleteWaste
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  '/items/v2/{id}':
    get:
      tags:
        - Item
      summary: Get a specific item by id
      description: '<b>Permissions Required</b>: Manage Items</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetItemById
      parameters:
        - name: id
          in: path
          description: Item ID
          required: true
          schema:
            type: integer
            format: int64
        - name: licenseNumber
          in: query
          description: 'If specified, the Item will be validated against the specified License Number. If not specified, the Item will be validated against all of the User''s current Facilities. Please note that if the Item is not valid for the specified License Number, a 401 Unauthorized status will be returned.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Item'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
    delete:
      tags:
        - Item
      summary: Delete an item
      description: '<b>Permissions Required</b>: Manage Items</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: DeleteItem
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Item ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /items/v2/active:
    get:
      tags:
        - Item
      summary: Get active items
      description: '<b>Permissions Required</b>: Manage Items</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetActiveItems
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of active items.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ItemMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /items/v2/inactive:
    get:
      tags:
        - Item
      summary: Get inactive items
      description: '<b>Permissions Required</b>: Manage Items</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetInactiveItems
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of inactive items.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ItemMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /items/v2/categories:
    get:
      tags:
        - Item
      summary: Get item categories
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetItemCategories
      parameters:
        - name: licenseNumber
          in: query
          description: 'If specified, the Categories will be retrieved for the specified License Number. If not specified, the all Item Categories will be returned.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ItemCategoryMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /items/v2/brands:
    get:
      tags:
        - Item
      summary: Get item brands
      description: '<b>Permissions Required</b>: Manage Items</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetItemBrands
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of active item brands.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ItemBrandMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  '/items/v2/photo/{id}':
    get:
      tags:
        - Item
      summary: Get item photo
      description: '<b>Permissions Required</b>: Manage Items</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetItemPhoto
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the item photo.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Photo'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /items/v2:
    post:
      tags:
        - Item
      summary: Create items
      description: '<b>Permissions Required</b>: Manage Items</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: CreateItem
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateItemRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateItemRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
    put:
      tags:
        - Item
      summary: Update items
      description: '<b>Permissions Required</b>: Manage Items</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: UpdateItem
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateItemRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateItemRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /items/v2/photo:
    post:
      tags:
        - Item
      summary: Create Photo
      description: '<b>Permissions Required</b>: Manage Items</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: CreatePhoto
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePhotoRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePhotoRequest'
        required: true
      responses:
        '200':
          description: Success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  '/items/v2/brand/{id}':
    delete:
      tags:
        - Item
      summary: Delete a brand
      description: '<b>Permissions Required</b>: Manage Items</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: DeleteItemBrand
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Brand ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /items/v2/brand:
    post:
      tags:
        - Item
      summary: Create brands
      description: '<b>Permissions Required</b>: Manage Items</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: CreateBrand
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateBrandRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateBrandRequest'
        required: true
      responses:
        '200':
          description: Success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
    put:
      tags:
        - Item
      summary: Update brands
      description: '<b>Permissions Required</b>: Manage Items</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: UpdateBrand
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBrandRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBrandRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /labtests/v2/states:
    get:
      tags:
        - LabTest
      summary: Get all lab test states
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetLabTestStates
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /labtests/v2/batches:
    get:
      tags:
        - LabTest
      summary: Get all lab test batches
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetLabTestBatches
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/LabTestBatch'
                nullable: true
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /labtests/v2/types:
    get:
      tags:
        - LabTest
      summary: Get all lab test types
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetLabTestTypes
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/LabTestTypeMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /labtests/v2/results:
    get:
      tags:
        - LabTest
      summary: Get lab test results for a package
      description: '<b>Permissions Required</b>: View Packages</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetLabTestResults
      parameters:
        - name: packageId
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/LabTestMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /labtests/v2/record:
    post:
      tags:
        - LabTest
      summary: Upload the lab test results
      description: '<b>Permissions Required</b>: View Packages • Manage Packages Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: RecordLabTest
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateLabTestResultRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateLabTestResultRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /labtests/v2/labtestdocument:
    put:
      tags:
        - LabTest
      summary: Update lab test documents
      description: '<b>Permissions Required</b>: View Packages • Manage Packages Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: UpdateLabTestDocument
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateLabTestDocumentRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateLabTestDocumentRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /labtests/v2/results/release:
    put:
      tags:
        - LabTest
      summary: Release lab test results
      description: '<b>Permissions Required</b>: View Packages • Manage Packages Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: ReleaseLabTestResults
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ReleaseLabTestResultsRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ReleaseLabTestResultsRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  '/labtests/v2/labtestdocument/{id}':
    get:
      tags:
        - LabTest
      summary: Get lab test document
      description: '<b>Permissions Required</b>: View Packages • Manage Packages Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetLabTestDocument
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/LabTestMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  '/locations/v2/{id}':
    get:
      tags:
        - Location
      summary: Get a specific location by id
      description: '<b>Permissions Required</b>: Manage Locations</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetLocationById
      parameters:
        - name: id
          in: path
          description: Location ID
          required: true
          schema:
            type: integer
            format: int64
        - name: licenseNumber
          in: query
          description: 'If specified, the Location will be validated against the specified License Number. If not specified, the Location will be validated against all of the User''s current Facilities. Please note that if the Location is not valid for the specified License Number, a 401 Unauthorized status will be returned.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Location'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
    delete:
      tags:
        - Location
      summary: Delete an location
      description: '<b>Permissions Required</b>: Manage Locations</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: DeleteLocation
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Location ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /locations/v2/active:
    get:
      tags:
        - Location
      summary: Get active locations
      description: '<b>Permissions Required</b>: Manage Locations</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetActiveLocations
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of active locations.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/LocationMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /locations/v2/inactive:
    get:
      tags:
        - Location
      summary: Get active locations
      description: '<b>Permissions Required</b>: Manage Locations</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetInactiveLocations
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of active locations.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/LocationMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /locations/v2/types:
    get:
      tags:
        - Location
      summary: Get location types
      description: '<b>Permissions Required</b>: Manage Locations</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetLocationTypes
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of active location types.
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/LocationTypeMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /locations/v2:
    post:
      tags:
        - Location
      summary: Create locations
      description: '<b>Permissions Required</b>: Manage Locations</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: CreateLocation
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateLocationRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateLocationRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
    put:
      tags:
        - Location
      summary: Update locations
      description: '<b>Permissions Required</b>: Manage Locations</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: UpdateLocation
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateLocationRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateLocationRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  '/packages/v2/{id}':
    get:
      tags:
        - Package
      summary: Get a specific package by id
      description: '<b>Permissions Required</b>: View Packages</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetPackageById
      parameters:
        - name: id
          in: path
          description: Package ID
          required: true
          schema:
            type: integer
            format: int64
        - name: licenseNumber
          in: query
          description: 'If specified, the Package will be validated against the specified License Number. If not specified, the Package will be validated against all of the User''s current Facilities. Please note that if the Package is not valid for the specified License Number, a 401 Unauthorized status will be returned.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Package'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
    delete:
      tags:
        - Package
      summary: Delete packages
      description: '<b>Permissions Required</b>: View Packages • Create/Submit/Discontinue Packages</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: DeletePackage
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  '/packages/v2/{id}/source/harvests':
    get:
      tags:
        - Package
      summary: Get a package's source harvests
      description: '<b>Permissions Required</b>: View Package Source Harvests</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetPackageSourceHarvests
      parameters:
        - name: id
          in: path
          description: Package ID
          required: true
          schema:
            type: integer
            format: int64
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PackageSourceHarvest'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  '/packages/v2/{label}':
    get:
      tags:
        - Package
      summary: Get a specific package by label
      description: '<b>Permissions Required</b>: View Packages</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetPackageByLabel
      parameters:
        - name: label
          in: path
          description: Package Label
          required: true
          schema:
            type: string
        - name: licenseNumber
          in: query
          description: 'If specified, the Package will be validated against the specified License Number. If not specified, the Package will be validated against all of the User''s current Facilities. Please note that if the Package is not valid for the specified License Number, a 401 Unauthorized status will be returned.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Package'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /packages/v2/active:
    get:
      tags:
        - Package
      summary: Get packages in an active status
      description: '<b>Permissions Required</b>: View Packages</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetActivePackages
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of active packages.
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PackageMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /packages/v2/onhold:
    get:
      tags:
        - Package
      summary: Get packages in an onhold status
      description: '<b>Permissions Required</b>: View Packages</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetOnHoldPackages
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of onhold packages.
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PackageMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /packages/v2/inactive:
    get:
      tags:
        - Package
      summary: Get packages in an inactive status
      description: '<b>Permissions Required</b>: View Packages</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetInactivePackages
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of inactive packages.
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PackageMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /packages/v2/intransit:
    get:
      tags:
        - Package
      summary: Get packages in an intransit status
      description: '<b>Permissions Required</b>: View Packages</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetIntransitPackages
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of inactive packages.
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PackageMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /packages/v2/labsamples:
    get:
      tags:
        - Package
      summary: Get packages in an intransit status
      description: '<b>Permissions Required</b>: View Packages</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetPackageLabTests
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of inactive packages.
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PackageLabTestMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /packages/v2/types:
    get:
      tags:
        - Package
      summary: Get package types
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetPackageTypes
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StringMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /packages/v2/adjust/reasons:
    get:
      tags:
        - Package
      summary: Get package adjust reasons
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetPackageAdjustReasons
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of inactive packages.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PackageAdjustReasonMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /packages/v2:
    post:
      tags:
        - Package
      summary: Create packages
      description: '<b>Permissions Required</b>: View Packages • Create/Submit/Discontinue Packages</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: CreatePackage
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePackageRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePackageRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /packages/v2/testing:
    post:
      tags:
        - Package
      summary: Create testing packages
      description: '<b>Permissions Required</b>: View Packages • Create/Submit/Discontinue Packages</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: CreateTestingPackage
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePackageRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePackageRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /packages/v2/plantings:
    post:
      tags:
        - Package
      summary: Create package plantings
      description: '<b>Permissions Required</b>: View Immature Plants • Manage Immature Plants • View Packages • Manage Packages Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: CreatePackagePlanting
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePackagePlantingRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePackagePlantingRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /packages/v2/donation/flag:
    post:
      tags:
        - Package
      summary: Flag package for donation
      description: '<b>Permissions Required</b>: View Packages • Manage Packages Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: FlagPackageForDonation
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PackageDonationRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PackageDonationRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /packages/v2/donation/unflag:
    post:
      tags:
        - Package
      summary: Unflag package for donation
      description: '<b>Permissions Required</b>: View Packages • Manage Packages Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: UnflagPackageForDonation
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PackageDonationRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PackageDonationRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /packages/v2/item:
    put:
      tags:
        - Package
      summary: Change the package item
      description: '<b>Permissions Required</b>: View Packages • Create/Submit/Discontinue Packages</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: ChangePackageItem
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ChangePackageItemRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ChangePackageItemRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /packages/v2/note:
    put:
      tags:
        - Package
      summary: Update a package note
      description: '<b>Permissions Required</b>: View Packages • Manage Packages Inventory • Manage Package Notes</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: ChangePackageNote
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ChangePackageNoteRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ChangePackageNoteRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /packages/v2/location:
    put:
      tags:
        - Package
      summary: Change a package location
      description: '<b>Permissions Required</b>: View Packages • Create/Submit/Discontinue Packages</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: ChangePackageLocation
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ChangePackageLocationRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ChangePackageLocationRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /packages/v2/labtests/required:
    put:
      tags:
        - Package
      summary: Update packages to require lab tests
      description: '<b>Permissions Required</b>: View Packages • Create/Submit/Discontinue Packages</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: PackageLabTestsRequired
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PackageLabTestsRequiredRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PackageLabTestsRequiredRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /packages/v2/tradesample/flag:
    put:
      tags:
        - Package
      summary: Flag a packages as a trade sample
      description: '<b>Permissions Required</b>: View Packages • Manage Packages Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: FlagPackageTradeSample
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PackageTradeSampleRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PackageTradeSampleRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /packages/v2/tradesample/unflag:
    put:
      tags:
        - Package
      summary: Unflag a packages as a trade sample
      description: '<b>Permissions Required</b>: View Packages • Manage Packages Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: UnflagPackageTradeSample
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PackageTradeSampleRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PackageTradeSampleRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /packages/v2/adjust:
    post:
      tags:
        - Package
      summary: Adjust packages
      description: '<b>Permissions Required</b>: View Packages • Manage Packages Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: AdjustPackage
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AdjustPackageRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AdjustPackageRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /packages/v2/remediate:
    put:
      tags:
        - Package
      summary: Remediate packages
      description: '<b>Permissions Required</b>: View Packages • Manage Packages Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: RemediatePackage
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RemediatePackageRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RemediatePackageRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /packages/v2/finish:
    put:
      tags:
        - Package
      summary: Finish packages
      description: '<b>Permissions Required</b>: View Packages • Manage Packages Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: FinishPackage
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FinishPackageRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FinishPackageRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /packages/v2/unfinish:
    put:
      tags:
        - Package
      summary: Unfinish packages
      description: '<b>Permissions Required</b>: View Packages • Manage Packages Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: UnfinishPackage
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UnfinishPackageRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UnfinishPackageRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  '/patients/v2/{id}':
    get:
      tags:
        - Patient
      summary: Get a specific patient by id
      description: '<b>Permissions Required</b>: Manage Patients</br><b>Available In</b>: co, gu, la, ma, ms, mt, nv, nj, ok, ri, sd, wv'
      operationId: GetPatientById
      parameters:
        - name: id
          in: path
          description: Patient ID
          required: true
          schema:
            type: integer
            format: int64
        - name: licenseNumber
          in: query
          description: 'If specified, the Patient will be validated against the specified License Number. If not specified, the Patient will be validated against all of the User''s current Facilities. Please note that if the Patient is not valid for the specified License Number, a 401 Unauthorized status will be returned.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Patient'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
    delete:
      tags:
        - Patient
      summary: Delete an patient
      description: '<b>Permissions Required</b>: Manage Patients</br><b>Available In</b>: co, gu, la, ma, ms, mt, nv, nj, ok, ri, sd, wv'
      operationId: DeletePatient
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Patient ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /patients/v2/active:
    get:
      tags:
        - Patient
      summary: Get active patients
      description: '<b>Permissions Required</b>: Manage Patients</br><b>Available In</b>: co, gu, la, ma, ms, mt, nv, nj, ok, ri, sd, wv'
      operationId: GetActivePatients
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of active patients.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PatientMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  '/patients/v2/statuses/{patientLicenseNumber}':
    get:
      tags:
        - Patient
      summary: Get patient status. Data returned by this endpoint is cached for up to one minute
      description: '<b>Permissions Required</b>: Lookup Patients</br><b>Available In</b>: co, dc, gu, md, mi, ms, mo, mt, nj, ri, sd, wv'
      operationId: GetPatientStatus
      parameters:
        - name: patientLicenseNumber
          in: path
          required: true
          schema:
            type: string
        - name: licenseNumber
          in: query
          description: The license number of the Facility under which to get the Patient Status.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PatientStatusMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /patients/v2:
    post:
      tags:
        - Patient
      summary: Create patients
      description: '<b>Permissions Required</b>: Manage Patients</br><b>Available In</b>: co, gu, la, ma, ms, mt, nv, nj, ok, ri, sd, wv'
      operationId: CreatePatient
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePatientRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePatientRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
    put:
      tags:
        - Patient
      summary: Update patients
      description: '<b>Permissions Required</b>: Manage Patients</br><b>Available In</b>: co, gu, la, ma, ms, mt, nv, nj, ok, ri, sd, wv'
      operationId: UpdatePatient
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdatePatientRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdatePatientRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /patient-checkins/v2/locations:
    get:
      tags:
        - PatientCheckIn
      summary: Get all patient check-in locations
      description: '</br><b>Available In</b>: mo'
      operationId: GetPatientCheckInLocations
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PatientCheckInLocationMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /patient-checkins/v2:
    get:
      tags:
        - PatientCheckIn
      summary: Get all patient check-ins
      description: '<b>Permissions Required</b>: Manage Patients Check Ins</br><b>Available In</b>: mo'
      operationId: GetPatientCheckIns
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: checkinDateStart
          in: query
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
            type: string
            format: date
        - name: checkinDateEnd
          in: query
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
            type: string
            format: date
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PatientCheckInMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
    post:
      tags:
        - PatientCheckIn
      summary: Check in a patient
      description: '<b>Permissions Required</b>: Manage Patients Check Ins</br><b>Available In</b>: mo'
      operationId: CreatePatientCheckIn
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/CreatePatientCheckIn'
              nullable: true
          application/*+json:
            schema:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/CreatePatientCheckIn'
              nullable: true
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
    put:
      tags:
        - PatientCheckIn
      summary: Update a patient check in
      description: '<b>Permissions Required</b>: Manage Patients Check Ins</br><b>Available In</b>: mo'
      operationId: UpdatePatientCheckIn
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/UpdatePatientCheckIn'
              nullable: true
          application/*+json:
            schema:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/UpdatePatientCheckIn'
              nullable: true
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  '/patient-checkins/v2/{id}':
    delete:
      tags:
        - PatientCheckIn
      summary: Update a patient check in
      description: '<b>Permissions Required</b>: Manage Patients Check Ins</br><b>Available In</b>: mo'
      operationId: DeletePatientCheckIn
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plants/v2/additives/types:
    get:
      tags:
        - Plant
      summary: Get plant additive types
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetPlantAdditivesTypes
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StringMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  '/plants/v2/{id}':
    get:
      tags:
        - Plant
      summary: Get a specific plant by id
      description: '<b>Permissions Required</b>: View Veg/Flower Plants</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetPlantById
      parameters:
        - name: id
          in: path
          description: Plant ID
          required: true
          schema:
            type: integer
            format: int64
        - name: licenseNumber
          in: query
          description: 'If specified, the Plant will be validated against the specified License Number. If not specified, the Plant will be validated against all of the User''s current Facilities. Please note that if the Plant is not valid for the specified License Number, a 401 Unauthorized status will be returned.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Plant'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  '/plants/v2/{label}':
    get:
      tags:
        - Plant
      summary: Get a specific plant by label
      description: '<b>Permissions Required</b>: View Veg/Flower Plants</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetPlantByLabel
      parameters:
        - name: label
          in: path
          description: Plant Label
          required: true
          schema:
            type: string
        - name: licenseNumber
          in: query
          description: 'If specified, the Plant will be validated against the specified License Number. If not specified, the Plant will be validated against all of the User''s current Facilities. Please note that if the Plant is not valid for the specified License Number, a 401 Unauthorized status will be returned.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Plant'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /plants/v2/vegetative:
    get:
      tags:
        - Plant
      summary: Get plants in an vegetating status
      description: '<b>Permissions Required</b>: View Veg/Flower Plants</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetVegetativePlants
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of vegetating plants.
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlantMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /plants/v2/flowering:
    get:
      tags:
        - Plant
      summary: Get plants in an flowering status
      description: '<b>Permissions Required</b>: View Veg/Flower Plants</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetFloweringPlants
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of flowering plants.
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlantMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /plants/v2/onhold:
    get:
      tags:
        - Plant
      summary: Get plants in an onhold status
      description: '<b>Permissions Required</b>: View Veg/Flower Plants</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetOnHoldPlants
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of onhold plants.
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlantMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /plants/v2/inactive:
    get:
      tags:
        - Plant
      summary: Get plants in an inactive status
      description: '<b>Permissions Required</b>: View Veg/Flower Plants</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetInactivePlants
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of inactive plants.
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlantMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /plants/v2/additives:
    get:
      tags:
        - Plant
      summary: Get plant additives
      description: '<b>Permissions Required</b>: View/Manage Plants Additives</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetPlantAdditives
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to record plant additives.
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlantAdditiveMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
    post:
      tags:
        - Plant
      summary: Add additives to a plant
      description: '<b>Permissions Required</b>: Manage Plants Additives</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: AddAdditiveToPlant
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AddAdditiveToPlantRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AddAdditiveToPlantRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plants/v2/growthphases:
    get:
      tags:
        - Plant
      summary: Get plant growth phases
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetPlantGrowthPhases
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for plant growth phases.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StringMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /plants/v2/tag:
    put:
      tags:
        - Plant
      summary: Tag plants
      description: '<b>Permissions Required</b>: View Veg/Flower Plants • Manage Veg/Flower Plants Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: TagPlants
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for plant growth phases.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TagPlantRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TagPlantRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plants/v2/strain:
    put:
      tags:
        - Plant
      summary: Update plants strains
      description: '<b>Permissions Required</b>: View Veg/Flower Plants • Manage Veg/Flower Plants Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: UpdatePlantsStrains
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to update the list of plant strains.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdatePlantStrainRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdatePlantStrainRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plants/v2/waste/reasons:
    get:
      tags:
        - Plant
      summary: Get plant waste reasons
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetPlantWasteReasons
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for plant waste reasons.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlantWasteReasonMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /plants/v2/additives/bylocation:
    post:
      tags:
        - Plant
      summary: Add additives to plants by location
      description: '<b>Permissions Required</b>: Manage Plants • Manage Plants Additives</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: AddAdditiveToPlantByLocation
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AddAdditiveToPlantByLocationRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AddAdditiveToPlantByLocationRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plants/v2/plantings:
    post:
      tags:
        - Plant
      summary: Add additives to plants by location
      description: '<b>Permissions Required</b>: View Immature Plants • Manage Immature Plants Inventory • View Veg/Flower Plants • Manage Veg/Flower Plants Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: CreatePlantingOfPlant
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePlantingOfPlantRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePlantingOfPlantRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plants/v2/plantbatch/packages:
    post:
      tags:
        - Plant
      summary: Create plant batch from plants
      description: '<b>Permissions Required</b>: View Immature Plants • Manage Immature Plants Inventory • View Veg/Flower Plants • Manage Veg/Flower Plants Inventory • View Packages • Create/Submit/Discontinue Packages</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: CreatePlantBatchFromPlantPackage
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePlantBatchFromPlantPackageRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePlantBatchFromPlantPackageRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plants/v2/manicure:
    post:
      tags:
        - Plant
      summary: Manicure plants
      description: '<b>Permissions Required</b>: View Immature Plants • Manicure/Harvest Veg/Flower Plants</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: ManicurePlant
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ManicurePlantRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ManicurePlantRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plants/v2/location:
    put:
      tags:
        - Plant
      summary: Move a plant
      description: '<b>Permissions Required</b>: View Veg/Flower Plants • Manage Veg/Flower Plants Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: MovePlant
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MovePlantRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MovePlantRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plants/v2/growthphase:
    put:
      tags:
        - Plant
      summary: Change a plant's growth phase
      description: '<b>Permissions Required</b>: View Veg/Flower Plants • Manage Veg/Flower Plants Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: ChangePlantGrowthPhase
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ChangePlantGrowthPhaseRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ChangePlantGrowthPhaseRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plants/v2/harvest:
    put:
      tags:
        - Plant
      summary: Harvest plants
      description: '<b>Permissions Required</b>: View Immature Plants • Manicure/Harvest Veg/Flower Plants</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: HarvestPlant
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/HarvestPlantRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/HarvestPlantRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plants/v2/merge:
    put:
      tags:
        - Plant
      summary: Merge plants
      description: '<b>Permissions Required</b>: View Veg/Flower Plants • Manicure/Harvest Veg/Flower Plants</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: MergePlant
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MergePlantRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MergePlantRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plants/v2:
    delete:
      tags:
        - Plant
      summary: Destroy a plant
      description: '<b>Permissions Required</b>: View Veg/Flower Plants • Destroy Veg/Flower Plants</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: DeletePlant
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DestroyPlantRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DestroyPlantRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plants/v2/waste:
    post:
      tags:
        - Plant
      summary: Create plant waste
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: CreatePlantWaste
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePlantWasteRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePlantWasteRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plants/v2/waste/methods/all:
    get:
      tags:
        - Plant
      summary: Get all plant waste method properties
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetPlantWasteMethodsAll
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlantWasteMethodMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /plants/v2/split:
    put:
      tags:
        - Plant
      summary: Split plants
      description: '<b>Permissions Required</b>: View Plant</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: SplitPlant
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SplitPlantRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SplitPlantRequest'
        required: true
      responses:
        '200':
          description: Success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  '/plantbatches/v2/{id}':
    get:
      tags:
        - PlantBatch
      summary: Get a specific plant batch by id
      description: '<b>Permissions Required</b>: View Immature Plants</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetPlantBatchById
      parameters:
        - name: id
          in: path
          description: Plant Batch ID
          required: true
          schema:
            type: integer
            format: int64
        - name: licenseNumber
          in: query
          description: 'If specified, the Plant Batch will be validated against the specified License Number. If not specified, the Plant Batch will be validated against all of the User''s current Facilities. Please note that if the Plant Batch is not valid for the specified License Number, a 401 Unauthorized status will be returned.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlantBatch'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /plantbatches/v2/active:
    get:
      tags:
        - PlantBatch
      summary: Get plant batches in an active status
      description: '<b>Permissions Required</b>: View Immature Plants</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetActivePlantBatches
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of active plant batches.
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlantBatchMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /plantbatches/v2/inactive:
    get:
      tags:
        - PlantBatch
      summary: Get plant batches in an inactive status
      description: '<b>Permissions Required</b>: View Immature Plants</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetInactivePlantBatches
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of inactive plant batches.
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlantBatchMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /plantbatches/v2/types:
    get:
      tags:
        - PlantBatch
      summary: Get plant batch types
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetPlantBatchTypes
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StringMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /plantbatches/v2:
    delete:
      tags:
        - PlantBatch
      summary: Delete plant batches
      description: '<b>Permissions Required</b>: View Immature Plants • Destroy Immature Plants</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: DeletePlantBatches
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DestroyPlantBatchRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DestroyPlantBatchRequest'
        required: true
      responses:
        '200':
          description: Success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plantbatches/v2/waste/reasons:
    get:
      tags:
        - PlantBatch
      summary: Get plant batch waste reasons
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetPlantBatchWasteReasons
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of plant batch waste reasons.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlantBatchWasteReasonMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /plantbatches/v2/waste:
    post:
      tags:
        - PlantBatch
      summary: Create plant batch waste
      description: '<b>Permissions Required</b>: Manage Plants Waste</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: CreatePlantBatchWaste
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePlantBatchWasteRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePlantBatchWasteRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plantbatches/v2/adjust:
    post:
      tags:
        - PlantBatch
      summary: Get plant batch waste reasons
      description: '<b>Permissions Required</b>: View Immature Plants • Manage Immature Plants Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: AdjustPlantBatch
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AdjustPlantBatchRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AdjustPlantBatchRequest'
        required: true
      responses:
        '200':
          description: Success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plantbatches/v2/additives:
    post:
      tags:
        - PlantBatch
      summary: Add plant additives to a plant batch
      description: '<b>Permissions Required</b>: Manage Plants Additives</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: AddAdditiveToPlantBatch
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AddAdditiveToPlantBatchRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AddAdditiveToPlantBatchRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plantbatches/v2/plantings:
    post:
      tags:
        - PlantBatch
      summary: Create plant batch plantings
      description: '<b>Permissions Required</b>: View Immature Plants • Manage Immature Plants Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: CreatePlantBatchPlantings
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePlantBatchPlantingRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePlantBatchPlantingRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plantbatches/v2/packages:
    post:
      tags:
        - PlantBatch
      summary: Create plant batch packages
      description: '<b>Permissions Required</b>: View Immature Plants • Manage Immature Plants Inventory • View Packages • Create/Submit/Discontinue Packages</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: CreatePlantBatchPackages
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: isFromMotherPlant
          in: query
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePlantBatchPackageRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePlantBatchPackageRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plantbatches/v2/packages/frommotherplant:
    post:
      tags:
        - PlantBatch
      summary: Create packages from a mother plant for a plant batch
      description: '<b>Permissions Required</b>: View Immature Plants • Manage Immature Plants Inventory • View Packages • Create/Submit/Discontinue Packages</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: CreatePackageFromPlantBatchMotherPlant
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePlantBatchPackageRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePlantBatchPackageRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plantbatches/v2/split:
    post:
      tags:
        - PlantBatch
      summary: Split a plant batch
      description: '<b>Permissions Required</b>: View Immature Plants • Manage Immature Plants Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: SplitPlantBatch
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SplitPlantBatchRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SplitPlantBatchRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plantbatches/v2/growthphase:
    post:
      tags:
        - PlantBatch
      summary: Change the growth phase for a plant batch
      description: '<b>Permissions Required</b>: View Immature Plants • Manage Immature Plants Inventory • View Veg/Flower Plants • Manage Veg/Flower Plants Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: ChangeGrowthPhaseForPlantBatch
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ChangeGrowthPhaseForPlantBatchRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ChangeGrowthPhaseForPlantBatchRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plantbatches/v2/tag:
    put:
      tags:
        - PlantBatch
      summary: Tag a plant batch
      description: '<b>Permissions Required</b>: View Veg/Flower Plants • Manage Veg/Flower Plants Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: TagPlantBatch
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TagPlantBatchRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TagPlantBatchRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plantbatches/v2/strain:
    put:
      tags:
        - PlantBatch
      summary: Update plant batch strains
      description: '<b>Permissions Required</b>: View Veg/Flower Plants • Manage Veg/Flower Plants Inventory</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: UpdatePlantBatchStrain
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdatePlantBatchStrainRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdatePlantBatchStrainRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /plantbatches/v2/location:
    put:
      tags:
        - PlantBatch
      summary: Move a plant batch
      description: '<b>Permissions Required</b>: View Immature Plants</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: MovePlantBatch
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MovePlantBatchRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MovePlantBatchRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  '/processing/v2/{id}':
    get:
      tags:
        - Processing
      summary: Get a specific processing by id
      description: '<b>Permissions Required</b>: Manage Processing Job</br><b>Available In</b>: gu, nj, or, ri'
      operationId: GetProcessingById
      parameters:
        - name: id
          in: path
          description: Processing ID
          required: true
          schema:
            type: integer
            format: int64
        - name: licenseNumber
          in: query
          description: 'If specified, the Processing will be validated against the specified License Number. If not specified, the Processing will be validated against all of the User''s current Facilities. Please note that if the Processing is not valid for the specified License Number, a 401 Unauthorized status will be returned.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Processing'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
    delete:
      tags:
        - Processing
      summary: Delete processing
      description: '<b>Permissions Required</b>: Manage Processing Job</br><b>Available In</b>: gu, nj, or, ri'
      operationId: DeleteProcessing
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /processing/v2/active:
    get:
      tags:
        - Processing
      summary: Get processing in an active status
      description: '<b>Permissions Required</b>: Manage Processing Job</br><b>Available In</b>: gu, nj, or, ri'
      operationId: GetActiveProcessing
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of active processing.
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProcessingMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /processing/v2/inactive:
    get:
      tags:
        - Processing
      summary: Get processing in an inactive status
      description: '<b>Permissions Required</b>: Manage Processing Job</br><b>Available In</b>: gu, nj, or, ri'
      operationId: GetInactiveProcessing
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of inactive processing.
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProcessingMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /processing/v2/createpackages:
    post:
      tags:
        - Processing
      summary: Create packages from a processing
      description: '<b>Permissions Required</b>: Manage Processing Job</br><b>Available In</b>: gu, nj, or, ri'
      operationId: CreateProcessingPackage
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateProcessingPackageRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateProcessingPackageRequest'
        required: true
      responses:
        '200':
          description: Success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /processing/v2/start:
    post:
      tags:
        - Processing
      summary: Start processing
      description: '<b>Permissions Required</b>: Manage Processing Job</br><b>Available In</b>: gu, nj, or, ri'
      operationId: StartProcessing
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/StartProcessingRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/StartProcessingRequest'
        required: true
      responses:
        '200':
          description: Success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /processing/v2/adjust:
    post:
      tags:
        - Processing
      summary: Adjust processing
      description: '<b>Permissions Required</b>: Manage Processing Job</br><b>Available In</b>: gu, nj, or, ri'
      operationId: AdjustProcessing
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AdjustProcessingRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AdjustProcessingRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /processing/v2/finish:
    put:
      tags:
        - Processing
      summary: Finish processing
      description: '<b>Permissions Required</b>: Manage Processing Job</br><b>Available In</b>: gu, nj, or, ri'
      operationId: FinishProcessing
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FinishProcessingRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FinishProcessingRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /processing/v2/unfinish:
    put:
      tags:
        - Processing
      summary: Unfinish processing
      description: '<b>Permissions Required</b>: Manage Processing Job</br><b>Available In</b>: gu, nj, or, ri'
      operationId: UnfinishProcessing
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UnfinishProcessingRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UnfinishProcessingRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /processing/v2/jobtypes/active:
    get:
      tags:
        - Processing
      summary: Get active job types
      description: '<b>Permissions Required</b>: Manage Processing Job</br><b>Available In</b>: gu, nj, or, ri'
      operationId: GetActiveJobTypes
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of active processing.
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProcessingJobTypeMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /processing/v2/jobtypes/inactive:
    get:
      tags:
        - Processing
      summary: Get inactive job types
      description: '<b>Permissions Required</b>: Manage Processing Job</br><b>Available In</b>: gu, nj, or, ri'
      operationId: GetInactiveJobTypes
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of inactive processing.
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProcessingJobTypeMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /processing/v2/jobtypes:
    post:
      tags:
        - Processing
      summary: Create Job Type
      description: '<b>Permissions Required</b>: Manage Processing Job</br><b>Available In</b>: gu, nj, or, ri'
      operationId: CreateJobType
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateJobTypeRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateJobTypeRequest'
        required: true
      responses:
        '200':
          description: Success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
    put:
      tags:
        - Processing
      summary: Update Job Type
      description: '<b>Permissions Required</b>: Manage Processing Job</br><b>Available In</b>: gu, nj, or, ri'
      operationId: UpdateJobType
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/ProcessingJobType'
              nullable: true
          application/*+json:
            schema:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/ProcessingJobType'
              nullable: true
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  '/processing/v2/jobtypes/{id}':
    delete:
      tags:
        - Processing
      summary: Delete job type
      description: '<b>Permissions Required</b>: Manage Processing Job</br><b>Available In</b>: gu, nj, or, ri'
      operationId: DeleteJobType
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /processing/v2/jobtypes/attributes:
    get:
      tags:
        - Processing
      summary: Get job type attributes
      description: '<b>Permissions Required</b>: Manage Processing Job</br><b>Available In</b>: gu, nj, or, ri'
      operationId: GetJobTypeAttributes
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the job type attributes.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/JobTypeAttributeMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /processing/v2/jobtypes/categories:
    get:
      tags:
        - Processing
      summary: Get job type categories
      description: '<b>Permissions Required</b>: Manage Processing Job</br><b>Available In</b>: gu, nj, or, ri'
      operationId: GetJobTypeCategories
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the job type categories.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StringMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /sales/v2/customertypes:
    get:
      tags:
        - Sale
      summary: Get sale customer types
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetSaleCustomerTypes
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StringMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /sales/v2/patientregistration/locations:
    get:
      tags:
        - Sale
      summary: Get patient registration locations
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetPatientRegistrationLocations
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PatientRegistrationLocationMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  '/sales/v2/deliveries/{id}':
    get:
      tags:
        - Sale
      summary: Get a sales delivery by id
      description: '<b>Permissions Required</b>: Sales Delivery</br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd'
      operationId: GetSaleDeliveryById
      parameters:
        - name: id
          in: path
          description: Delivery ID
          required: true
          schema:
            type: integer
            format: int64
        - name: licenseNumber
          in: query
          description: 'If specified, the Sales Delivery will be validated against the specified License Number. If not specified, the Sales Delivery will be validated against all of the User''s current Facilities. Please note that if the Sales Delivery is not valid for the specified License Number, a 401 Unauthorized status will be returned'
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SaleDelivery'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
    delete:
      tags:
        - Sale
      summary: Delete an sale delivery
      description: '<b>Permissions Required</b>: Sales</br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd'
      operationId: DeleteDelivery
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Sale Delivery ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /sales/v2/deliveries/active:
    get:
      tags:
        - Sale
      summary: Get active sales deliveries
      description: '<b>Permissions Required</b>: Sales</br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd'
      operationId: GetActiveSaleDeliveries
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: salesDateStart
          in: query
          description: 'The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.'
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: salesDateEnd
          in: query
          description: 'The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.'
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedStart
          in: query
          description: 'The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.'
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: 'The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.'
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SaleDeliveryMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /sales/v2/deliveries/inactive:
    get:
      tags:
        - Sale
      summary: Get inactive sales deliveries
      description: '<b>Permissions Required</b>: Sales</br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd'
      operationId: GetInactiveSaleDeliveries
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: salesDateStart
          in: query
          description: 'The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.'
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: salesDateEnd
          in: query
          description: 'The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.'
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedStart
          in: query
          description: 'The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.'
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: 'The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.'
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SaleDeliveryMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /sales/v2/deliveries/returnreasons:
    get:
      tags:
        - Sale
      summary: Get delivery return reasons
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd'
      operationId: GetDeliveryReturnReasons
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DeliveryReturnReasonMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /sales/v2/counties:
    get:
      tags:
        - Sale
      summary: Get counties
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd'
      operationId: GetCounties
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CountyMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /sales/v2/paymenttypes:
    get:
      tags:
        - Sale
      summary: Get payment types
      description: '<b>Permissions Required</b>: Sales Delivery</br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd'
      operationId: GetPaymentTypes
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StringMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  '/sales/v2/receipts/{id}':
    get:
      tags:
        - Sale
      summary: Get a sales receipt by id
      description: '<b>Permissions Required</b>: Sales</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetSaleReceiptById
      parameters:
        - name: id
          in: path
          description: Receipt ID
          required: true
          schema:
            type: integer
            format: int64
        - name: licenseNumber
          in: query
          description: 'If specified, the Sales Receipt will be validated against the specified License Number. If not specified, the Sales Receipt will be validated against all of the User''s current Facilities. Please note that if the Sales Receipt is not valid for the specified License Number, a 401 Unauthorized status will be returned'
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SaleReceipt'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
    delete:
      tags:
        - Sale
      summary: Delete an sale delivery
      description: '<b>Permissions Required</b>: Sales</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: DeleteReceipt
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Sale Receipt ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /sales/v2/receipts/active:
    get:
      tags:
        - Sale
      summary: Get active sales receipts
      description: '<b>Permissions Required</b>: Sales</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetActiveSaleReceipts
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: salesDateStart
          in: query
          description: 'The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.'
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: salesDateEnd
          in: query
          description: 'The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.'
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedStart
          in: query
          description: 'The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.'
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: 'The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.'
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SaleReceiptMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /sales/v2/receipts/inactive:
    get:
      tags:
        - Sale
      summary: Get inactive sales receipts
      description: '<b>Permissions Required</b>: Sales</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetInactiveSaleReceipts
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: salesDateStart
          in: query
          description: 'The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.'
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: salesDateEnd
          in: query
          description: 'The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.'
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedStart
          in: query
          description: 'The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.'
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: 'The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.'
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SaleReceiptMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /sales/v2/deliveries:
    post:
      tags:
        - Sale
      summary: Create a new sale delivery
      description: 'Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.</br><b>Permissions Required</b>: Sales</br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd'
      operationId: CreateSaleDelivery
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateSaleDeliveryRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateSaleDeliveryRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
    put:
      tags:
        - Sale
      summary: Create a new sale delivery
      description: 'Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.</br><b>Permissions Required</b>: Sales</br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd'
      operationId: UpdateSaleDelivery
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateSaleDeliveryRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateSaleDeliveryRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /sales/v2/receipts:
    post:
      tags:
        - Sale
      summary: Create a new sale receipt
      description: 'Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.</br><b>Permissions Required</b>: Sales</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: CreateSaleReceipt
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateSaleReceiptRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateSaleReceiptRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
    put:
      tags:
        - Sale
      summary: Create a new sale receipt
      description: 'Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.</br><b>Permissions Required</b>: Sales</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: UpdateSaleReceipt
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateSaleReceiptRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateSaleReceiptRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /sales/v2/deliveries/hub:
    put:
      tags:
        - Sale
      summary: Update a sale delivery hub
      description: 'Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.</br><b>Permissions Required</b>: Sales Delivery</br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd'
      operationId: UpdateSaleDeliveryHub
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateSaleDeliveryHubRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateSaleDeliveryHubRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /sales/v2/deliveries/hub/accept:
    put:
      tags:
        - Sale
      summary: Update a sale delivery hub to accept
      description: '<b>Permissions Required</b>: Sales</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: AcceptSaleDeliveryHub
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AcceptSaleDeliveryHubRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AcceptSaleDeliveryHubRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /sales/v2/deliveries/complete:
    put:
      tags:
        - Sale
      summary: Update a sale delivery to complete
      description: 'Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.</br><b>Permissions Required</b>: Sales</br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd'
      operationId: UpdateSaleDeliveryComplete
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateSaleDeliveryCompleteRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateSaleDeliveryCompleteRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /sales/v2/deliveries/hub/depart:
    put:
      tags:
        - Sale
      summary: Update a sale delivery hub to depart
      description: '<b>Permissions Required</b>: Sales</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: DepartSaleDeliveryHub
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DepartSaleDeliveryHubRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DepartSaleDeliveryHubRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /sales/v2/deliveries/hub/verifyID:
    put:
      tags:
        - Sale
      summary: Update a sale delivery hub to verify id
      description: '<b>Permissions Required</b>: Sales</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: VerifyIdSaleDeliveryHub
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/VerifyIdSaleDeliveryHubRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/VerifyIdSaleDeliveryHubRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /sales/v2/receipts/finalize:
    put:
      tags:
        - Sale
      summary: Finalize sale receipts
      description: '<b>Permissions Required</b>: Sales</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: FinalizeSaleReceipt
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FinalizeSaleReceiptRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FinalizeSaleReceiptRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /sales/v2/receipts/unfinalize:
    put:
      tags:
        - Sale
      summary: Unfinalize sale receipts
      description: '<b>Permissions Required</b>: Sales</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: UnfinalizeSaleReceipt
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FinalizeSaleReceiptRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FinalizeSaleReceiptRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /sales/v2/deliveries/retailer/active:
    get:
      tags:
        - Sale
      summary: Get active delivery retailers
      description: '<b>Permissions Required</b>: Retailer Delivery</br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd'
      operationId: GetDeliveriesRetailerActive
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          required: true
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
            type: string
            format: date
        - name: lastModifiedEnd
          in: query
          required: true
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
            type: string
            format: date
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RetailerMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /sales/v2/deliveries/retailer/inactive:
    get:
      tags:
        - Sale
      summary: Get inactive delivery retailers
      description: '<b>Permissions Required</b>: Retailer Delivery</br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd'
      operationId: GetDeliveriesRetailerInactive
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          required: true
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
            type: string
            format: date
        - name: lastModifiedEnd
          in: query
          required: true
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
            type: string
            format: date
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RetailerMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  '/sales/v2/deliveries/retailer/{id}':
    get:
      tags:
        - Sale
      summary: Get delivery retailer
      description: '<b>Permissions Required</b>: Retailer Delivery</br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd'
      operationId: GetDeliveriesRetailer
      parameters:
        - name: id
          in: path
          description: Retailer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Retailer'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
    delete:
      tags:
        - Sale
      summary: Delete delivery retailer
      description: '<b>Permissions Required</b>: Retailer Delivery</br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd'
      operationId: DeleteDeliveriesRetailer
      parameters:
        - name: id
          in: path
          description: Retailer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /sales/v2/deliveries/retailer:
    post:
      tags:
        - Sale
      summary: Create delivery retailer
      description: 'Please note: The DateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.</br><b>Permissions Required</b>: Retailer Delivery</br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd'
      operationId: CreateDeliveriesRetailer
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateSalesDeliveryRetailerRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateSalesDeliveryRetailerRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
    put:
      tags:
        - Sale
      summary: Create delivery retailer
      description: 'Please note: The DateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.</br><b>Permissions Required</b>: Retailer Delivery</br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd'
      operationId: UpdateDeliveriesRetailer
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateSalesDeliveryRetailerRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateSalesDeliveryRetailerRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /sales/v2/deliveries/retailer/depart:
    post:
      tags:
        - Sale
      summary: Set delivery retailer to departed
      description: '<b>Permissions Required</b>: Retailer Delivery</br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd'
      operationId: DepartDeliveriesRetailer
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateSalesDeliveryRetailerDepartRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateSalesDeliveryRetailerDepartRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /sales/v2/deliveries/retailer/restock:
    post:
      tags:
        - Sale
      summary: Restock delivery retailer
      description: '<b>Permissions Required</b>: Retailer Delivery</br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd'
      operationId: RestockDeliveriesRetailer
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateSalesDeliveryRetailerRestockRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateSalesDeliveryRetailerRestockRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /sales/v2/deliveries/retailer/sale:
    post:
      tags:
        - Sale
      summary: Create delivery retailer sale
      description: 'Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.</br><b>Permissions Required</b>: Retailer Delivery</br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd'
      operationId: CreateDeliveriesRetailerSale
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateSalesDeliveryRetailerSaleRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateSalesDeliveryRetailerSaleRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /sales/v2/deliveries/retailer/end:
    post:
      tags:
        - Sale
      summary: Create delivery retailer sale
      description: "Please note: The ActualArrivalDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.\r\n\r\n</br><b>Permissions Required</b>: Retailer Delivery</br><b>Available In</b>: ca, co, dc, gu, me, md, ma, mi, ms, mo, mt, nv, nj, or, ri, sd"
      operationId: EndDeliveriesRetailer
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateSalesDeliveryRetailerEndRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateSalesDeliveryRetailerEndRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  '/strains/v2/{id}':
    get:
      tags:
        - Strain
      summary: Get a specific strain by id
      description: '<b>Permissions Required</b>: Manage Strains</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetStrainById
      parameters:
        - name: id
          in: path
          description: Strain ID
          required: true
          schema:
            type: integer
            format: int64
        - name: licenseNumber
          in: query
          description: 'If specified, the Strain will be validated against the specified License Number. If not specified, the Strain will be validated against all of the User''s current Facilities. Please note that if the Strain is not valid for the specified License Number, a 401 Unauthorized status will be returned.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Strain'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
    delete:
      tags:
        - Strain
      summary: Delete an strain
      description: '<b>Permissions Required</b>: Manage Strains</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: DeleteStrain
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Strain ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /strains/v2/active:
    get:
      tags:
        - Strain
      summary: Get active strains
      description: '<b>Permissions Required</b>: Manage Strains</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetActiveStrains
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of active strains.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StrainMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /strains/v2/inactive:
    get:
      tags:
        - Strain
      summary: Get inactive strains
      description: '<b>Permissions Required</b>: Manage Strains</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetInactiveStrains
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return the list of inactive strains.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StrainMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /strains/v2:
    post:
      tags:
        - Strain
      summary: Create strains
      description: '<b>Permissions Required</b>: Manage Strains</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: CreateStrain
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateStrainRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateStrainRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
    put:
      tags:
        - Strain
      summary: Update strains
      description: '<b>Permissions Required</b>: Manage Strains</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: UpdateStrain
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateStrainRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateStrainRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /tags/v2/plant/available:
    get:
      tags:
        - Tag
      summary: 'Returns a list of available Plant Tags. NOTE: This is a premium endpoint.'
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetAvailablePlantTags
      parameters:
        - name: licenseNumber
          in: query
          description: The license number for which to return available tags.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Tag'
                nullable: true
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /tags/v2/package/available:
    get:
      tags:
        - Tag
      summary: 'Returns a list of available Package Tags. NOTE: This is a premium endpoint.'
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetAvailablePackageTags
      parameters:
        - name: licenseNumber
          in: query
          description: The license number for which to return available package tags.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Tag'
                nullable: true
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /transfers/v2/hub:
    get:
      tags:
        - Transfer
      summary: Get incoming transfers
      description: '<b>Permissions Required</b>: Transfers</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetHubTransfers
      parameters:
        - name: licenseNumber
          in: query
          description: The license number of the facility for which to return shipment plans
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp.
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp.
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TransferMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /transfers/v2/incoming:
    get:
      tags:
        - Transfer
      summary: Get incoming transfers
      description: '<b>Permissions Required</b>: Transfers</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetIncomingTransfers
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp.
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp.
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TransferMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /transfers/v2/outgoing:
    get:
      tags:
        - Transfer
      summary: Get outgoing transfers
      description: '<b>Permissions Required</b>: Transfers</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetOutgoingTransfers
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp.
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp.
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TransferMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /transfers/v2/rejected:
    get:
      tags:
        - Transfer
      summary: Get rejected transfers
      description: '<b>Permissions Required</b>: Transfers</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetRejectedTransfers
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TransferMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  '/transfers/v2/{id}/deliveries':
    get:
      tags:
        - Transfer
      summary: Get transfer deliveries
      description: '<b>Permissions Required</b>: Transfers</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetTransferDeliveries
      parameters:
        - name: id
          in: path
          description: Transfer ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TransferDeliveryMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  '/transfers/v2/delivery/{id}/transporters':
    get:
      tags:
        - Transfer
      summary: Get transfer delivery transporters
      description: '<b>Permissions Required</b>: Transfers</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetTransferDeliveryTransporters
      parameters:
        - name: id
          in: path
          description: Delivery ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TransferDeliveryTransporterMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  '/transfers/v2/delivery/{id}/transporters/details':
    get:
      tags:
        - Transfer
      summary: Get transfer delivery transporters (detail)
      description: '<b>Permissions Required</b>: Transfers</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetTransferDeliveryTransportersDetail
      parameters:
        - name: id
          in: path
          description: Delivery ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TransferDeliveryTransporterDetailMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  '/transfers/v2/delivery/{id}/packages':
    get:
      tags:
        - Transfer
      summary: Get transfer delivery packages
      description: '<b>Permissions Required</b>: Transfers</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetTransferDeliveryPackages
      parameters:
        - name: id
          in: path
          description: Transfer Delivery ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TransferDeliveryPackageMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  '/transfers/v2/delivery/{id}/packages/wholesale':
    get:
      tags:
        - Transfer
      summary: Get transfer delivery packages for wholesale
      description: '<b>Permissions Required</b>: Transfers</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetTransferDeliveryPackagesWholesale
      parameters:
        - name: id
          in: path
          description: Transfer Delivery ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TransferDeliveryPackageWholesaleMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  '/transfers/v2/delivery/package/{id}/requiredlabtestbatches':
    get:
      tags:
        - Transfer
      summary: Get transfer delivery packages that require lab tests
      description: 'Please note: The {id} parameter above represents a Transfer Delivery Package ID, not a Manifest Number.</br><b>Permissions Required</b>: Transfers</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetTransferDeliveryPackagesThatRequireLabTest
      parameters:
        - name: id
          in: path
          description: Transfer Delivery Package ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RequiredLabTestBatchMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /transfers/v2/delivery/packages/states:
    get:
      tags:
        - Transfer
      summary: Get transfer delivery package states
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetTransferDeliveryPackageStates
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StringMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /transfers/v2/types:
    get:
      tags:
        - Transfer
      summary: Get transfer types
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetTransferTypes
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TransferTypeMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /transfers/v2/external/incoming:
    post:
      tags:
        - Transfer
      summary: Create incoming external transfer
      description: '<b>Permissions Required</b>: Transfers</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: CreateExternalIncomingTransfers
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateTransferRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateTransferRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
    put:
      tags:
        - Transfer
      summary: Update incoming external transfer
      description: '<b>Permissions Required</b>: Transfers</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: UpdateExternalIncomingTransfers
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateTransferRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateTransferRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  '/transfers/v2/external/incoming/{id}':
    delete:
      tags:
        - Transfer
      summary: Delete incoming external transfer
      description: '<b>Permissions Required</b>: Transfers</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: DeleteExternalIncomingTransfer
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: External Incoming Transfer ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /transfers/v2/templates/outgoing:
    get:
      tags:
        - Transfer
      summary: Get transfer templates
      description: '<b>Permissions Required</b>: Transfer Templates</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetTransferTemplates
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: lastModifiedStart
          in: query
          description: The last modified start timestamp.
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
        - name: lastModifiedEnd
          in: query
          description: The last modified end timestamp.
          schema:
            pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
            type: string
            description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
            format: date-time
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TransferMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
    post:
      tags:
        - Transfer
      summary: Create transfer template
      description: '<b>Permissions Required</b>: Transfer Templates</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: CreateTransferTemplates
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateTransferRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateTransferRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
    put:
      tags:
        - Transfer
      summary: Update transfer template
      description: '<b>Permissions Required</b>: Transfer Templates</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: UpdateTransferTemplates
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateTransferRequest'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateTransferRequest'
        required: true
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  '/transfers/v2/templates/outgoing/{id}/deliveries':
    get:
      tags:
        - Transfer
      summary: Get transfer delivery templates
      description: '<b>Permissions Required</b>: Transfer Templates</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetTransferDeliveryTemplate
      parameters:
        - name: id
          in: path
          description: Template Transfer ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TransferDeliveryMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  '/transfers/v2/templates/outgoing/delivery/{id}/transporters':
    get:
      tags:
        - Transfer
      summary: Get transfer delivery transporter templates
      description: '<b>Permissions Required</b>: Transfer Templates</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetTransferDeliveryTransporterTemplates
      parameters:
        - name: id
          in: path
          description: Template Delivery ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TransferDeliveryTransporterMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  '/transfers/v2/templates/outgoing/delivery/{id}/transporters/details':
    get:
      tags:
        - Transfer
      summary: Get transfer delivery transporters (detail) templates
      description: '<b>Permissions Required</b>: Transfer Templates</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetTransferDeliveryTransportersDetailTemplates
      parameters:
        - name: id
          in: path
          description: Template Delivery ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TransferDeliveryTransporterDetailMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  '/transfers/v2/templates/outgoing/delivery/{id}/packages':
    get:
      tags:
        - Transfer
      summary: Get transfer delivery package templates
      description: '<b>Permissions Required</b>: Transfer Templates</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetTransferDeliveryPackagesTemplate
      parameters:
        - name: id
          in: path
          description: Template Transfer Delivery ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TransferDeliveryPackageMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  '/transfers/v2/templates/outgoing/{id}':
    delete:
      tags:
        - Transfer
      summary: Delete transfer template
      description: '<b>Permissions Required</b>: Transfer Templates</br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: DeleteTransferTemplate
      parameters:
        - name: licenseNumber
          in: query
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Transfer Transfer ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
  /unitsofmeasure/v2/active:
    get:
      tags:
        - UnitOfMeasure
      summary: Get active units of measures
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetActiveUnitsOfMeasure
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/UnitOfMeasureMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /unitsofmeasure/v2/inactive:
    get:
      tags:
        - UnitOfMeasure
      summary: Get inactive units of measures
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: ca, co, dc, gu, la, me, md, ma, mi, mn, ms, mo, mt, nv, nj, oh, ok, or, ri, sd, wv'
      operationId: GetInactiveUnitsOfMeasure
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/UnitOfMeasureMetrcWrapper'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
  /wastemethods/v2:
    get:
      tags:
        - WasteMethod
      summary: Returns a list of waste methods.
      description: '<b>Permissions Required</b>: <i>none</i></br><b>Available In</b>: gu, nj, ri'
      operationId: GetWasteMethods
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/WasteMethod'
                nullable: true
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                nullable: true
        '503':
          description: Server Error
components:
  schemas:
    AcceptSaleDeliveryHubRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
      additionalProperties: { }
    ActiveIngredient:
      type: object
      properties:
        name:
          type: string
          nullable: true
        percentage:
          type: number
          format: double
      additionalProperties: { }
    AddAdditiveToPlantBatchRequest:
      type: object
      properties:
        additiveType:
          type: string
          nullable: true
        productTradeName:
          type: string
          nullable: true
        epaRegistrationNumber:
          type: string
          nullable: true
        productSupplier:
          type: string
          nullable: true
        applicationDevice:
          type: string
          nullable: true
        totalAmountApplied:
          type: number
          format: double
        totalAmountUnitOfMeasure:
          type: string
          nullable: true
        activeIngredients:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ActiveIngredient'
          nullable: true
        plantBatchName:
          type: string
          nullable: true
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    AddAdditiveToPlantByLocationRequest:
      type: object
      properties:
        additiveType:
          type: string
          nullable: true
        productTradeName:
          type: string
          nullable: true
        epaRegistrationNumber:
          type: string
          nullable: true
        productSupplier:
          type: string
          nullable: true
        applicationDevice:
          type: string
          nullable: true
        totalAmountApplied:
          type: number
          format: double
        totalAmountUnitOfMeasure:
          type: string
          nullable: true
        activeIngredients:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ActiveIngredient'
          nullable: true
        locationName:
          type: string
          nullable: true
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    AddAdditiveToPlantRequest:
      type: object
      properties:
        additiveType:
          type: string
          nullable: true
        productTradeName:
          type: string
          nullable: true
        epaRegistrationNumber:
          type: string
          nullable: true
        productSupplier:
          type: string
          nullable: true
        applicationDevice:
          type: string
          nullable: true
        totalAmountApplied:
          type: number
          format: double
        totalAmountUnitOfMeasure:
          type: string
          nullable: true
        activeIngredients:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ActiveIngredient'
          nullable: true
        plantLabels:
          type: array
          items:
            type: string
          nullable: true
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    AdjustPackageRequest:
      required:
        - label
      type: object
      properties:
        label:
          minLength: 1
          type: string
        quantity:
          type: number
          format: double
        unitOfMeasure:
          type: string
          nullable: true
        adjustmentReason:
          type: string
          nullable: true
        adjustmentDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        reasonNote:
          type: string
          nullable: true
      additionalProperties: { }
    AdjustPlantBatchRequest:
      type: object
      properties:
        plantBatchName:
          type: string
          nullable: true
        quantity:
          type: integer
          format: int32
          nullable: true
        adjustmentReason:
          type: string
          nullable: true
        adjustmentDate:
          type: string
          nullable: true
        reasonNote:
          type: string
          nullable: true
      additionalProperties: { }
    AdjustProcessingRequest:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        adjustmentReason:
          type: string
          nullable: true
        adjustmentDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        adjustmentNote:
          type: string
          nullable: true
        countUnitOfMeasureName:
          type: string
          nullable: true
        volumeUnitOfMeasureName:
          type: string
          nullable: true
        weightUnitOfMeasureName:
          type: string
          nullable: true
        packages:
          type: array
          items:
            $ref: '#/components/schemas/ProcessingPackageRequest'
          nullable: true
      additionalProperties: { }
    CaregiverStatus:
      type: object
      properties:
        caregiverLicenseNumber:
          type: string
          nullable: true
        active:
          type: boolean
      additionalProperties: { }
    ChangeGrowthPhaseForPlantBatchRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        count:
          type: integer
          format: int32
        startingTag:
          type: string
          nullable: true
        growthPhase:
          type: string
          nullable: true
        newLocation:
          type: string
          nullable: true
        growthDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        patientLicenseNumber:
          type: string
          nullable: true
      additionalProperties: { }
    ChangePackageItemRequest:
      required:
        - item
        - label
      type: object
      properties:
        label:
          minLength: 1
          type: string
        item:
          minLength: 1
          type: string
      additionalProperties: { }
    ChangePackageLocationRequest:
      type: object
      properties:
        label:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        moveDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    ChangePackageNoteRequest:
      type: object
      properties:
        packageLabel:
          type: string
          nullable: true
        note:
          type: string
          nullable: true
      additionalProperties: { }
    ChangePlantGrowthPhaseRequest:
      type: object
      properties:
        id:
          type: integer
          format: int32
          nullable: true
        label:
          type: string
          nullable: true
        newTag:
          type: string
          nullable: true
        growthPhase:
          type: string
          nullable: true
        newLocation:
          type: string
          nullable: true
        growthDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    County:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
      additionalProperties: { }
    CountyMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/County'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    CreateBrandRequest:
      type: object
      properties:
        brandName:
          type: string
          nullable: true
      additionalProperties: { }
    CreateHarvestPackageRequest:
      required:
        - tag
      type: object
      properties:
        tag:
          minLength: 1
          type: string
        location:
          type: string
          nullable: true
        item:
          type: string
          nullable: true
        unitOfWeight:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        note:
          type: string
          nullable: true
        isProductionBatch:
          type: boolean
          nullable: true
        productionBatchNumber:
          type: string
          nullable: true
        isTradeSample:
          type: boolean
          nullable: true
        isDonation:
          type: boolean
          nullable: true
        productRequiresRemediation:
          type: boolean
          nullable: true
        remediateProduct:
          type: boolean
          nullable: true
        remediationMethodId:
          type: integer
          format: int32
          nullable: true
        remediationDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        remediationSteps:
          nullable: true
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        ingredients:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Ingredient'
          nullable: true
      additionalProperties: { }
    CreateItemRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        productCategoryName:
          type: string
          nullable: true
        productCategoryType:
          type: string
          nullable: true
        quantityType:
          type: string
          nullable: true
        defaultLabTestingState:
          type: string
          nullable: true
        unitOfMeasureName:
          type: string
          nullable: true
        approvalStatus:
          type: string
          nullable: true
        approvalStatusDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        strainId:
          type: integer
          format: int32
          nullable: true
        strainName:
          type: string
          nullable: true
        administrationMethod:
          type: string
          nullable: true
        unitCbdPercent:
          type: number
          format: double
          nullable: true
        unitCbdContent:
          type: number
          format: double
          nullable: true
        unitCbdContentUnitOfMeasureName:
          type: string
          nullable: true
        unitCbdContentDose:
          type: number
          format: double
          nullable: true
        unitCbdContentDoseUnitOfMeasureName:
          type: string
          nullable: true
        unitThcPercent:
          type: number
          format: double
          nullable: true
        unitThcContent:
          type: number
          format: double
          nullable: true
        unitThcContentUnitOfMeasureName:
          type: string
          nullable: true
        unitThcContentDose:
          type: number
          format: double
          nullable: true
        unitThcContentDoseUnitOfMeasureName:
          type: string
          nullable: true
        unitVolume:
          type: number
          format: double
          nullable: true
        unitVolumeUnitOfMeasureName:
          type: string
          nullable: true
        unitWeight:
          type: number
          format: double
          nullable: true
        unitWeightUnitOfMeasureName:
          type: string
          nullable: true
        servingSize:
          type: string
          nullable: true
        supplyDurationDays:
          type: integer
          format: int32
          nullable: true
        numberOfDoses:
          type: integer
          format: int32
          nullable: true
        unitQuantity:
          type: number
          format: double
          nullable: true
        unitQuantityUnitOfMeasureName:
          type: string
          nullable: true
        ingredients:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        isUsed:
          type: boolean
          nullable: true
        publicIngredients:
          type: string
          nullable: true
      additionalProperties: { }
    CreateJobTypeRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        category:
          type: string
          nullable: true
        processingSteps:
          type: string
          nullable: true
        attributes:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: { }
    CreateLabTestResultRequest:
      required:
        - label
        - resultDate
        - results
      type: object
      properties:
        label:
          minLength: 1
          type: string
        resultDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        documentFileName:
          type: string
          nullable: true
        documentFileBase64:
          type: string
          nullable: true
        results:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/LabTestResult'
          nullable: true
      additionalProperties: { }
    CreateLocationRequest:
      required:
        - locationTypeName
        - name
      type: object
      properties:
        name:
          minLength: 1
          type: string
        locationTypeName:
          minLength: 1
          type: string
      additionalProperties: { }
    CreatePackagePlantingRequest:
      required:
        - packageLabel
        - plantCount
        - plantedDate
        - unpackagedDate
      type: object
      properties:
        packageLabel:
          minLength: 1
          type: string
        packageAdjustmentAmount:
          type: number
          format: double
          nullable: true
        packageAdjustmentUnitOfMeasureName:
          type: string
          nullable: true
        plantBatchName:
          type: string
          nullable: true
        plantBatchType:
          type: string
          nullable: true
        plantCount:
          type: integer
          format: int32
        locationName:
          type: string
          nullable: true
        strainName:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        plantedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
        unpackagedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
      additionalProperties: { }
    CreatePackageRequest:
      required:
        - actualDate
        - isDonation
        - isProductionBatch
        - item
        - productRequiresRemediation
        - quantity
        - tag
        - unitOfMeasure
        - useSameItem
      type: object
      properties:
        tag:
          minLength: 1
          type: string
        location:
          type: string
          nullable: true
        item:
          minLength: 1
          type: string
        quantity:
          type: number
          format: double
        unitOfMeasure:
          minLength: 1
          type: string
        patientLicenseNumber:
          type: string
          nullable: true
        note:
          type: string
          nullable: true
        isProductionBatch:
          type: boolean
        productionBatchNumber:
          type: string
          nullable: true
        isDonation:
          type: boolean
        productRequiresRemediation:
          type: boolean
        useSameItem:
          type: boolean
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        ingredients:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Ingredient'
          nullable: true
      additionalProperties: { }
    CreatePatientCheckIn:
      type: object
      properties:
        patientLicenseNumber:
          type: string
          nullable: true
        checkInLocationId:
          type: integer
          format: int64
        registrationStartDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        registrationExpiryDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        checkInDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
      additionalProperties: { }
    CreatePatientRequest:
      required:
        - actualDate
        - hasSalesLimitExemption
        - licenseEffectiveEndDate
        - licenseEffectiveStartDate
        - licenseNumber
        - recommendedPlants
        - recommendedSmokableQuantity
      type: object
      properties:
        licenseNumber:
          minLength: 1
          type: string
        licenseEffectiveStartDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        licenseEffectiveEndDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        recommendedPlants:
          type: integer
          format: int32
        recommendedSmokableQuantity:
          type: number
          format: double
        hasSalesLimitExemption:
          type: boolean
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    CreatePhotoRequest:
      required:
        - encodedImageBase64
        - fileName
      type: object
      properties:
        fileName:
          minLength: 1
          type: string
        encodedImageBase64:
          minLength: 1
          type: string
      additionalProperties: { }
    CreatePlantBatchFromPlantPackageRequest:
      type: object
      properties:
        plantLabel:
          type: string
          nullable: true
        packageTag:
          type: string
          nullable: true
        plantBatchType:
          type: string
          nullable: true
        item:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        note:
          type: string
          nullable: true
        isTradeSample:
          type: boolean
        patientLicenseNumber:
          type: string
          nullable: true
        isDonation:
          type: boolean
        count:
          type: integer
          format: int32
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    CreatePlantBatchPackageRequest:
      type: object
      properties:
        id:
          type: integer
          format: int32
          nullable: true
        plantBatch:
          type: string
          nullable: true
        count:
          type: integer
          format: int32
        location:
          type: string
          nullable: true
        item:
          type: string
          nullable: true
        tag:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        note:
          type: string
          nullable: true
        isTradeSample:
          type: boolean
        isDonation:
          type: boolean
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    CreatePlantBatchPlantingRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
        count:
          type: integer
          format: int32
        strain:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    CreatePlantBatchWasteRequest:
      type: object
      properties:
        wasteMethodName:
          type: string
          nullable: true
        mixedMaterial:
          type: string
          nullable: true
        wasteWeight:
          type: number
          format: double
          nullable: true
        unitOfMeasureName:
          type: string
          nullable: true
        reasonName:
          type: string
          nullable: true
        note:
          type: string
          nullable: true
        wasteDate:
          type: string
          nullable: true
        plantBatchName:
          type: string
          nullable: true
      additionalProperties: { }
    CreatePlantWasteRequest:
      type: object
      properties:
        wasteMethodName:
          type: string
          nullable: true
        mixedMaterial:
          type: string
          nullable: true
        wasteWeight:
          type: number
          format: double
          nullable: true
        unitOfMeasureName:
          type: string
          nullable: true
        reasonName:
          type: string
          nullable: true
        note:
          type: string
          nullable: true
        wasteDate:
          type: string
          nullable: true
        plantBatchName:
          type: string
          nullable: true
      additionalProperties: { }
    CreatePlantingOfPlantRequest:
      type: object
      properties:
        plantLabel:
          type: string
          nullable: true
        plantBatchName:
          type: string
          nullable: true
        plantBatchType:
          type: string
          nullable: true
        plantCount:
          type: integer
          format: int32
        locationName:
          type: string
          nullable: true
        strainName:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
      additionalProperties: { }
    CreateProcessingPackageRequest:
      type: object
      properties:
        jobName:
          type: string
          nullable: true
        tag:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        item:
          type: string
          nullable: true
        quantity:
          type: number
          format: double
          nullable: true
        unitOfMeasure:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        note:
          type: string
          nullable: true
        productionBatchNumber:
          type: string
          nullable: true
        finishProcessingJob:
          type: boolean
        finishDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        wasteCountQuantity:
          type: integer
          format: int32
        wasteCountUnitOfMeasureName:
          type: string
          nullable: true
        wasteVolumeQuantity:
          type: number
          format: double
          nullable: true
        wasteVolumeUnitOfMeasureName:
          type: string
          nullable: true
        wasteWeightQuantity:
          type: number
          format: double
          nullable: true
        wasteWeightUnitOfMeasureName:
          type: string
          nullable: true
        finishNote:
          type: string
          nullable: true
        packageDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
      additionalProperties: { }
    CreateSaleDeliveryRequest:
      type: object
      properties:
        salesDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        salesCustomerType:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        consumerId:
          type: string
          nullable: true
        driverEmployeeId:
          type: string
          nullable: true
        driverName:
          type: string
          nullable: true
        driversLicenseNumber:
          type: string
          nullable: true
        phoneNumberForQuestions:
          type: string
          nullable: true
        vehicleMake:
          type: string
          nullable: true
        vehicleModel:
          type: string
          nullable: true
        vehicleLicensePlateNumber:
          type: string
          nullable: true
        recipientName:
          type: string
          nullable: true
        recipientAddressStreet1:
          type: string
          nullable: true
        recipientAddressStreet2:
          type: string
          nullable: true
        recipientAddressCity:
          type: string
          nullable: true
        recipientAddressCounty:
          type: string
          nullable: true
        recipientAddressState:
          type: string
          nullable: true
        recipientAddressPostalCode:
          type: string
          nullable: true
        plannedRoute:
          type: string
          nullable: true
        estimatedDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        estimatedArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        transactions:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SaleTransaction'
          nullable: true
      additionalProperties: { }
    CreateSaleReceiptRequest:
      type: object
      properties:
        salesDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
        salesCustomerType:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        caregiverLicenseNumber:
          type: string
          nullable: true
        identificationMethod:
          type: string
          nullable: true
        transactions:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SaleReceiptTransaction'
          nullable: true
      additionalProperties: { }
    CreateSalesDeliveryRetailerRequest:
      type: object
      properties:
        dateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        driverEmployeeId:
          type: string
          nullable: true
        driverName:
          type: string
          nullable: true
        driversLicenseNumber:
          type: string
          nullable: true
        phoneNumberForQuestions:
          type: string
          nullable: true
        vehicleMake:
          type: string
          nullable: true
        vehicleModel:
          type: string
          nullable: true
        vehicleLicensePlateNumber:
          type: string
          nullable: true
        estimatedDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        destinations:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Destination'
          nullable: true
        packages:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SalesDeliveryPackage'
          nullable: true
      additionalProperties: { }
    CreateSalesDeliveryRetailerSaleRequest:
      type: object
      properties:
        retailerDeliveryId:
          type: integer
          format: int32
        salesDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        salesCustomerType:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        consumerId:
          type: string
          nullable: true
        phoneNumberForQuestions:
          type: string
          nullable: true
        recipientName:
          type: string
          nullable: true
        recipientAddressStreet1:
          type: string
          nullable: true
        recipientAddressStreet2:
          type: string
          nullable: true
        recipientAddressCity:
          type: string
          nullable: true
        recipientAddressCounty:
          type: string
          nullable: true
        recipientAddressState:
          type: string
          nullable: true
        recipientAddressPostalCode:
          type: string
          nullable: true
        plannedRoute:
          type: string
          nullable: true
        estimatedDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        estimatedArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        transactions:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SalesDeliveryTransaction'
          nullable: true
      additionalProperties: { }
    CreateStrainRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        testingStatus:
          type: string
          nullable: true
        thcLevel:
          type: number
          format: double
        cbdLevel:
          type: number
          format: double
        indicaPercentage:
          type: number
          format: double
        sativaPercentage:
          type: number
          format: double
      additionalProperties: { }
    CreateTransferRequest:
      type: object
      properties:
        shipperLicenseNumber:
          type: string
          nullable: true
        shipperName:
          type: string
          nullable: true
        shipperMainPhoneNumber:
          type: string
          nullable: true
        shipperAddress1:
          type: string
          nullable: true
        shipperAddress2:
          type: string
          nullable: true
        shipperAddressCity:
          type: string
          nullable: true
        shipperAddressState:
          type: string
          nullable: true
        shipperAddressPostalCode:
          type: string
          nullable: true
        transporterFacilityLicenseNumber:
          type: string
          nullable: true
        driverOccupationalLicenseNumber:
          type: string
          nullable: true
        driverName:
          type: string
          nullable: true
        driverLicenseNumber:
          type: string
          nullable: true
        phoneNumberForQuestions:
          type: string
          nullable: true
        vehicleMake:
          type: string
          nullable: true
        vehicleModel:
          type: string
          nullable: true
        vehicleLicensePlateNumber:
          type: string
          nullable: true
        destinations:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ExternalDestination'
          nullable: true
      additionalProperties: { }
    DeliveryReturnReason:
      type: object
      properties:
        name:
          type: string
          nullable: true
        requiresNote:
          type: boolean
      additionalProperties: { }
    DeliveryReturnReasonMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/DeliveryReturnReason'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    DepartSaleDeliveryHubRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
      additionalProperties: { }
    Destination:
      type: object
      properties:
        salesCustomerType:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        consumerId:
          type: string
          nullable: true
        recipientName:
          type: string
          nullable: true
        recipientAddressStreet1:
          type: string
          nullable: true
        recipientAddressStreet2:
          type: string
          nullable: true
        recipientAddressCity:
          type: string
          nullable: true
        recipientAddressCounty:
          type: string
          nullable: true
        recipientAddressState:
          type: string
          nullable: true
        recipientAddressPostalCode:
          type: string
          nullable: true
        estimatedArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        transactions:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SalesDeliveryTransaction'
          nullable: true
      additionalProperties: { }
    DestroyPlantBatchRequest:
      type: object
      properties:
        plantBatch:
          type: string
          nullable: true
        count:
          type: integer
          format: int32
        reasonNote:
          type: string
          nullable: true
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    DestroyPlantRequest:
      type: object
      properties:
        id:
          type: integer
          format: int32
          nullable: true
        label:
          type: string
          nullable: true
        wasteMethodName:
          type: string
          nullable: true
        wasteMaterialMixed:
          type: string
          nullable: true
        wasteWeight:
          type: number
          format: double
        wasteUnitOfMeasureName:
          type: string
          nullable: true
        wasteReasonName:
          type: string
          nullable: true
        reasonNote:
          type: string
          nullable: true
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    Employee:
      type: object
      properties:
        fullName:
          type: string
          nullable: true
        license:
          oneOf:
            - $ref: '#/components/schemas/License'
          nullable: true
      additionalProperties: { }
    EmployeeMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Employee'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          nullable: true
      additionalProperties: false
    ExternalDestination:
      type: object
      properties:
        recipientLicenseNumber:
          type: string
          nullable: true
        transferTypeName:
          type: string
          nullable: true
        plannedRoute:
          type: string
          nullable: true
        estimatedDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
        estimatedArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
        grossWeight:
          type: number
          format: double
          nullable: true
        grossUnitOfWeightId:
          type: string
          nullable: true
        transporters:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ExternalTransporter'
          nullable: true
        packages:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Package'
          nullable: true
      additionalProperties: { }
    ExternalTransporter:
      type: object
      properties:
        transporterFacilityLicenseNumber:
          type: string
          nullable: true
        driverOccupationalLicenseNumber:
          type: string
          nullable: true
        driverName:
          type: string
          nullable: true
        driverLicenseNumber:
          type: string
          nullable: true
        phoneNumberForQuestions:
          type: string
          nullable: true
        vehicleMake:
          type: string
          nullable: true
        vehicleModel:
          type: string
          nullable: true
        vehicleLicensePlateNumber:
          type: string
          nullable: true
        isLayover:
          type: boolean
        estimatedDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
        estimatedArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
        transporterDetails:
          oneOf:
            - $ref: '#/components/schemas/TransferDeliveryTransporterDetail'
          nullable: true
      additionalProperties: { }
    Facility:
      required:
        - FacilityType
        - License
      type: object
      properties:
        HireDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        IsOwner:
          type: boolean
        IsManager:
          type: boolean
        Occupations:
          type: array
          items: { }
          nullable: true
        Name:
          type: string
          nullable: true
        Alias:
          type: string
          nullable: true
        DisplayName:
          type: string
          nullable: true
        CredentialedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        SupportActivationDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        SupportExpirationDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        SupportLastPaidDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        FacilityType:
          oneOf:
            - $ref: '#/components/schemas/FacilityType'
        License:
          oneOf:
            - $ref: '#/components/schemas/License'
      additionalProperties: { }
    FacilityMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Facility'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    FacilityType:
      type: object
      properties:
        isMedical:
          type: boolean
          nullable: true
        isRetail:
          type: boolean
          nullable: true
        isHemp:
          type: boolean
          nullable: true
        isSalesDeliveryHub:
          type: boolean
          nullable: true
        restrictHarvestPlantRestoreTimeHours:
          type: integer
          format: int32
          nullable: true
        totalMemberPatientsAllowed:
          type: integer
          format: int32
          nullable: true
        canGrowPlants:
          type: boolean
          nullable: true
        canCreateOpeningBalancePlantBatches:
          type: boolean
          nullable: true
        canTagPlantBatches:
          type: boolean
          nullable: true
        canAssignLocationsToPlantBatches:
          type: boolean
          nullable: true
        plantsRequirePatientAffiliation:
          type: boolean
          nullable: true
        plantBatchesCanContainMotherPlants:
          type: boolean
          nullable: true
        canUpdatePlantStrains:
          type: boolean
          nullable: true
        canTrackVegetativePlants:
          type: boolean
          nullable: true
        canCreateImmaturePlantPackagesFromPlants:
          type: boolean
          nullable: true
        canPackageVegetativePlants:
          type: boolean
          nullable: true
        canPackageWaste:
          type: boolean
          nullable: true
        canReportHarvestSchedules:
          type: boolean
          nullable: true
        canSubmitHarvestsForTesting:
          type: boolean
          nullable: true
        canRequireHarvestSampleLabTestBatches:
          type: boolean
          nullable: true
        canCreateOpeningBalancePackages:
          type: boolean
          nullable: true
        canCreateDerivedPackages:
          type: boolean
          nullable: true
        canAssignLocationsToPackages:
          type: boolean
          nullable: true
        canUpdateLocationsOnPackages:
          type: boolean
          nullable: true
        packagesRequirePatientAffiliation:
          type: boolean
          nullable: true
        canCreateTradeSamplePackages:
          type: boolean
          nullable: true
        canDonatePackages:
          type: boolean
          nullable: true
        canSubmitPackagesForTesting:
          type: boolean
          nullable: true
        canCreateProcessValidationPackages:
          type: boolean
          nullable: true
        canRequirePackageSampleLabTestBatches:
          type: boolean
          nullable: true
        canRequestProductRemediation:
          type: boolean
          nullable: true
        canRemediatePackagesWithFailedLabResults:
          type: boolean
          nullable: true
        canInfuseProducts:
          type: boolean
          nullable: true
        canDestroyProduct:
          type: boolean
          nullable: true
        canTestPackages:
          type: boolean
          nullable: true
        canTransferFromExternalFacilities:
          type: boolean
          nullable: true
        canSellToConsumers:
          type: boolean
          nullable: true
        canSellToPatients:
          type: boolean
          nullable: true
        canSellToExternalPatients:
          type: boolean
          nullable: true
        canSellToCaregivers:
          type: boolean
          nullable: true
        advancedSales:
          type: boolean
          nullable: true
        salesRequirePatientNumber:
          type: boolean
          nullable: true
        salesRequireExternalPatientNumber:
          type: boolean
          nullable: true
        salesRequireExternalPatientIdentificationMethod:
          type: boolean
          nullable: true
        salesRequireCaregiverNumber:
          type: boolean
          nullable: true
        salesRequireCaregiverPatientNumber:
          type: boolean
          nullable: true
        canDeliverSalesToConsumers:
          type: boolean
          nullable: true
        salesDeliveryRequireConsumerId:
          type: boolean
          nullable: true
        canDeliverSalesToPatients:
          type: boolean
          nullable: true
        salesDeliveryRequirePatientNumber:
          type: boolean
          nullable: true
        salesDeliveryRequireRecipientName:
          type: boolean
          nullable: true
        canHaveMemberPatients:
          type: boolean
          nullable: true
        canReportPatientCheckIns:
          type: boolean
          nullable: true
        canSpecifyPatientSalesLimitExemption:
          type: boolean
          nullable: true
        canReportPatientsAdverseResponses:
          type: boolean
          nullable: true
        canReportStrainProperties:
          type: boolean
          nullable: true
        canRecordProcessingJobs:
          type: boolean
          nullable: true
        canRecordProductForDestruction:
          type: boolean
          nullable: true
        canClonePlantBatches:
          type: boolean
          nullable: true
        testsRequireLabSample:
          type: boolean
          nullable: true
        restrictPlantBatchAdjustmentTimeHours:
          type: integer
          format: int32
          nullable: true
        canTakePlantBatchesOnTrip:
          type: boolean
          nullable: true
        canTakePlantsOnTrip:
          type: boolean
          nullable: true
        canTakeHarvestsOnTrip:
          type: boolean
          nullable: true
        canTakePackagesOnTrip:
          type: boolean
          nullable: true
        canSellFromPackagesOnTrip:
          type: boolean
          nullable: true
        salesDeliveryAllowPlannedRoute:
          type: boolean
          nullable: true
        salesDeliveryAllowAddress:
          type: boolean
          nullable: true
        salesDeliveryAllowCity:
          type: boolean
          nullable: true
        salesDeliveryAllowState:
          type: boolean
          nullable: true
        salesDeliveryAllowCounty:
          type: boolean
          nullable: true
        salesDeliveryAllowZip:
          type: boolean
          nullable: true
        retailerDelivery:
          type: boolean
          nullable: true
        retailerDeliveryAllowTradeSamples:
          type: boolean
          nullable: true
        retailerDeliveryAllowDonations:
          type: boolean
          nullable: true
        retailerDeliveryRequirePrice:
          type: boolean
          nullable: true
        retailerDeliveryAllowPartialPackages:
          type: boolean
          nullable: true
        canCreatePartialPackages:
          type: boolean
          nullable: true
        canAdjustSourcePackagesWithPartials:
          type: boolean
          nullable: true
        canReportOperationalExceptions:
          type: boolean
          nullable: true
        canReportAdulteration:
          type: boolean
          nullable: true
      additionalProperties: { }
    FinalizeSaleReceiptRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
      additionalProperties: { }
    FinishHarvestRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    FinishPackageRequest:
      type: object
      properties:
        label:
          type: string
          nullable: true
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    FinishProcessingRequest:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        finishDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        finishNote:
          type: string
          nullable: true
        totalCountWaste:
          type: number
          format: double
          nullable: true
        wasteCountUnitOfMeasureName:
          type: string
          nullable: true
        totalVolumeWaste:
          type: number
          format: double
          nullable: true
        wasteVolumeUnitOfMeasureName:
          type: string
          nullable: true
        totalWeightWaste:
          type: number
          format: double
          nullable: true
        wasteWeightUnitOfMeasureName:
          type: string
          nullable: true
      additionalProperties: { }
    Harvest:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
        harvestType:
          type: string
          nullable: true
        sourceStrainCount:
          type: integer
          format: int32
          nullable: true
        sourceStrainNames:
          type: string
          nullable: true
        strains:
          type: array
          items:
            type: string
          nullable: true
        dryingLocationId:
          type: integer
          format: int32
          nullable: true
        dryingLocationName:
          type: string
          nullable: true
        dryingLocationTypeName:
          type: string
          nullable: true
        dryingRoomId:
          type: integer
          format: int32
          nullable: true
        dryingRoomName:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        currentWeight:
          type: number
          format: double
          nullable: true
        totalWasteWeight:
          type: number
          format: double
          nullable: true
        plantCount:
          type: integer
          format: int32
          nullable: true
        totalWetWeight:
          type: number
          format: double
          nullable: true
        totalRestoredWeight:
          type: number
          format: double
          nullable: true
        packageCount:
          type: integer
          format: int32
          nullable: true
        totalPackagedWeight:
          type: number
          format: double
          nullable: true
        unitOfWeightName:
          type: string
          nullable: true
        labTestingState:
          type: string
          nullable: true
        labTestingStateDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        isOnHold:
          type: boolean
          nullable: true
        harvestStartDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        finishedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        archivedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        lastModified:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        isOnTrip:
          type: boolean
          nullable: true
      additionalProperties: { }
    HarvestMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Harvest'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    HarvestPlantRequest:
      type: object
      properties:
        plant:
          type: string
          nullable: true
        weight:
          type: number
          format: double
        unitOfWeight:
          type: string
          nullable: true
        dryingLocation:
          type: string
          nullable: true
        harvestName:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    HarvestWaste:
      type: object
      properties:
        id:
          type: integer
          format: int64
        wasteTypeName:
          type: string
          nullable: true
        wasteWeight:
          type: number
          format: double
          nullable: true
        unitOfWeightName:
          type: string
          nullable: true
        actualDate:
          type: string
          nullable: true
      additionalProperties: { }
    HarvestWasteMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/HarvestWaste'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    HarvestWasteType:
      type: object
      properties:
        name:
          type: string
          nullable: true
      additionalProperties: { }
    HarvestWasteTypeMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/HarvestWasteType'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    Ingredient:
      type: object
      properties:
        harvestId:
          type: integer
          format: int32
          nullable: true
        harvestName:
          type: string
          nullable: true
        weight:
          type: number
          format: double
          nullable: true
        unitOfWeight:
          type: string
          nullable: true
      additionalProperties: { }
    Item:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
        productCategoryName:
          type: string
          nullable: true
        productCategoryType:
          type: string
          nullable: true
        quantityType:
          type: string
          nullable: true
        defaultLabTestingState:
          type: string
          nullable: true
        unitOfMeasureName:
          type: string
          nullable: true
        approvalStatus:
          type: string
          nullable: true
        approvalStatusDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        strainId:
          type: integer
          format: int32
          nullable: true
        strainName:
          type: string
          nullable: true
        administrationMethod:
          type: string
          nullable: true
        unitCbdPercent:
          type: number
          format: double
          nullable: true
        unitCbdContent:
          type: number
          format: double
          nullable: true
        unitCbdContentUnitOfMeasureName:
          type: string
          nullable: true
        unitCbdContentDose:
          type: number
          format: double
          nullable: true
        unitCbdContentDoseUnitOfMeasureName:
          type: string
          nullable: true
        unitThcPercent:
          type: number
          format: double
          nullable: true
        unitThcContent:
          type: number
          format: double
          nullable: true
        unitThcContentUnitOfMeasureName:
          type: string
          nullable: true
        unitThcContentDose:
          type: number
          format: double
          nullable: true
        unitThcContentDoseUnitOfMeasureName:
          type: string
          nullable: true
        unitVolume:
          type: number
          format: double
          nullable: true
        unitVolumeUnitOfMeasureName:
          type: string
          nullable: true
        unitWeight:
          type: number
          format: double
          nullable: true
        unitWeightUnitOfMeasureName:
          type: string
          nullable: true
        servingSize:
          type: string
          nullable: true
        supplyDurationDays:
          type: integer
          format: int32
          nullable: true
        numberOfDoses:
          type: integer
          format: int32
          nullable: true
        unitQuantity:
          type: number
          format: double
          nullable: true
        unitQuantityUnitOfMeasureName:
          type: string
          nullable: true
        ingredients:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        isUsed:
          type: boolean
          nullable: true
        publicIngredients:
          type: string
          nullable: true
        productImages:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Photo'
          nullable: true
        labelImages:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Photo'
          nullable: true
        packagingImages:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Photo'
          nullable: true
        isExpirationDateRequired:
          type: boolean
          nullable: true
        isSellByDateRequired:
          type: boolean
          nullable: true
        isUseByDateRequired:
          type: boolean
          nullable: true
        itemBrandId:
          type: integer
          format: int64
          nullable: true
        allergens:
          type: string
          nullable: true
        productPhotoDescription:
          type: string
          nullable: true
        labelPhotoDescription:
          type: string
          nullable: true
        packagingPhotoDescription:
          type: string
          nullable: true
      additionalProperties: { }
    ItemBrand:
      type: object
      properties:
        name:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
      additionalProperties: { }
    ItemBrandMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ItemBrand'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    ItemCategory:
      type: object
      properties:
        name:
          type: string
          nullable: true
        productCategoryType:
          type: string
          nullable: true
        quantityType:
          type: string
          nullable: true
        requiresStrain:
          type: boolean
          nullable: true
        requiresItemBrand:
          type: boolean
          nullable: true
        requiresAdministrationMethod:
          type: boolean
          nullable: true
        requiresUnitCbdPercent:
          type: boolean
          nullable: true
        requiresUnitCbdContent:
          type: boolean
          nullable: true
        requiresUnitCbdContentDose:
          type: boolean
          nullable: true
        requiresUnitThcPercent:
          type: boolean
          nullable: true
        requiresUnitThcContent:
          type: boolean
          nullable: true
        requiresUnitThcContentDose:
          type: boolean
          nullable: true
        requiresUnitVolume:
          type: boolean
          nullable: true
        requiresUnitWeight:
          type: boolean
          nullable: true
        requiresServingSize:
          type: boolean
          nullable: true
        requiresSupplyDurationDays:
          type: boolean
          nullable: true
        requiresNumberOfDoses:
          type: boolean
          nullable: true
        requiresIngredients:
          type: boolean
          nullable: true
        requiresDescription:
          type: boolean
          nullable: true
        requiresProductPhoto:
          type: boolean
          nullable: true
        requiresLabelPhotos:
          type: boolean
          nullable: true
        requiresPackagingPhotos:
          type: boolean
          nullable: true
        canContainSeeds:
          type: boolean
          nullable: true
        canBeRemediated:
          type: boolean
          nullable: true
        requiresPublicIngredients:
          type: boolean
          nullable: true
        requiresProductPhotos:
          type: boolean
          nullable: true
        canBeDestroyed:
          type: boolean
          nullable: true
        requiresAllergens:
          type: boolean
          nullable: true
        requiresProductPhotoDescription:
          type: boolean
          nullable: true
        requiresLabelPhotoDescription:
          type: boolean
          nullable: true
        requiresPackagingPhotoDescription:
          type: boolean
          nullable: true
        canBeRevised:
          type: boolean
          nullable: true
      additionalProperties: { }
    ItemCategoryMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ItemCategory'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    ItemMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Item'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    JobTypeAttribute:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        lastModified:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
      additionalProperties: { }
    JobTypeAttributeMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/JobTypeAttribute'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    LabTest:
      type: object
      properties:
        packageId:
          type: integer
          format: int64
        labTestResultId:
          type: integer
          format: int64
        labFacilityLicenseNumber:
          type: string
          nullable: true
        labFacilityName:
          type: string
          nullable: true
        sourcePackageLabel:
          type: string
          nullable: true
        productName:
          type: string
          nullable: true
        productCategoryName:
          type: string
          nullable: true
        testPerformedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        overallPassed:
          type: boolean
          nullable: true
        revokedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        resultReleased:
          type: boolean
          nullable: true
        resultReleaseDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        testTypeName:
          type: string
          nullable: true
        testPassed:
          type: boolean
          nullable: true
        testResultLevel:
          type: number
          format: double
          nullable: true
        testComment:
          type: string
          nullable: true
        testInformationalOnly:
          type: boolean
          nullable: true
        labTestDetailRevokedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
      additionalProperties: { }
    LabTestBatch:
      type: object
      properties:
        name:
          type: string
          nullable: true
        labTestTypes:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/LabTestType'
          nullable: true
      additionalProperties: { }
    LabTestMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/LabTest'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    LabTestResult:
      required:
        - labTestTypeName
        - notes
        - passed
        - quantity
      type: object
      properties:
        labTestTypeName:
          minLength: 1
          type: string
        quantity:
          type: number
          format: double
        passed:
          type: boolean
        notes:
          minLength: 1
          type: string
      additionalProperties: { }
    LabTestType:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
        requiresTestResult:
          type: boolean
          nullable: true
        informationalOnly:
          type: boolean
          nullable: true
        alwaysPasses:
          type: boolean
          nullable: true
        labTestResultMode:
          type: string
          nullable: true
        labTestResultMinimum:
          type: number
          format: double
          nullable: true
        labTestResultMaximum:
          type: number
          format: double
          nullable: true
        dependencyMode:
          type: string
          nullable: true
      additionalProperties: { }
    LabTestTypeMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/LabTestType'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    License:
      required:
        - Number
      type: object
      properties:
        Number:
          minLength: 1
          type: string
        StartDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        EndDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        LicenseType:
          type: string
          nullable: true
      additionalProperties: { }
    Location:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
        locationTypeId:
          type: integer
          format: int64
        locationTypeName:
          type: string
          nullable: true
        forPlantBatches:
          type: boolean
          nullable: true
        forPlants:
          type: boolean
          nullable: true
        forHarvests:
          type: boolean
          nullable: true
        forPackages:
          type: boolean
          nullable: true
      additionalProperties: { }
    LocationMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Location'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    LocationType:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
        forPlantBatches:
          type: boolean
          nullable: true
        forPlants:
          type: boolean
          nullable: true
        forHarvests:
          type: boolean
          nullable: true
        forPackages:
          type: boolean
          nullable: true
      additionalProperties: { }
    LocationTypeMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/LocationType'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    ManicurePlantRequest:
      type: object
      properties:
        plant:
          type: string
          nullable: true
        weight:
          type: number
          format: double
        unitOfWeight:
          type: string
          nullable: true
        dryingLocation:
          type: string
          nullable: true
        harvestName:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    MergePlantRequest:
      type: object
      properties:
        targetPlantGroupLabel:
          type: string
          nullable: true
        sourcePlantGroupLabel:
          type: string
          nullable: true
        mergeDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    MoveHarvestRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        harvestName:
          type: string
          nullable: true
        dryingLocation:
          type: string
          nullable: true
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    MovePlantBatchRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        moveDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    MovePlantRequest:
      type: object
      properties:
        id:
          type: integer
          format: int32
          nullable: true
        label:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    Package:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        label:
          type: string
          nullable: true
        packageType:
          type: string
          nullable: true
        sourceHarvestNames:
          type: string
          nullable: true
        sourceHarvestCount:
          type: integer
          format: int32
          nullable: true
        locationId:
          type: integer
          format: int32
          nullable: true
        locationName:
          type: string
          nullable: true
        locationTypeName:
          type: string
          nullable: true
        roomId:
          type: integer
          format: int32
          nullable: true
        roomName:
          type: string
          nullable: true
        quantity:
          type: number
          format: double
          nullable: true
        unitOfMeasureName:
          type: string
          nullable: true
        unitOfMeasureAbbreviation:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        itemFromFacilityLicenseNumber:
          type: string
          nullable: true
        itemFromFacilityName:
          type: string
          nullable: true
        note:
          type: string
          nullable: true
        packagedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        initialLabTestingState:
          type: string
          nullable: true
        labTestingState:
          type: string
          nullable: true
        labTestingStateDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        isProductionBatch:
          type: boolean
        productionBatchNumber:
          type: string
          nullable: true
        sourceProductionBatchNumbers:
          type: string
          nullable: true
        isTradeSample:
          type: boolean
          nullable: true
        isDonation:
          type: boolean
          nullable: true
        isDonationPersistent:
          type: boolean
          nullable: true
        sourcePackageIsDonation:
          type: boolean
          nullable: true
        sourcePackageIsTradeSample:
          type: boolean
          nullable: true
        sourcePackageCount:
          type: integer
          format: int32
          nullable: true
        isTestingSample:
          type: boolean
          nullable: true
        isProcessValidationTestingSample:
          type: boolean
          nullable: true
        sourceProcessingJobCount:
          type: integer
          format: int32
          nullable: true
        isTradeSamplePersistent:
          type: boolean
          nullable: true
        productRequiresRemediation:
          type: boolean
          nullable: true
        containsRemediatedProduct:
          type: boolean
          nullable: true
        remediationDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        receivedDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        receivedFromManifestNumber:
          type: string
          nullable: true
        receivedFromFacilityLicenseNumber:
          type: string
          nullable: true
        receivedFromFacilityName:
          type: string
          nullable: true
        isOnHold:
          type: boolean
        archivedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        finishedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        lastModified:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
        item:
          oneOf:
            - $ref: '#/components/schemas/Item'
          nullable: true
        sourcePackageLabels:
          type: string
          nullable: true
        isOnTrip:
          type: boolean
          nullable: true
        isOnRetailerDelivery:
          type: boolean
          nullable: true
      additionalProperties: { }
    PackageAdjustReason:
      type: object
      properties:
        name:
          type: string
          nullable: true
        requiresNote:
          type: boolean
          nullable: true
        requiresWasteWeight:
          type: boolean
          nullable: true
        requiresImmatureWasteWeight:
          type: boolean
          nullable: true
        requiresMatureWasteWeight:
          type: boolean
          nullable: true
      additionalProperties: { }
    PackageAdjustReasonMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PackageAdjustReason'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    PackageDonationRequest:
      type: object
      properties:
        label:
          type: string
          nullable: true
      additionalProperties: { }
    PackageLabTest:
      type: object
      properties:
        labFacilityLicenseNumber:
          type: string
          nullable: true
        labFacilityName:
          type: string
          nullable: true
        overallPassed:
          type: boolean
          nullable: true
        testPerformedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        resultReleased:
          type: boolean
          nullable: true
        resultReleaseDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        testTypeName:
          type: string
          nullable: true
        testPassed:
          type: boolean
          nullable: true
        testResultLevel:
          type: number
          format: double
        testComment:
          type: string
          nullable: true
        testInformationalOnly:
          type: boolean
          nullable: true
        id:
          type: integer
          format: int64
        label:
          type: string
          nullable: true
        packageType:
          type: string
          nullable: true
        sourceHarvestCount:
          type: integer
          format: int32
          nullable: true
        sourcePackageCount:
          type: integer
          format: int32
          nullable: true
        sourceProcessingJobCount:
          type: integer
          format: int32
          nullable: true
        sourceHarvestNames:
          type: string
          nullable: true
        sourcePackageLabels:
          type: string
          nullable: true
        locationId:
          type: integer
          format: int64
          nullable: true
        locationName:
          type: string
          nullable: true
        locationTypeName:
          type: string
          nullable: true
        quantity:
          type: number
          format: double
          nullable: true
        unitOfMeasureName:
          type: string
          nullable: true
        unitOfMeasureAbbreviation:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        itemFromFacilityLicenseNumber:
          type: string
          nullable: true
        itemFromFacilityName:
          type: string
          nullable: true
        note:
          type: string
          nullable: true
        packagedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        expirationDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        sellByDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        useByDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        initialLabTestingState:
          type: string
          nullable: true
        labTestingState:
          type: string
          nullable: true
        labTestingStateDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        labTestingRecordedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        isProductionBatch:
          type: boolean
          nullable: true
        productionBatchNumber:
          type: string
          nullable: true
        sourceProductionBatchNumbers:
          type: string
          nullable: true
        isTradeSample:
          type: boolean
          nullable: true
        isTradeSamplePersistent:
          type: boolean
          nullable: true
        sourcePackageIsTradeSample:
          type: boolean
          nullable: true
        isDonation:
          type: boolean
          nullable: true
        isDonationPersistent:
          type: boolean
          nullable: true
        sourcePackageIsDonation:
          type: boolean
          nullable: true
        isTestingSample:
          type: boolean
          nullable: true
        isProcessValidationTestingSample:
          type: boolean
          nullable: true
        productRequiresRemediation:
          type: boolean
          nullable: true
        containsRemediatedProduct:
          type: boolean
          nullable: true
        remediationDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        receivedDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        receivedFromManifestNumber:
          type: string
          nullable: true
        receivedFromFacilityLicenseNumber:
          type: string
          nullable: true
        receivedFromFacilityName:
          type: string
          nullable: true
        isOnHold:
          type: boolean
          nullable: true
        archivedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        finishedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        isOnTrip:
          type: boolean
          nullable: true
        isOnRetailerDelivery:
          type: boolean
          nullable: true
        packageForProductDestruction:
          type: string
          nullable: true
        lastModified:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        item:
          oneOf:
            - $ref: '#/components/schemas/PackageLabTestItem'
          nullable: true
      additionalProperties: { }
    PackageLabTestItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
        productCategoryName:
          type: string
          nullable: true
        productCategoryType:
          type: integer
          format: int32
          nullable: true
        isExpirationDateRequired:
          type: boolean
          nullable: true
        isSellByDateRequired:
          type: boolean
          nullable: true
        isUseByDateRequired:
          type: boolean
          nullable: true
        quantityType:
          type: integer
          format: int32
          nullable: true
        defaultLabTestingState:
          type: integer
          format: int32
          nullable: true
        unitOfMeasureName:
          type: string
          nullable: true
        approvalStatus:
          type: integer
          format: int32
          nullable: true
        approvalStatusDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        strainId:
          type: integer
          format: int64
          nullable: true
        strainName:
          type: string
          nullable: true
        itemBrandId:
          type: integer
          format: int64
          nullable: true
        itemBrandName:
          type: string
          nullable: true
        administrationMethod:
          type: string
          nullable: true
        unitCbdPercent:
          type: string
          nullable: true
        unitCbdContent:
          type: string
          nullable: true
        unitCbdContentUnitOfMeasureName:
          type: string
          nullable: true
        unitCbdContentDose:
          type: string
          nullable: true
        unitCbdContentDoseUnitOfMeasureName:
          type: string
          nullable: true
        unitThcPercent:
          type: string
          nullable: true
        unitThcContent:
          type: string
          nullable: true
        unitThcContentUnitOfMeasureName:
          type: string
          nullable: true
        unitThcContentDose:
          type: string
          nullable: true
        unitThcContentDoseUnitOfMeasureName:
          type: string
          nullable: true
        unitVolume:
          type: string
          nullable: true
        unitVolumeUnitOfMeasureName:
          type: string
          nullable: true
        unitWeight:
          type: string
          nullable: true
        unitWeightUnitOfMeasureName:
          type: string
          nullable: true
        servingSize:
          type: string
          nullable: true
        supplyDurationDays:
          type: integer
          format: int32
          nullable: true
        numberOfDoses:
          type: integer
          format: int32
          nullable: true
        unitQuantity:
          type: integer
          format: int32
          nullable: true
        unitQuantityUnitOfMeasureName:
          type: string
          nullable: true
        publicIngredients:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        allergens:
          type: string
          nullable: true
        productImages:
          type: array
          items:
            type: string
          nullable: true
        productPhotoDescription:
          type: string
          nullable: true
        labelImages:
          type: array
          items:
            type: string
          nullable: true
        labelPhotoDescription:
          type: string
          nullable: true
        packagingImages:
          type: array
          items:
            type: string
          nullable: true
        packagingPhotoDescription:
          type: string
          nullable: true
        isUsed:
          type: boolean
          nullable: true
      additionalProperties: { }
    PackageLabTestMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PackageLabTest'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    PackageLabTestsRequiredRequest:
      type: object
      properties:
        label:
          type: string
          nullable: true
        requiredLabTestBatches:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: { }
    PackageMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Package'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    PackageSourceHarvest:
      type: object
      properties:
        harvestedByFacilityLicenseNumber:
          type: string
          nullable: true
        harvestedByFacilityName:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        harvestStartDate:
          type: string
          nullable: true
      additionalProperties: { }
    PackageTradeSampleRequest:
      type: object
      properties:
        label:
          type: string
          nullable: true
      additionalProperties: { }
    Patient:
      required:
        - patientId
      type: object
      properties:
        patientId:
          type: integer
          format: int64
        licenseNumber:
          type: string
          nullable: true
        registrationDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        licenseEffectiveStartDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        licenseEffectiveEndDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        recommendedPlants:
          type: integer
          format: int32
          nullable: true
        recommendedSmokableQuantity:
          type: number
          format: double
          nullable: true
        hasSalesLimitExemption:
          type: boolean
          nullable: true
        otherFacilitiesCount:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    PatientCheckIn:
      type: object
      properties:
        id:
          type: integer
          format: int64
        patientLicenseNumber:
          type: string
          nullable: true
        checkInLocationId:
          type: integer
          format: int64
        checkInLocationName:
          type: string
          nullable: true
        registrationStartDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        registrationExpiryDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        checkInDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
      additionalProperties: { }
    PatientCheckInLocation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
      additionalProperties: { }
    PatientCheckInLocationMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PatientCheckInLocation'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    PatientCheckInMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PatientCheckIn'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    PatientMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Patient'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    PatientRegistrationLocation:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
      additionalProperties: { }
    PatientRegistrationLocationMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PatientRegistrationLocation'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    PatientStatus:
      type: object
      properties:
        patientLicenseNumber:
          type: string
          nullable: true
        active:
          type: boolean
        flowerOuncesAvailable:
          type: number
          format: double
        thcOuncesAvailable:
          type: number
          format: double
        purchaseAmountDays:
          type: number
          format: double
      additionalProperties: { }
    PatientStatusMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PatientStatus'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    Photo:
      type: object
      properties:
        fileContents:
          type: string
          nullable: true
        contentType:
          type: string
          nullable: true
        fileDownloadName:
          type: string
          nullable: true
      additionalProperties: { }
    Plant:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        label:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        growthPhase:
          type: string
          nullable: true
        plantBatchId:
          type: integer
          format: int32
          nullable: true
        plantBatchName:
          type: string
          nullable: true
        plantBatchTypeId:
          type: integer
          format: int32
          nullable: true
        plantBatchTypeName:
          type: string
          nullable: true
        strainId:
          type: integer
          format: int32
          nullable: true
        strainName:
          type: string
          nullable: true
        locationId:
          type: integer
          format: int32
          nullable: true
        locationName:
          type: string
          nullable: true
        locationTypeName:
          type: string
          nullable: true
        roomId:
          type: integer
          format: int32
          nullable: true
        roomName:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        harvestId:
          type: integer
          format: int32
          nullable: true
        harvestedUnitOfWeightName:
          type: string
          nullable: true
        harvestedUnitOfWeightAbbreviation:
          type: string
          nullable: true
        harvestedWetWeight:
          type: number
          format: double
          nullable: true
        harvestCount:
          type: integer
          format: int32
          nullable: true
        isOnHold:
          type: boolean
        plantedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        vegetativeDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        floweringDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        harvestedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        destroyedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        destroyedNote:
          type: string
          nullable: true
        destroyedByUserName:
          type: string
          nullable: true
        lastModified:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
        groupTagTypeMax:
          type: integer
          format: int32
          nullable: true
        isOnTrip:
          type: boolean
          nullable: true
      additionalProperties: { }
    PlantAdditive:
      type: object
      properties:
        additiveTypeName:
          type: string
          nullable: true
        productTradeName:
          type: string
          nullable: true
        epaRegistrationNumber:
          type: string
          nullable: true
        productSupplier:
          type: string
          nullable: true
        applicationDevice:
          type: string
          nullable: true
        amountUnitOfMeasure:
          type: string
          nullable: true
        totalAmountApplied:
          type: number
          format: double
          nullable: true
        plantBatchId:
          type: integer
          format: int32
          nullable: true
        plantBatchName:
          type: string
          nullable: true
        plantCount:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    PlantAdditiveMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PlantAdditive'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    PlantBatch:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
        plantBatchTypeId:
          type: integer
          format: int32
          nullable: true
        plantBatchTypeName:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
        locationId:
          type: integer
          format: int32
          nullable: true
        locationName:
          type: string
          nullable: true
        locationTypeName:
          type: string
          nullable: true
        roomId:
          type: integer
          format: int32
          nullable: true
        roomName:
          type: string
          nullable: true
        strainId:
          type: integer
          format: int32
          nullable: true
        strainName:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        count:
          type: integer
          format: int32
          nullable: true
        untrackedCount:
          type: integer
          format: int32
          nullable: true
        trackedCount:
          type: integer
          format: int32
          nullable: true
        liveCount:
          type: integer
          format: int32
          nullable: true
        packagedCount:
          type: integer
          format: int32
          nullable: true
        harvestedCount:
          type: integer
          format: int32
          nullable: true
        destroyedCount:
          type: integer
          format: int32
          nullable: true
        sourcePackageId:
          type: integer
          format: int32
          nullable: true
        sourcePackageLabel:
          type: string
          nullable: true
        sourcePlantId:
          type: integer
          format: int32
          nullable: true
        sourcePlantLabel:
          type: string
          nullable: true
        sourcePlantBatchId:
          type: integer
          format: int32
          nullable: true
        sourcePlantBatchName:
          type: string
          nullable: true
        sourcePlantBatchIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        sourcePlantBatchNames:
          type: string
          nullable: true
        multiPlantBatch:
          type: boolean
          nullable: true
        plantedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        lastModified:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
        isOnTrip:
          type: boolean
          nullable: true
        isOnHold:
          type: boolean
          nullable: true
      additionalProperties: { }
    PlantBatchMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PlantBatch'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    PlantBatchWasteReason:
      type: object
      properties:
        name:
          type: string
          nullable: true
        requiresNote:
          type: boolean
          nullable: true
        requiresWasteWeight:
          type: boolean
          nullable: true
        requiresImmatureWasteWeight:
          type: boolean
          nullable: true
        requiresMatureWasteWeight:
          type: boolean
          nullable: true
      additionalProperties: { }
    PlantBatchWasteReasonMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PlantBatchWasteReason'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    PlantMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Plant'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    PlantWasteMethod:
      type: object
      properties:
        name:
          type: string
          nullable: true
        forPlants:
          type: boolean
          nullable: true
        forProductDestruction:
          type: boolean
          nullable: true
        lastModified:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
      additionalProperties: { }
    PlantWasteMethodMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PlantWasteMethod'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    PlantWasteReason:
      type: object
      properties:
        name:
          type: string
          nullable: true
        requiresNote:
          type: boolean
          nullable: true
        requiresWasteWeight:
          type: boolean
          nullable: true
        requiresImmatureWasteWeight:
          type: boolean
          nullable: true
        requiresMatureWasteWeight:
          type: boolean
          nullable: true
      additionalProperties: { }
    PlantWasteReasonMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PlantWasteReason'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    Processing:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
      additionalProperties: { }
    ProcessingJobType:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        categoryName:
          type: string
          nullable: true
        processingSteps:
          type: string
          nullable: true
        attributes:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: { }
    ProcessingJobTypeMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ProcessingJobType'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    ProcessingMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Processing'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    ProcessingPackageRequest:
      type: object
      properties:
        label:
          type: string
          nullable: true
        quantity:
          type: number
          format: double
        unitOfMeasure:
          type: string
          nullable: true
      additionalProperties: { }
    ReleaseLabTestResultsRequest:
      type: object
      properties:
        packageLabel:
          type: string
          nullable: true
      additionalProperties: { }
    RemediatePackageRequest:
      type: object
      properties:
        packageLabel:
          type: string
          nullable: true
        remediationMethodName:
          type: string
          nullable: true
        remediationDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        remediationSteps:
          type: string
          nullable: true
      additionalProperties: { }
    RemoveWasteRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        wasteType:
          type: string
          nullable: true
        unitOfWeight:
          type: string
          nullable: true
        wasteWeight:
          type: number
          format: double
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    RenameHarvestRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        oldName:
          type: string
          nullable: true
        newName:
          type: string
          nullable: true
      additionalProperties: { }
    RequiredLabTestBatch:
      type: object
      properties:
        packageId:
          type: integer
          format: int64
        labTestBatchId:
          type: integer
          format: int64
        labTestBatchName:
          type: string
          nullable: true
      additionalProperties: { }
    RequiredLabTestBatchMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/RequiredLabTestBatch'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    RestoreHarvestedPlantsRequest:
      type: object
      properties:
        harvestId:
          type: integer
          format: int64
        plantTags:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: { }
    Retailer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        retailerDeliveryNumber:
          type: string
          nullable: true
        facilityLicenseNumber:
          type: string
          nullable: true
        facilityName:
          type: string
          nullable: true
        dateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        driverEmployeeId:
          type: string
          nullable: true
        driverName:
          type: string
          nullable: true
        driversLicenseNumber:
          type: string
          nullable: true
        vehicleMake:
          type: string
          nullable: true
        vehicleModel:
          type: string
          nullable: true
        vehicleLicensePlateNumber:
          type: string
          nullable: true
        vehicleInfo:
          type: string
          nullable: true
        direction:
          type: string
          nullable: true
        estimatedDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        actualDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        restockDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        totalPackages:
          type: integer
          format: int32
          nullable: true
        totalPrice:
          type: number
          format: double
          nullable: true
        totalPriceSold:
          type: number
          format: double
          nullable: true
        acceptedDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        destinations:
          type: array
          items: { }
          nullable: true
        completedDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        retailerDeliveryState:
          type: string
          nullable: true
        allowFullEdit:
          type: boolean
          nullable: true
        leg:
          type: integer
          format: int32
          nullable: true
        voidedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        recordedDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        recordedByUserName:
          type: string
          nullable: true
        lastModified:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        packages:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SalesDeliveryPackage'
          nullable: true
      additionalProperties: { }
    RetailerMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Retailer'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    ReturnedPackage:
      type: object
      properties:
        label:
          type: string
          nullable: true
        returnQuantityVerified:
          type: number
          format: double
        returnUnitOfMeasure:
          type: string
          nullable: true
        returnReason:
          type: string
          nullable: true
        returnReasonNote:
          type: string
          nullable: true
      additionalProperties: { }
    SaleDelivery:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        deliveryNumber:
          type: string
          nullable: true
        facilityLicenseNumber:
          type: string
          nullable: true
        facilityName:
          type: string
          nullable: true
        transporterFacilityId:
          type: string
          nullable: true
        transporterFacilityLicenseNumber:
          type: string
          nullable: true
        transporterFacilityName:
          type: string
          nullable: true
        salesDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        salesCustomerType:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        consumerId:
          type: string
          nullable: true
        driverEmployeeId:
          type: string
          nullable: true
        driverName:
          type: string
          nullable: true
        driversLicenseNumber:
          type: string
          nullable: true
        vehicleMake:
          type: string
          nullable: true
        vehicleModel:
          type: string
          nullable: true
        vehicleLicensePlateNumber:
          type: string
          nullable: true
        recipientName:
          type: string
          nullable: true
        plannedRoute:
          type: string
          nullable: true
        direction:
          type: string
          nullable: true
        estimatedDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        actualDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        estimatedArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        actualArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        estimatedReturnDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        actualReturnDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        estimatedReturnArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        actualReturnArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        totalPackages:
          type: integer
          format: int32
          nullable: true
        totalPrice:
          type: number
          format: double
        acceptedDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        transactions:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SaleTransaction'
          nullable: true
        completedDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        salesDeliveryState:
          type: string
          nullable: true
        voidedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        recordedDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        recordedByUserName:
          type: string
          nullable: true
        lastModified:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
      additionalProperties: { }
    SaleDeliveryMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SaleDelivery'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    SaleReceipt:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        receiptNumber:
          type: string
          nullable: true
        salesDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
        salesCustomerType:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        caregiverLicenseNumber:
          type: string
          nullable: true
        identificationMethod:
          type: string
          nullable: true
        totalPackages:
          type: integer
          format: int32
        totalPrice:
          type: number
          format: double
        transactions:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SaleReceiptTransaction'
          nullable: true
        isFinal:
          type: boolean
        archivedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        recordedDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
        recordedByUserName:
          type: string
          nullable: true
        lastModified:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
      additionalProperties: { }
    SaleReceiptMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SaleReceipt'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    SaleReceiptTransaction:
      type: object
      properties:
        packageLabel:
          type: string
          nullable: true
        quantity:
          type: number
          format: double
        unitOfMeasure:
          type: string
          nullable: true
        totalAmount:
          type: number
          format: double
      additionalProperties: { }
    SaleTransaction:
      type: object
      properties:
        packageId:
          type: integer
          format: int64
        packageLabel:
          type: string
          nullable: true
        productName:
          type: string
          nullable: true
        productCategoryName:
          type: string
          nullable: true
        itemStrainName:
          type: string
          nullable: true
        itemUnitCbdPercent:
          type: number
          format: double
          nullable: true
        itemUnitCbdContent:
          type: number
          format: double
          nullable: true
        itemUnitCbdContentUnitOfMeasureName:
          type: string
          nullable: true
        itemUnitCbdContentDose:
          type: number
          format: double
          nullable: true
        itemUnitCbdContentDoseUnitOfMeasureName:
          type: string
          nullable: true
        itemUnitThcPercent:
          type: number
          format: double
          nullable: true
        itemUnitThcContent:
          type: number
          format: double
          nullable: true
        itemUnitThcContentUnitOfMeasureName:
          type: string
          nullable: true
        itemUnitThcContentDose:
          type: number
          format: double
          nullable: true
        itemUnitThcContentDoseUnitOfMeasureName:
          type: string
          nullable: true
        itemUnitVolume:
          type: number
          format: double
          nullable: true
        itemUnitVolumeUnitOfMeasureName:
          type: string
          nullable: true
        itemUnitWeight:
          type: number
          format: double
          nullable: true
        itemUnitWeightUnitOfMeasureName:
          type: string
          nullable: true
        itemServingSize:
          type: string
          nullable: true
        itemSupplyDurationDays:
          type: integer
          format: int32
          nullable: true
        itemUnitQuantity:
          type: number
          format: double
          nullable: true
        itemUnitQuantityUnitOfMeasureName:
          type: string
          nullable: true
        quantitySold:
          type: number
          format: double
        unitOfMeasureName:
          type: string
          nullable: true
        unitOfMeasureAbbreviation:
          type: string
          nullable: true
        totalPrice:
          type: number
          format: double
        salesDeliveryState:
          type: string
          nullable: true
        archivedDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        recordedDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        recordedByUserName:
          type: string
          nullable: true
        lastModified:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
      additionalProperties: { }
    SalesDeliveryDestination:
      type: object
      properties:
        id:
          type: integer
          format: int64
        salesDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        salesCustomerType:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        consumerId:
          type: string
          nullable: true
        driverEmployeeId:
          type: string
          nullable: true
        driverName:
          type: string
          nullable: true
        driversLicenseNumber:
          type: string
          nullable: true
        phoneNumberForQuestions:
          type: string
          nullable: true
        vehicleMake:
          type: string
          nullable: true
        vehicleModel:
          type: string
          nullable: true
        vehicleLicensePlateNumber:
          type: string
          nullable: true
        recipientName:
          type: string
          nullable: true
        recipientAddressStreet1:
          type: string
          nullable: true
        recipientAddressStreet2:
          type: string
          nullable: true
        recipientAddressCity:
          type: string
          nullable: true
        recipientAddressCounty:
          type: string
          nullable: true
        recipientAddressState:
          type: string
          nullable: true
        recipientAddressPostalCode:
          type: string
          nullable: true
        plannedRoute:
          type: string
          nullable: true
        estimatedDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        estimatedArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        transactions:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SalesDeliveryTransaction'
          nullable: true
      additionalProperties: { }
    SalesDeliveryPackage:
      type: object
      properties:
        dateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        packageLabel:
          type: string
          nullable: true
        quantity:
          type: number
          format: double
          nullable: true
        unitOfMeasure:
          type: string
          nullable: true
        totalPrice:
          type: number
          format: double
          nullable: true
      additionalProperties: { }
    SalesDeliveryPackageEnd:
      type: object
      properties:
        label:
          type: string
          nullable: true
        endQuantity:
          type: number
          format: double
          nullable: true
        endUnitOfMeasure:
          type: string
          nullable: true
      additionalProperties: { }
    SalesDeliveryTransaction:
      type: object
      properties:
        packageLabel:
          type: string
          nullable: true
        quantity:
          type: number
          format: double
          nullable: true
        unitOfMeasure:
          type: string
          nullable: true
        totalAmount:
          type: number
          format: double
          nullable: true
        unitThcPercent:
          type: string
          nullable: true
        unitThcContent:
          type: string
          nullable: true
        unitThcContentUnitOfMeasure:
          type: string
          nullable: true
        unitWeight:
          type: string
          nullable: true
        unitWeightUnitOfMeasure:
          type: string
          nullable: true
        invoiceNumber:
          type: string
          nullable: true
        price:
          type: number
          format: double
          nullable: true
        exciseTax:
          type: number
          format: double
          nullable: true
        cityTax:
          type: number
          format: double
          nullable: true
        countyTax:
          type: number
          format: double
          nullable: true
        municipalTax:
          type: number
          format: double
          nullable: true
        discountAmount:
          type: number
          format: double
          nullable: true
        subTotal:
          type: number
          format: double
          nullable: true
        salesTax:
          type: number
          format: double
          nullable: true
      additionalProperties: { }
    SplitPlantBatchRequest:
      type: object
      properties:
        plantBatch:
          type: string
          nullable: true
        groupName:
          type: string
          nullable: true
        count:
          type: integer
          format: int32
        location:
          type: string
          nullable: true
        strain:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    SplitPlantRequest:
      type: object
      properties:
        splitDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        sourcePlantLabel:
          type: string
          nullable: true
        plantCount:
          type: integer
          format: int32
        tagLabel:
          type: string
          nullable: true
        strainLabel:
          type: string
          nullable: true
      additionalProperties: { }
    StartProcessingRequest:
      type: object
      properties:
        jobName:
          type: string
          nullable: true
        jobType:
          type: string
          nullable: true
        countUnitOfMeasure:
          type: string
          nullable: true
        volumeUnitOfMeasure:
          type: string
          nullable: true
        weightUnitOfMeasure:
          type: string
          nullable: true
        packages:
          type: array
          items:
            $ref: '#/components/schemas/ProcessingPackageRequest'
          nullable: true
        startDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    Strain:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
        testingStatus:
          type: string
          nullable: true
        thcLevel:
          type: number
          format: double
          nullable: true
        cbdLevel:
          type: number
          format: double
          nullable: true
        indicaPercentage:
          type: number
          format: double
        sativaPercentage:
          type: number
          format: double
        isUsed:
          type: boolean
        genetics:
          type: string
          nullable: true
      additionalProperties: { }
    StrainMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Strain'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    StringMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            type: string
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        tagTypeName:
          type: string
          nullable: true
        groupTagTypeId:
          type: integer
          format: int64
          nullable: true
        groupTagTypeName:
          type: string
          nullable: true
        maxGroupSize:
          type: integer
          format: int32
          nullable: true
        facilityId:
          type: integer
          format: int64
          nullable: true
        label:
          type: string
          nullable: true
      additionalProperties: { }
    TagPlantBatchRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        group:
          type: string
          nullable: true
        tagId:
          type: integer
          format: int64
          nullable: true
        newTag:
          type: string
          nullable: true
        replaceDate:
          type: string
          nullable: true
      additionalProperties: { }
    TagPlantRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        label:
          type: string
          nullable: true
        tagId:
          type: integer
          format: int64
          nullable: true
        newTag:
          type: string
          nullable: true
        replaceDate:
          type: string
          nullable: true
      additionalProperties: { }
    Transfer:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        manifestNumber:
          type: string
          nullable: true
        shipmentLicenseType:
          type: string
          nullable: true
        shipperFacilityLicenseNumber:
          type: string
          nullable: true
        shipperFacilityName:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        transporterFacilityLicenseNumber:
          type: string
          nullable: true
        transporterFacilityName:
          type: string
          nullable: true
        driverName:
          type: string
          nullable: true
        driverOccupationalLicenseNumber:
          type: string
          nullable: true
        driverVehicleLicenseNumber:
          type: string
          nullable: true
        vehicleMake:
          type: string
          nullable: true
        vehicleModel:
          type: string
          nullable: true
        vehicleLicensePlateNumber:
          type: string
          nullable: true
        deliveryCount:
          type: integer
          format: int32
          nullable: true
        receivedDeliveryCount:
          type: integer
          format: int32
          nullable: true
        packageCount:
          type: integer
          format: int32
          nullable: true
        receivedPackageCount:
          type: integer
          format: int32
          nullable: true
        containsPlantPackage:
          type: boolean
          nullable: true
        containsProductPackage:
          type: boolean
          nullable: true
        containsTradeSample:
          type: boolean
          nullable: true
        containsDonation:
          type: boolean
          nullable: true
        containsTestingSample:
          type: boolean
          nullable: true
        containsProductRequiresRemediation:
          type: boolean
          nullable: true
        containsRemediatedProductPackage:
          type: boolean
          nullable: true
        createdDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
        createdByUserName:
          type: string
          nullable: true
        lastModified:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
        deliveryId:
          type: integer
          format: int32
          nullable: true
        recipientFacilityLicenseNumber:
          type: string
          nullable: true
        recipientFacilityName:
          type: string
          nullable: true
        shipmentTypeName:
          type: string
          nullable: true
        shipmentTransactionType:
          type: string
          nullable: true
        estimatedDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        actualDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        estimatedArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        actualArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        deliveryPackageCount:
          type: integer
          format: int32
        deliveryReceivedPackageCount:
          type: integer
          format: int32
        receivedDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        estimatedReturnDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        actualReturnDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        estimatedReturnArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        actualReturnArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
      additionalProperties: { }
    TransferDelivery:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        recipientFacilityLicenseNumber:
          type: string
          nullable: true
        recipientFacilityName:
          type: string
          nullable: true
        shipmentTypeName:
          type: string
          nullable: true
        shipmentTransactionType:
          type: string
          nullable: true
        estimatedDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        actualDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        estimatedArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        actualArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        grossWeight:
          type: number
          format: double
          nullable: true
        grossUnitOfWeightId:
          type: string
          nullable: true
        grossUnitOfWeightName:
          type: string
          nullable: true
        plannedRoute:
          type: string
          nullable: true
        deliveryPackageCount:
          type: integer
          format: int32
        deliveryReceivedPackageCount:
          type: integer
          format: int32
        receivedDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        estimatedReturnDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        actualReturnDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        estimatedReturnArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        actualReturnArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
          nullable: true
        rejectedPackagesReturned:
          type: boolean
          nullable: true
      additionalProperties: { }
    TransferDeliveryMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TransferDelivery'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    TransferDeliveryPackage:
      type: object
      properties:
        packageId:
          type: integer
          format: int32
          nullable: true
        packageLabel:
          type: string
          nullable: true
        packageType:
          type: string
          nullable: true
        sourceHarvestNames:
          type: string
          nullable: true
        sourcePackageLabels:
          type: string
          nullable: true
        productName:
          type: string
          nullable: true
        productCategoryName:
          type: string
          nullable: true
        itemId:
          type: string
          nullable: true
        itemName:
          type: string
          nullable: true
        itemCategoryName:
          type: string
          nullable: true
        itemStrainName:
          type: string
          nullable: true
        itemUnitCbdPercent:
          type: number
          format: double
          nullable: true
        itemUnitCbdContent:
          type: number
          format: double
          nullable: true
        itemUnitCbdContentUnitOfMeasureName:
          type: string
          nullable: true
        itemUnitCbdContentDose:
          type: number
          format: double
          nullable: true
        itemUnitCbdContentDoseUnitOfMeasureName:
          type: string
          nullable: true
        itemUnitThcPercent:
          type: number
          format: double
          nullable: true
        itemUnitThcContent:
          type: number
          format: double
          nullable: true
        itemUnitThcContentUnitOfMeasureName:
          type: string
          nullable: true
        itemUnitThcContentDose:
          type: number
          format: double
          nullable: true
        itemUnitThcContentDoseUnitOfMeasureName:
          type: string
          nullable: true
        itemUnitVolume:
          type: number
          format: double
          nullable: true
        itemUnitVolumeUnitOfMeasureName:
          type: string
          nullable: true
        itemUnitWeight:
          type: number
          format: double
          nullable: true
        itemUnitWeightUnitOfMeasureName:
          type: string
          nullable: true
        itemServingSize:
          type: string
          nullable: true
        itemSupplyDurationDays:
          type: integer
          format: int32
          nullable: true
        itemUnitQuantity:
          type: number
          format: double
          nullable: true
        itemUnitQuantityUnitOfMeasureName:
          type: string
          nullable: true
        labTestingState:
          type: string
          nullable: true
        productionBatchNumber:
          type: string
          nullable: true
        isTradeSample:
          type: boolean
        isTradeSamplePersistent:
          type: boolean
        isDonation:
          type: boolean
        sourcePackageIsDonation:
          type: boolean
        sourcePackageIsTradeSample:
          type: boolean
        isTestingSample:
          type: boolean
        productRequiresRemediation:
          type: boolean
        containsRemediatedProduct:
          type: boolean
        remediationDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        shipmentPackageState:
          type: string
          nullable: true
        shippedQuantity:
          type: number
          format: double
        shippedUnitOfMeasureName:
          type: string
          nullable: true
        grossUnitOfWeightName:
          type: string
          nullable: true
        receivedQuantity:
          type: number
          format: double
          nullable: true
        receivedUnitOfMeasureName:
          type: string
          nullable: true
      additionalProperties: { }
    TransferDeliveryPackageMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TransferDeliveryPackage'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    TransferDeliveryPackageWholesale:
      type: object
      properties:
        packageId:
          type: integer
          format: int32
          nullable: true
        packageLabel:
          type: string
          nullable: true
        shipperWholesalePrice:
          type: number
          format: double
          nullable: true
        receiverWholesalePrice:
          type: number
          format: double
          nullable: true
      additionalProperties: { }
    TransferDeliveryPackageWholesaleMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TransferDeliveryPackageWholesale'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    TransferDeliveryTransporter:
      type: object
      properties:
        transporterFacilityLicenseNumber:
          type: string
          nullable: true
        transporterFacilityName:
          type: string
          nullable: true
        transporterDirection:
          type: string
          nullable: true
      additionalProperties: { }
    TransferDeliveryTransporterDetail:
      type: object
      properties:
        driverName:
          type: string
          nullable: true
        driverOccupationalLicenseNumber:
          type: string
          nullable: true
        driverVehicleLicenseNumber:
          type: string
          nullable: true
        vehicleMake:
          type: string
          nullable: true
        vehicleModel:
          type: string
          nullable: true
        vehicleLicensePlateNumber:
          type: string
          nullable: true
        actualDriverStartDateTime:
          type: string
          nullable: true
      additionalProperties: { }
    TransferDeliveryTransporterDetailMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TransferDeliveryTransporterDetail'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    TransferDeliveryTransporterMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TransferDeliveryTransporter'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    TransferMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Transfer'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    TransferType:
      required:
        - name
      type: object
      properties:
        name:
          minLength: 1
          type: string
        forLicensedShipments:
          type: boolean
        forExternalIncomingShipments:
          type: boolean
        forExternalOutgoingShipments:
          type: boolean
        requiresDestinationGrossWeight:
          type: boolean
        requiresPackagesGrossWeight:
          type: boolean
        transactionType:
          type: string
          nullable: true
      additionalProperties: { }
    TransferTypeMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TransferType'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    UnfinishHarvestRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
      additionalProperties: { }
    UnfinishPackageRequest:
      type: object
      properties:
        label:
          type: string
          nullable: true
      additionalProperties: { }
    UnfinishProcessingRequest:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
      additionalProperties: { }
    UnitOfMeasure:
      required:
        - name
      type: object
      properties:
        name:
          minLength: 1
          type: string
        quantityType:
          type: string
          nullable: true
        abbreviation:
          type: string
          nullable: true
      additionalProperties: { }
    UnitOfMeasureMetrcWrapper:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/UnitOfMeasure'
          nullable: true
        total:
          type: integer
          format: int32
          nullable: true
        totalRecords:
          type: integer
          format: int32
          nullable: true
        pageSize:
          type: integer
          format: int32
          nullable: true
        recordsOnPage:
          type: integer
          format: int32
          nullable: true
        page:
          type: integer
          format: int32
          nullable: true
        currentPage:
          type: integer
          format: int32
          nullable: true
        totalPages:
          type: integer
          format: int32
          nullable: true
      additionalProperties: { }
    UpdateBrandRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
      additionalProperties: { }
    UpdateExternalDestination:
      type: object
      properties:
        recipientLicenseNumber:
          type: string
          nullable: true
        transferTypeName:
          type: string
          nullable: true
        plannedRoute:
          type: string
          nullable: true
        estimatedDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
        estimatedArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
        grossWeight:
          type: number
          format: double
          nullable: true
        grossUnitOfWeightId:
          type: string
          nullable: true
        transporters:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/UpdateExternalTransporter'
          nullable: true
        packages:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Package'
          nullable: true
      additionalProperties: { }
    UpdateExternalTransporter:
      type: object
      properties:
        transporterFacilityLicenseNumber:
          type: string
          nullable: true
        driverOccupationalLicenseNumber:
          type: string
          nullable: true
        driverName:
          type: string
          nullable: true
        driverLicenseNumber:
          type: string
          nullable: true
        phoneNumberForQuestions:
          type: string
          nullable: true
        vehicleMake:
          type: string
          nullable: true
        vehicleModel:
          type: string
          nullable: true
        vehicleLicensePlateNumber:
          type: string
          nullable: true
        isLayover:
          type: boolean
        estimatedDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
        estimatedArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z'
          type: string
          description: The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
          format: date-time
        transporterDetails:
          oneOf:
            - $ref: '#/components/schemas/TransferDeliveryTransporterDetail'
          nullable: true
      additionalProperties: { }
    UpdateLabTestDocumentRequest:
      type: object
      properties:
        labTestResultId:
          type: integer
          format: int64
        documentFileName:
          type: string
          nullable: true
        documentFileBase64:
          type: string
          nullable: true
      additionalProperties: { }
    UpdateLocationRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
        locationTypeName:
          type: string
          nullable: true
      additionalProperties: { }
    UpdatePatientCheckIn:
      type: object
      properties:
        id:
          type: integer
          format: int64
        patientLicenseNumber:
          type: string
          nullable: true
        checkInLocationId:
          type: integer
          format: int64
          nullable: true
        registrationStartDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        registrationExpiryDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        checkInDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
      additionalProperties: { }
    UpdatePatientRequest:
      type: object
      properties:
        licenseNumber:
          type: string
          nullable: true
        newLicenseNumber:
          type: string
          nullable: true
        licenseEffectiveStartDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        licenseEffectiveEndDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        recommendedPlants:
          type: integer
          format: int32
        recommendedSmokableQuantity:
          type: number
          format: double
        hasSalesLimitExemption:
          type: boolean
        actualDate:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    UpdatePlantBatchStrainRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        name:
          type: string
          nullable: true
        strainId:
          type: integer
          format: int64
          nullable: true
        strainName:
          type: string
          nullable: true
      additionalProperties: { }
    UpdatePlantStrainRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        label:
          type: string
          nullable: true
        strainId:
          type: integer
          format: int64
          nullable: true
        strainName:
          type: string
          nullable: true
      additionalProperties: { }
    UpdateSaleDeliveryCompleteRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        actualArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        acceptedPackages:
          type: array
          items:
            type: string
          nullable: true
        returnedPackages:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ReturnedPackage'
          nullable: true
      additionalProperties: { }
    UpdateSaleDeliveryHubRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        transporterFacilityId:
          type: string
          nullable: true
        driverEmployeeId:
          type: string
          nullable: true
        driverName:
          type: string
          nullable: true
        driversLicenseNumber:
          type: string
          nullable: true
        phoneNumberForQuestions:
          type: string
          nullable: true
        vehicleMake:
          type: string
          nullable: true
        vehicleModel:
          type: string
          nullable: true
        vehicleLicensePlateNumber:
          type: string
          nullable: true
        plannedRoute:
          type: string
          nullable: true
        estimatedDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        estimatedArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
      additionalProperties: { }
    UpdateSaleDeliveryRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        salesDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        salesCustomerType:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        consumerId:
          type: string
          nullable: true
        driverEmployeeId:
          type: string
          nullable: true
        driverName:
          type: string
          nullable: true
        driversLicenseNumber:
          type: string
          nullable: true
        phoneNumberForQuestions:
          type: string
          nullable: true
        vehicleMake:
          type: string
          nullable: true
        vehicleModel:
          type: string
          nullable: true
        vehicleLicensePlateNumber:
          type: string
          nullable: true
        recipientName:
          type: string
          nullable: true
        recipientAddressStreet1:
          type: string
          nullable: true
        recipientAddressStreet2:
          type: string
          nullable: true
        recipientAddressCity:
          type: string
          nullable: true
        recipientAddressCounty:
          type: string
          nullable: true
        recipientAddressState:
          type: string
          nullable: true
        recipientAddressPostalCode:
          type: string
          nullable: true
        plannedRoute:
          type: string
          nullable: true
        estimatedDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        estimatedArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        transactions:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SaleTransaction'
          nullable: true
      additionalProperties: { }
    UpdateSaleReceiptRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        salesDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        salesCustomerType:
          type: string
          nullable: true
        patientLicenseNumber:
          type: string
          nullable: true
        caregiverLicenseNumber:
          type: string
          nullable: true
        identificationMethod:
          type: string
          nullable: true
        transactions:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SaleReceiptTransaction'
          nullable: true
      additionalProperties: { }
    UpdateSalesDeliveryRetailerDepartRequest:
      type: object
      properties:
        retailerDeliveryId:
          type: integer
          format: int64
      additionalProperties: { }
    UpdateSalesDeliveryRetailerEndRequest:
      type: object
      properties:
        retailerDeliveryId:
          type: integer
          format: int64
        actualArrivalDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        packages:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SalesDeliveryPackageEnd'
          nullable: true
      additionalProperties: { }
    UpdateSalesDeliveryRetailerRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        dateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        driverEmployeeId:
          type: string
          nullable: true
        driverName:
          type: string
          nullable: true
        driversLicenseNumber:
          type: string
          nullable: true
        phoneNumberForQuestions:
          type: string
          nullable: true
        vehicleMake:
          type: string
          nullable: true
        vehicleModel:
          type: string
          nullable: true
        vehicleLicensePlateNumber:
          type: string
          nullable: true
        estimatedDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        destinations:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SalesDeliveryDestination'
          nullable: true
        packages:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SalesDeliveryPackage'
          nullable: true
      additionalProperties: { }
    UpdateSalesDeliveryRetailerRestockRequest:
      type: object
      properties:
        retailerDeliveryId:
          type: integer
          format: int64
        dateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
        estimatedDepartureDateTime:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
        destinations:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SalesDeliveryDestination'
          nullable: true
        packages:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SalesDeliveryPackage'
          nullable: true
      additionalProperties: { }
    UpdateStrainRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
        testingStatus:
          type: string
          nullable: true
        thcLevel:
          type: number
          format: double
        cbdLevel:
          type: number
          format: double
        indicaPercentage:
          type: number
          format: double
        sativaPercentage:
          type: number
          format: double
      additionalProperties: { }
    UpdateTransferRequest:
      type: object
      properties:
        transferId:
          type: integer
          format: int64
        shipperLicenseNumber:
          type: string
          nullable: true
        shipperName:
          type: string
          nullable: true
        shipperMainPhoneNumber:
          type: string
          nullable: true
        shipperAddress1:
          type: string
          nullable: true
        shipperAddress2:
          type: string
          nullable: true
        shipperAddressCity:
          type: string
          nullable: true
        shipperAddressState:
          type: string
          nullable: true
        shipperAddressPostalCode:
          type: string
          nullable: true
        transporterFacilityLicenseNumber:
          type: string
          nullable: true
        driverOccupationalLicenseNumber:
          type: string
          nullable: true
        driverName:
          type: string
          nullable: true
        driverLicenseNumber:
          type: string
          nullable: true
        phoneNumberForQuestions:
          type: string
          nullable: true
        vehicleMake:
          type: string
          nullable: true
        vehicleModel:
          type: string
          nullable: true
        vehicleLicensePlateNumber:
          type: string
          nullable: true
        destinations:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/UpdateExternalDestination'
          nullable: true
      additionalProperties: { }
    VerifyIdSaleDeliveryHubRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        paymentType:
          type: string
          nullable: true
      additionalProperties: { }
    WasteMethod:
      type: object
      properties:
        name:
          type: string
          nullable: true
        forPlants:
          type: boolean
          nullable: true
        forProductDestruction:
          type: boolean
          nullable: true
        lastModified:
          pattern: '([0-9]{4})-(?:[0-9]{2})-([0-9]{2})'
          type: string
          format: date
          nullable: true
      additionalProperties: { }
  securitySchemes:
    basic:
      type: http
      description: Username = software_api_key = Software vendor's API key</br>Password = user_api_key = User's API key
      scheme: basic
security:
  - basic: [ ]