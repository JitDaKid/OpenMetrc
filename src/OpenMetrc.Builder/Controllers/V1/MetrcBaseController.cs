//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace OpenMetrc.Builder.Controllers.V1
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class CaregiversStatusControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <param name="caregiverLicenseNumber">Route parameter caregiverLicenseNumber</param>
        /// <param name="licenseNumber">The license number of the Facility under which to get the Caregiver status.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("caregivers/v1/status/{caregiverLicenseNumber}")]
        public abstract System.Threading.Tasks.Task GetCaregiverStatus(string caregiverLicenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class EmployeesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("employees/v1/")]
        public abstract System.Threading.Tasks.Task GetEmployees([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class FacilitiesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("facilities/v1/")]
        public abstract System.Threading.Tasks.Task GetFacilities();

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class HarvestsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active harvests.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v1/active")]
        public abstract System.Threading.Tasks.Task GetHarvestActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v1/{id}")]
        public abstract System.Threading.Tasks.Task GetHarvests(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive harvests.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v1/inactive")]
        public abstract System.Threading.Tasks.Task GetHarvestInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of harvests on hold.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v1/onhold")]
        public abstract System.Threading.Tasks.Task GetHarvestOnhold([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v1/waste/types")]
        public abstract System.Threading.Tasks.Task GetHarvestWasteTypes();

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("harvests/v1/create/packages")]
        public abstract System.Threading.Tasks.Task PostHarvestCreatePackages([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostHarvestCreatePackagesRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("harvests/v1/create/packages/testing")]
        public abstract System.Threading.Tasks.Task PostHarvestCreatePackageTesting([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostHarvestCreatePackageTestingRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("harvests/v1/finish")]
        public abstract System.Threading.Tasks.Task PostHarvestFinish([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostHarvestFinishRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("harvests/v1/removewaste")]
        public abstract System.Threading.Tasks.Task PostHarvestRemovewaste([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostHarvestRemovewasteRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("harvests/v1/unfinish")]
        public abstract System.Threading.Tasks.Task PostHarvestUnfinish([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostHarvestUnfinishRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("harvests/v1/move")]
        public abstract System.Threading.Tasks.Task PutHarvestMove([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutHarvestMoveRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("harvests/v1/rename")]
        public abstract System.Threading.Tasks.Task PutHarvestRename([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutHarvestRenameRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class ItemsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("items/v1/{id}")]
        public abstract System.Threading.Tasks.Task DeleteItems(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Item will be validated against the specified License Number. If not specified, the Item will be validated against all of the User's current Facilities. Please note that if the Item is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v1/{id}")]
        public abstract System.Threading.Tasks.Task GetItems(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v1/active")]
        public abstract System.Threading.Tasks.Task GetItemActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of active item brands.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v1/brands")]
        public abstract System.Threading.Tasks.Task GetItemBrands([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="licenseNumber">If specified, the Categories will be retrived for the specified License Number. If not specified, the all Item Categories will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v1/categories")]
        public abstract System.Threading.Tasks.Task GetItemCategories([Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v1/inactive")]
        public abstract System.Threading.Tasks.Task GetItemInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The file system id of the image to return.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v1/photo/{id}")]
        public abstract System.Threading.Tasks.Task GetItemPhoto(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("items/v1/create")]
        public abstract System.Threading.Tasks.Task PostItemCreate([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostItemCreateRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("items/v1/photo")]
        public abstract System.Threading.Tasks.Task PostItemPhoto([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostItemPhotoRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("items/v1/update")]
        public abstract System.Threading.Tasks.Task PostItemUpdate([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostItemUpdateRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class LabTestsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">LabTestDocumentFileId</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("labtests/v1/labtestdocument/{id}")]
        public abstract System.Threading.Tasks.Task GetLabtestLabtestdocument(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("labtests/v1/results")]
        public abstract System.Threading.Tasks.Task GetLabtestResults([Microsoft.AspNetCore.Mvc.FromQuery] string packageId, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("labtests/v1/states")]
        public abstract System.Threading.Tasks.Task GetLabtestStates();

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("labtests/v1/types")]
        public abstract System.Threading.Tasks.Task GetLabtestTypes();

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("labtests/v1/record")]
        public abstract System.Threading.Tasks.Task PostLabtestRecord([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostLabtestRecordRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("labtests/v1/labtestdocument")]
        public abstract System.Threading.Tasks.Task PutLabtestLabtestdocument([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutLabtestLabtestdocumentRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("labtests/v1/results/release")]
        public abstract System.Threading.Tasks.Task PutLabtestResultRelease([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutLabtestResultReleaseRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class LocationsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("locations/v1/{id}")]
        public abstract System.Threading.Tasks.Task DeleteLocations(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Location will be validated against the specified License Number. If not specified, the Location will be validated against all of the User's current Facilities. Please note that if the Location is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("locations/v1/{id}")]
        public abstract System.Threading.Tasks.Task GetLocations(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of active locations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("locations/v1/active")]
        public abstract System.Threading.Tasks.Task GetLocationActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of active location types.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("locations/v1/types")]
        public abstract System.Threading.Tasks.Task GetLocationTypes([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("locations/v1/create")]
        public abstract System.Threading.Tasks.Task PostLocationCreate([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostLocationCreateRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("locations/v1/update")]
        public abstract System.Threading.Tasks.Task PostLocationUpdate([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostLocationUpdateRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PackagesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active packages.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v1/active")]
        public abstract System.Threading.Tasks.Task GetPackageActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v1/adjust/reasons")]
        public abstract System.Threading.Tasks.Task GetPackageAdjustReasons([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Package will be validated against the specified License Number. If not specified, the Package will be validated against all of the User's current Facilities. Please note that if the Package is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v1/{id}")]
        public abstract System.Threading.Tasks.Task GetPackages(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive packages.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v1/inactive")]
        public abstract System.Threading.Tasks.Task GetPackageInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <param name="label">Route parameter label</param>
        /// <param name="licenseNumber">If specified, the Package will be validated against the specified License Number. If not specified, the Package will be validated against all of the User's current Facilities. Please note that if the Package is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v1/{label}")]
        public abstract System.Threading.Tasks.Task GetPackages2(string label, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of packages on hold.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v1/onhold")]
        public abstract System.Threading.Tasks.Task GetPackageOnhold([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v1/types")]
        public abstract System.Threading.Tasks.Task GetPackageTypes();

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v1/adjust")]
        public abstract System.Threading.Tasks.Task PostPackageAdjust([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPackageAdjustRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v1/change/item")]
        public abstract System.Threading.Tasks.Task PostPackageChangeItem([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPackageChangeItemRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v1/change/locations")]
        public abstract System.Threading.Tasks.Task PostPackageChangeLocations([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPackageChangeLocationsRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v1/create")]
        public abstract System.Threading.Tasks.Task PostPackageCreate([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPackageCreateRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v1/create/plantings")]
        public abstract System.Threading.Tasks.Task PostPackageCreatePlantings([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPackageCreatePlantingsRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v1/create/testing")]
        public abstract System.Threading.Tasks.Task PostPackageCreateTesting([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPackageCreateTestingRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v1/finish")]
        public abstract System.Threading.Tasks.Task PostPackageFinish([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPackageFinishRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v1/remediate")]
        public abstract System.Threading.Tasks.Task PostPackageRemediate([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPackageRemediateRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v1/unfinish")]
        public abstract System.Threading.Tasks.Task PostPackageUnfinish([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPackageUnfinishRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v1/change/note")]
        public abstract System.Threading.Tasks.Task PutPackageChangeNote([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutPackageChangeNoteRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PatientCheckInsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("patient-checkins/v1/{id}")]
        public abstract System.Threading.Tasks.Task DeletePatientCheckins(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("patient-checkins/v1/")]
        public abstract System.Threading.Tasks.Task GetPatientCheckins([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? checkinDateStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? checkinDateEnd = null);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("patient-checkins/v1/")]
        public abstract System.Threading.Tasks.Task PostPatientCheckins([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPatientCheckinsRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("patient-checkins/v1/")]
        public abstract System.Threading.Tasks.Task PutPatientCheckins([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutPatientCheckinsRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("patient-checkins/v1/locations")]
        public abstract System.Threading.Tasks.Task GetPatientCheckinsLocations();

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PatientsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("patients/v1/{id}")]
        public abstract System.Threading.Tasks.Task DeletePatients(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Patient will be validated against the specified License Number. If not specified, the Patient will be validated against all of the User's current Facilities. Please note that if the Patient is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("patients/v1/{id}")]
        public abstract System.Threading.Tasks.Task GetPatients(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of active patients.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("patients/v1/active")]
        public abstract System.Threading.Tasks.Task GetPatientActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("patients/v1/add")]
        public abstract System.Threading.Tasks.Task PostPatientAdd([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPatientAddRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("patients/v1/update")]
        public abstract System.Threading.Tasks.Task PostPatientUpdate([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPatientUpdateRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PatientsStatusControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <param name="patientLicenseNumber">Route parameter patientLicenseNumber</param>
        /// <param name="licenseNumber">The license number of the Facility under which to get the Patient Status.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("patients/v1/statuses/{patientLicenseNumber}")]
        public abstract System.Threading.Tasks.Task GetPatientStatuses(string patientLicenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PlantBatchesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/")]
        public abstract System.Threading.Tasks.Task DeletePlantbatches([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of active plant groups.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/active")]
        public abstract System.Threading.Tasks.Task GetPlantbatchActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Plant Batch will be validated against the specified License Number. If not specified, the Plant Batch will be validated against all of the User's current Facilities. Please note that if the Plant Batch is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/{id}")]
        public abstract System.Threading.Tasks.Task GetPlantbatches(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive plant groups.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/inactive")]
        public abstract System.Threading.Tasks.Task GetPlantbatchInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/types")]
        public abstract System.Threading.Tasks.Task GetPlantbatchTypes();

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/waste/reasons")]
        public abstract System.Threading.Tasks.Task GetPlantbatchWasteReasons([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="licenseNumber">The license number of the facility for which to record plant additives.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/additives")]
        public abstract System.Threading.Tasks.Task PostPlantbatchAdditives([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPlantbatchAdditivesRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/adjust")]
        public abstract System.Threading.Tasks.Task PostPlantbatchAdjust([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPlantbatchAdjustRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/changegrowthphase")]
        public abstract System.Threading.Tasks.Task PostPlantbatchChangegrowthphase([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPlantbatchChangegrowthphaseRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/createpackages")]
        public abstract System.Threading.Tasks.Task PostPlantbatchCreatepackages([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPlantbatchCreatepackagesRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? isFromMotherPlant = null);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/createplantings")]
        public abstract System.Threading.Tasks.Task PostPlantbatchCreateplantings([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPlantbatchCreateplantingsRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/create/packages/frommotherplant")]
        public abstract System.Threading.Tasks.Task PostPlantbatchCreatePackageFrommotherplant([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPlantbatchCreatePackageFrommotherplantRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/split")]
        public abstract System.Threading.Tasks.Task PostPlantbatchSplit([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPlantbatchSplitRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/waste")]
        public abstract System.Threading.Tasks.Task PostPlantbatchWaste([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPlantbatchWasteRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/moveplantbatches")]
        public abstract System.Threading.Tasks.Task PutPlantbatchMoveplantbatches([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutPlantbatchMoveplantbatchesRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PlantsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("plants/v1/")]
        public abstract System.Threading.Tasks.Task DeletePlants([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="licenseNumber">The license number of the facility for which to record plant additives.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/additives")]
        public abstract System.Threading.Tasks.Task GetPlantAdditives([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <param name="licenseNumber">The license number of the facility for which to record plant additives.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v1/additives")]
        public abstract System.Threading.Tasks.Task PostPlantAdditives([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPlantAdditivesRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/additives/types")]
        public abstract System.Threading.Tasks.Task GetPlantAdditiveTypes();

        /// <param name="licenseNumber">The license number of the facility for which to return the list of flowering plants.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/flowering")]
        public abstract System.Threading.Tasks.Task GetPlantFlowering([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of available Plant Growth Phases.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/growthphases")]
        public abstract System.Threading.Tasks.Task GetPlantGrowthphases([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Plant will be validated against the specified License Number. If not specified, the Plant will be validated against all of the User's current Facilities. Please note that if the Plant is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/{id}")]
        public abstract System.Threading.Tasks.Task GetPlants(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive plants.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/inactive")]
        public abstract System.Threading.Tasks.Task GetPlantInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <param name="label">Route parameter label</param>
        /// <param name="licenseNumber">If specified, the Plant will be validated against the specified License Number. If not specified, the Plant will be validated against all of the User's current Facilities. Please note that if the Plant is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/{label}")]
        public abstract System.Threading.Tasks.Task GetPlants2(string label, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of plants on hold.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/onhold")]
        public abstract System.Threading.Tasks.Task GetPlantOnhold([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of vegetating plants.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/vegetative")]
        public abstract System.Threading.Tasks.Task GetPlantVegetative([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/waste/methods/all")]
        public abstract System.Threading.Tasks.Task GetPlantWasteMethodAll();

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/waste/reasons")]
        public abstract System.Threading.Tasks.Task GetPlantWasteReasons([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="licenseNumber">The license number of the facility for which to record plant additives.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v1/additives/bylocation")]
        public abstract System.Threading.Tasks.Task PostPlantAdditiveBylocation([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPlantAdditiveBylocationRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v1/changegrowthphases")]
        public abstract System.Threading.Tasks.Task PostPlantChangegrowthphases([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPlantChangegrowthphasesRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v1/create/plantbatch/packages")]
        public abstract System.Threading.Tasks.Task PostPlantCreatePlantbatchPackages([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPlantCreatePlantbatchPackagesRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v1/create/plantings")]
        public abstract System.Threading.Tasks.Task PostPlantCreatePlantings([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPlantCreatePlantingsRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v1/harvestplants")]
        public abstract System.Threading.Tasks.Task PostPlantHarvestplants([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPlantHarvestplantsRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v1/manicureplants")]
        public abstract System.Threading.Tasks.Task PostPlantManicureplants([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPlantManicureplantsRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v1/moveplants")]
        public abstract System.Threading.Tasks.Task PostPlantMoveplants([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPlantMoveplantsRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v1/waste")]
        public abstract System.Threading.Tasks.Task PostPlantWaste([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostPlantWasteRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class ProcessingJobControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("processing/v1/{id}")]
        public abstract System.Threading.Tasks.Task DeleteProcessing(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v1/{id}")]
        public abstract System.Threading.Tasks.Task GetProcessing(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("processing/v1/jobtypes/{id}")]
        public abstract System.Threading.Tasks.Task DeleteProcessingJobtypes(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v1/active")]
        public abstract System.Threading.Tasks.Task GetProcessingActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v1/inactive")]
        public abstract System.Threading.Tasks.Task GetProcessingInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v1/jobtypes/active")]
        public abstract System.Threading.Tasks.Task GetProcessingJobtypeActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v1/jobtypes/attributes")]
        public abstract System.Threading.Tasks.Task GetProcessingJobtypeAttributes([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v1/jobtypes/categories")]
        public abstract System.Threading.Tasks.Task GetProcessingJobtypeCategories([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v1/jobtypes/inactive")]
        public abstract System.Threading.Tasks.Task GetProcessingJobtypeInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("processing/v1/adjust")]
        public abstract System.Threading.Tasks.Task PostProcessingAdjust([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostProcessingAdjustRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("processing/v1/createpackages")]
        public abstract System.Threading.Tasks.Task PostProcessingCreatepackages([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostProcessingCreatepackagesRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("processing/v1/jobtypes")]
        public abstract System.Threading.Tasks.Task PostProcessingJobtypes([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostProcessingJobtypesRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("processing/v1/jobtypes")]
        public abstract System.Threading.Tasks.Task PutProcessingJobtypes([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutProcessingJobtypesRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("processing/v1/start")]
        public abstract System.Threading.Tasks.Task PostProcessingStart([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostProcessingStartRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("processing/v1/finish")]
        public abstract System.Threading.Tasks.Task PutProcessingFinish([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutProcessingFinishRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("processing/v1/unfinish")]
        public abstract System.Threading.Tasks.Task PutProcessingUnfinish([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutProcessingUnfinishRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class SalesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("sales/v1/receipts/{id}")]
        public abstract System.Threading.Tasks.Task DeleteSaleReceipts(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Sales Receipt will be validated against the specified License Number. If not specified, the Sales Receipt will be validated against all of the User's current Facilities. Please note that if the Sales Receipt is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/receipts/{id}")]
        public abstract System.Threading.Tasks.Task GetSaleReceipts(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/customertypes")]
        public abstract System.Threading.Tasks.Task GetSaleCustomertypes();

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/patientregistration/locations")]
        public abstract System.Threading.Tasks.Task GetSalePatientregistrationLocations();

        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/receipts/active")]
        public abstract System.Threading.Tasks.Task GetSaleReceiptActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? salesDateStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? salesDateEnd = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/receipts/inactive")]
        public abstract System.Threading.Tasks.Task GetSaleReceiptInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? salesDateStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? salesDateEnd = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of dates with sales transactions.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/transactions")]
        public abstract System.Threading.Tasks.Task GetSaleTransactions([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="salesDateStart">Route parameter salesDateStart</param>
        /// <param name="salesDateEnd">Route parameter salesDateEnd</param>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of sales transactions for the specified date range.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/transactions/{salesDateStart}/{salesDateEnd}")]
        public abstract System.Threading.Tasks.Task GetSaleTransactions2(string salesDateStart, string salesDateEnd, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v1/receipts")]
        public abstract System.Threading.Tasks.Task PostSaleReceipts([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostSaleReceiptsRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v1/receipts")]
        public abstract System.Threading.Tasks.Task PutSaleReceipts([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutSaleReceiptsRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="date">Route parameter date</param>
        /// <param name="licenseNumber">The license number of the facility for which to append the sales transactions on the specified date.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v1/transactions/{date}")]
        public abstract System.Threading.Tasks.Task PostSaleTransactions([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostSaleTransactionsRequest request, string date, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="date">Route parameter date</param>
        /// <param name="licenseNumber">The license number of the facility for which to update the sales transactions on the specified date.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v1/transactions/{date}")]
        public abstract System.Threading.Tasks.Task PutSaleTransactions([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutSaleTransactionsRequest request, string date, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/hub/accept")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryHubAccept([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutSaleDeliveryHubAcceptRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/hub/depart")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryHubDepart([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutSaleDeliveryHubDepartRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/hub/verifyID")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryHubVerifyid([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutSaleDeliveryHubVerifyidRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/{id}")]
        public abstract System.Threading.Tasks.Task DeleteSaleDeliveries(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Sales Delivery will be validated against the specified License Number. If not specified, the Sales Delivery will be validated against all of the User's current Facilities. Please note that if the Sales Delivery is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/{id}")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveries(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/retailer/{id}")]
        public abstract System.Threading.Tasks.Task DeleteSaleDeliveryRetailer(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Sales Delivery will be validated against the specified License Number. If not specified, the Sales Delivery will be validated against all of the User's current Facilities. Please note that if the Sales Delivery is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/retailer/{id}")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryRetailer(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/counties")]
        public abstract System.Threading.Tasks.Task GetSaleCounties();

        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/active")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? salesDateStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? salesDateEnd = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/inactive")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? salesDateStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? salesDateEnd = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <param name="lastModifiedStart">The last modified start timestamp.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/retailer/active")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryRetailerActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <param name="lastModifiedStart">The last modified start timestamp.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/retailer/inactive")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryRetailerInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/returnreasons")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryReturnreasons([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/paymenttypes")]
        public abstract System.Threading.Tasks.Task GetSalePaymenttypes([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveries([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostSaleDeliveriesRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveries([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutSaleDeliveriesRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/retailer")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveryRetailer([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostSaleDeliveryRetailerRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/retailer")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryRetailer([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutSaleDeliveryRetailerRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/retailer/depart")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveryRetailerDepart([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostSaleDeliveryRetailerDepartRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/retailer/end")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveryRetailerEnd([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostSaleDeliveryRetailerEndRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/retailer/restock")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveryRetailerRestock([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostSaleDeliveryRetailerRestockRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/retailer/sale")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveryRetailerSale([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostSaleDeliveryRetailerSaleRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/complete")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryComplete([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutSaleDeliveryCompleteRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/hub")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryHub([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutSaleDeliveryHubRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class StrainsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("strains/v1/{id}")]
        public abstract System.Threading.Tasks.Task DeleteStrains(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Strain will be validated against the specified License Number. If not specified, the Strain will be validated against all of the User's current Facilities. Please note that if the Strain is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("strains/v1/{id}")]
        public abstract System.Threading.Tasks.Task GetStrains(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <param name="licenseNumber">The license number of the facility for which to return the list of active strains.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("strains/v1/active")]
        public abstract System.Threading.Tasks.Task GetStrainActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("strains/v1/create")]
        public abstract System.Threading.Tasks.Task PostStrainCreate([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostStrainCreateRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("strains/v1/update")]
        public abstract System.Threading.Tasks.Task PostStrainUpdate([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostStrainUpdateRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class TransfersControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("transfers/v1/external/incoming/{id}")]
        public abstract System.Threading.Tasks.Task DeleteTransferExternalIncoming(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("transfers/v1/templates/{id}")]
        public abstract System.Threading.Tasks.Task DeleteTransferTemplates(int id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/deliveries/{id}/packages")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryPackages(int id);

        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/deliveries/{id}/packages/wholesale")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryPackageWholesale(int id);

        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/deliveries/{id}/transporters")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryTransporters(int id);

        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/deliveries/{id}/transporters/details")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryTransporterDetails(int id);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/deliveries/packages/states")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryPackageStates();

        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/deliveries/package/{id}/requiredlabtestbatches")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryPackageRequiredlabtestbatches(int id);

        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/{id}/deliveries")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveries(int id);

        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/incoming")]
        public abstract System.Threading.Tasks.Task GetTransferIncoming([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/outgoing")]
        public abstract System.Threading.Tasks.Task GetTransferOutgoing([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/rejected")]
        public abstract System.Threading.Tasks.Task GetTransferRejected([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/templates")]
        public abstract System.Threading.Tasks.Task GetTransferTemplates([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? lastModifiedEnd = null);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("transfers/v1/templates")]
        public abstract System.Threading.Tasks.Task PostTransferTemplates([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostTransferTemplatesRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("transfers/v1/templates")]
        public abstract System.Threading.Tasks.Task PutTransferTemplates([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutTransferTemplatesRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/templates/deliveries/{id}/packages")]
        public abstract System.Threading.Tasks.Task GetTransferTemplateDeliveryPackages(int id);

        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/templates/deliveries/{id}/transporters")]
        public abstract System.Threading.Tasks.Task GetTransferTemplateDeliveryTransporters(int id);

        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/templates/deliveries/{id}/transporters/details")]
        public abstract System.Threading.Tasks.Task GetTransferTemplateDeliveryTransporterDetails(int id);

        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/templates/{id}/deliveries")]
        public abstract System.Threading.Tasks.Task GetTransferTemplateDeliveries(int id);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/types")]
        public abstract System.Threading.Tasks.Task GetTransferTypes([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("transfers/v1/external/incoming")]
        public abstract System.Threading.Tasks.Task PostTransferExternalIncoming([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PostTransferExternalIncomingRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("transfers/v1/external/incoming")]
        public abstract System.Threading.Tasks.Task PutTransferExternalIncoming([System.ComponentModel.DataAnnotations.Required] OpenMetrc.Builder.Controllers.V1.PutTransferExternalIncomingRequest request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class UnitsOfMeasureControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("unitsofmeasure/v1/active")]
        public abstract System.Threading.Tasks.Task GetUnitsofmeasureActive();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostHarvestCreatePackagesRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostHarvestCreatePackageTestingRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostHarvestFinishRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostHarvestRemovewasteRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostHarvestUnfinishRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutHarvestMoveRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutHarvestRenameRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostItemCreateRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostItemPhotoRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostItemUpdateRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostLabtestRecordRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutLabtestLabtestdocumentRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutLabtestResultReleaseRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostLocationCreateRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostLocationUpdateRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPackageAdjustRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPackageChangeItemRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPackageChangeLocationsRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPackageCreateRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPackageCreatePlantingsRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPackageCreateTestingRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPackageFinishRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPackageRemediateRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPackageUnfinishRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutPackageChangeNoteRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPatientCheckinsRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutPatientCheckinsRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPatientAddRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPatientUpdateRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DeletePlantbatchesRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPlantbatchAdditivesRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPlantbatchAdjustRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPlantbatchChangegrowthphaseRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPlantbatchCreatepackagesRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPlantbatchCreateplantingsRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPlantbatchCreatePackageFrommotherplantRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPlantbatchSplitRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPlantbatchWasteRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutPlantbatchMoveplantbatchesRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DeletePlantsRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPlantAdditivesRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPlantAdditiveBylocationRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPlantChangegrowthphasesRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPlantCreatePlantbatchPackagesRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPlantCreatePlantingsRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPlantHarvestplantsRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPlantManicureplantsRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPlantMoveplantsRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostPlantWasteRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostProcessingAdjustRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostProcessingCreatepackagesRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostProcessingJobtypesRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostProcessingStartRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutProcessingFinishRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutProcessingJobtypesRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutProcessingUnfinishRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostSaleReceiptsRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostSaleTransactionsRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutSaleDeliveryHubAcceptRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutSaleDeliveryHubDepartRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutSaleDeliveryHubVerifyidRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutSaleReceiptsRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutSaleTransactionsRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostSaleDeliveriesRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostSaleDeliveryRetailerRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostSaleDeliveryRetailerDepartRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostSaleDeliveryRetailerEndRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostSaleDeliveryRetailerRestockRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostSaleDeliveryRetailerSaleRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutSaleDeliveriesRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutSaleDeliveryCompleteRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutSaleDeliveryHubRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutSaleDeliveryRetailerRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostStrainCreateRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostStrainUpdateRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostTransferExternalIncomingRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PostTransferTemplatesRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutTransferExternalIncomingRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PutTransferTemplatesRequest
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604