//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;
using OpenMetrc.Builder.Domain;
using OpenMetrc.Builder.Domain.Requests;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace OpenMetrc.V2.Builder.Controllers
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class CaregiversStatusControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Data returned by this endpoint is cached for up to one minute.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Lookup Caregivers
        /// </remarks>
        /// <param name="caregiverLicenseNumber">Route parameter caregiverLicenseNumber</param>
        /// <param name="licenseNumber">The license number of the Facility under which to get the Caregiver status.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("caregivers/v2/status/{caregiverLicenseNumber}")]
        public abstract System.Threading.Tasks.Task GetCaregiverStatus(string caregiverLicenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class EmployeesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Employees • View Employees
        /// </remarks>
        /// <param name="licenseNumber">The license number of the Facility under which to get the Employees.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("employees/v2/")]
        public abstract System.Threading.Tasks.Task GetEmployees([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class FacilitiesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// A Facility represents a building licensed for the growing, processing, and/or selling of product.
        /// </summary>
        /// <remarks>
        /// This endpoint provides a list of facilities for which the authenticated user has access.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("facilities/v2/")]
        public abstract System.Threading.Tasks.Task GetFacilities();

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class HarvestsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests • Discontinue Harvest Waste
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of harvests waste.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("harvests/v2/waste/{id}")]
        public abstract System.Threading.Tasks.Task DeleteHarvestWasteById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active harvests.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v2/active")]
        public abstract System.Threading.Tasks.Task GetHarvestActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v2/{id}")]
        public abstract System.Threading.Tasks.Task GetHarvestById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive harvests.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v2/inactive")]
        public abstract System.Threading.Tasks.Task GetHarvestInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of harvests on hold.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v2/onhold")]
        public abstract System.Threading.Tasks.Task GetHarvestOnHold([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of waste harvests.</param>
        /// <param name="harvestId">The harvestId is the unique identifier for each harvest.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v2/waste")]
        public abstract System.Threading.Tasks.Task GetHarvestWaste([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] long harvestId, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests • Manage Harvests
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of harvests waste.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("harvests/v2/waste")]
        public abstract System.Threading.Tasks.Task PostHarvestWaste([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostHarvestWasteRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v2/waste/types")]
        public abstract System.Threading.Tasks.Task GetHarvestWasteTypes([Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests • Manage Harvests • View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of harvests packages.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("harvests/v2/packages")]
        public abstract System.Threading.Tasks.Task PostHarvestPackages([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostHarvestPackagesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests • Manage Harvests • View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of harvests packages.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("harvests/v2/packages/testing")]
        public abstract System.Threading.Tasks.Task PostHarvestPackageTesting([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostHarvestPackageTestingRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests • Finish/Discontinue Harvests
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of finished harvests.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("harvests/v2/finish")]
        public abstract System.Threading.Tasks.Task PutHarvestFinish([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutHarvestFinishRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests • Manage Harvests
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of harvests locations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("harvests/v2/location")]
        public abstract System.Threading.Tasks.Task PutHarvestLocation([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutHarvestLocationRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests • Manage Harvests
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of renamed harvests.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("harvests/v2/rename")]
        public abstract System.Threading.Tasks.Task PutHarvestRename([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutHarvestRenameRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests • Finish/Discontinue Harvests
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of harvests restored.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("harvests/v2/restore/harvestedplants")]
        public abstract System.Threading.Tasks.Task PutHarvestRestoreHarvestedPlants([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutHarvestRestoreHarvestedPlantsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests • Finish/Discontinue Harvests
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of unfinished harvests.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("harvests/v2/unfinish")]
        public abstract System.Threading.Tasks.Task PutHarvestUnfinish([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutHarvestUnfinishRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class ItemsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility for the Item Brand to delete.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("items/v2/brand/{id}")]
        public abstract System.Threading.Tasks.Task DeleteItemBrandById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility for the Item to delete.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("items/v2/{id}")]
        public abstract System.Threading.Tasks.Task DeleteItemById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Item will be validated against the specified License Number. If not specified, the Item will be validated against all of the User's current Facilities. Please note that if the Item is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v2/{id}")]
        public abstract System.Threading.Tasks.Task GetItemById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v2/active")]
        public abstract System.Threading.Tasks.Task GetItemActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active item brands.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v2/brands")]
        public abstract System.Threading.Tasks.Task GetItemBrands([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="licenseNumber">If specified, the Categories will be retrieved for the specified License Number. If not specified, all Item Categories will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v2/categories")]
        public abstract System.Threading.Tasks.Task GetItemCategories([Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive items.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v2/inactive")]
        public abstract System.Threading.Tasks.Task GetItemInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The file system id of the image to return.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v2/photo/{id}")]
        public abstract System.Threading.Tasks.Task GetItemPhotoById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("items/v2/")]
        public abstract System.Threading.Tasks.Task PostItems([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostItemsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for the Item updates.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("items/v2/")]
        public abstract System.Threading.Tasks.Task PutItems([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutItemsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for the Item Brands to create.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("items/v2/brand")]
        public abstract System.Threading.Tasks.Task PostItemBrand([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostItemBrandRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for the Item Brand updates.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("items/v2/brand")]
        public abstract System.Threading.Tasks.Task PutItemBrand([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutItemBrandRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("items/v2/photo")]
        public abstract System.Threading.Tasks.Task PostItemPhoto([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostItemPhotoRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class LabTestsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("labtests/v2/batches")]
        public abstract System.Threading.Tasks.Task GetLabTestBatches([Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">LabTestDocumentFileId</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("labtests/v2/labtestdocument/{id}")]
        public abstract System.Threading.Tasks.Task GetLabTestLabTestDocumentById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("labtests/v2/results")]
        public abstract System.Threading.Tasks.Task GetLabTestResults([Microsoft.AspNetCore.Mvc.FromQuery] long packageId, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("labtests/v2/states")]
        public abstract System.Threading.Tasks.Task GetLabTestStates();

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("labtests/v2/types")]
        public abstract System.Threading.Tasks.Task GetLabTestTypes([Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("labtests/v2/record")]
        public abstract System.Threading.Tasks.Task PostLabTestRecord([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostLabTestRecordRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility updating the lab test document.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("labtests/v2/labtestdocument")]
        public abstract System.Threading.Tasks.Task PutLabTestLabTestDocument([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutLabTestLabTestDocumentRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility releasing the lab test results.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("labtests/v2/results/release")]
        public abstract System.Threading.Tasks.Task PutLabTestResultRelease([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutLabTestResultReleaseRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class LocationsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility for which to delete the list of locations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("locations/v2/{id}")]
        public abstract System.Threading.Tasks.Task DeleteLocationById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Location will be validated against the specified License Number. If not specified, the Location will be validated against all of the User's current Facilities. Please note that if the Location is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("locations/v2/{id}")]
        public abstract System.Threading.Tasks.Task GetLocationById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active locations.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("locations/v2/active")]
        public abstract System.Threading.Tasks.Task GetLocationActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of inactive Locations.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("locations/v2/inactive")]
        public abstract System.Threading.Tasks.Task GetLocationInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active location types.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("locations/v2/types")]
        public abstract System.Threading.Tasks.Task GetLocationTypes([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record the list of locations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("locations/v2/")]
        public abstract System.Threading.Tasks.Task PostLocations([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostLocationsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update the list of locations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("locations/v2/")]
        public abstract System.Threading.Tasks.Task PutLocations([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutLocationsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PackagesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility for which to discontinue.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("packages/v2/{id}")]
        public abstract System.Threading.Tasks.Task DeletePackageById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Package will be validated against the specified License Number. If not specified, the Package will be validated against all of the User's current Facilities. Please note that if the Package is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/{id}")]
        public abstract System.Threading.Tasks.Task GetPackageById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active packages.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/active")]
        public abstract System.Threading.Tasks.Task GetPackageActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of adjustment reasons.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/adjust/reasons")]
        public abstract System.Threading.Tasks.Task GetPackageAdjustReasons([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Package Source Harvests
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Package will be validated against the specified License Number. If not specified, the Package will be validated against all of the User's current Facilities. Please note that if the Package is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/{id}/source/harvests")]
        public abstract System.Threading.Tasks.Task GetPackageByIdSourceHarvests(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive packages.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/inactive")]
        public abstract System.Threading.Tasks.Task GetPackageInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of packages in transit.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/intransit")]
        public abstract System.Threading.Tasks.Task GetPackageIntransit([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="label">Route parameter label</param>
        /// <param name="licenseNumber">If specified, the Package will be validated against the specified License Number. If not specified, the Package will be validated against all of the User's current Facilities. Please note that if the Package is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/{label}")]
        public abstract System.Threading.Tasks.Task GetPackageByLabel(string label, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of lab sample packages that have been created/sent for testing.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/labsamples")]
        public abstract System.Threading.Tasks.Task GetPackageLabSamples([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of packages on hold.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/onhold")]
        public abstract System.Threading.Tasks.Task GetPackageOnHold([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/types")]
        public abstract System.Threading.Tasks.Task GetPackageTypes();

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record the list of new packages.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v2/")]
        public abstract System.Threading.Tasks.Task PostPackages([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPackagesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record the list of adjustments.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v2/adjust")]
        public abstract System.Threading.Tasks.Task PostPackageAdjust([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPackageAdjustRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// This endpoint allows you to set the final quantity for a package.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record the list of adjustments.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/adjust")]
        public abstract System.Threading.Tasks.Task PutPackageAdjust([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageAdjustRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants • View Packages • Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record the list of new plantings.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v2/plantings")]
        public abstract System.Threading.Tasks.Task PostPackagePlantings([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPackagePlantingsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record the list of new packages for testing.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v2/testing")]
        public abstract System.Threading.Tasks.Task PostPackageTesting([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPackageTestingRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update list of flagged donations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/donation/flag")]
        public abstract System.Threading.Tasks.Task PutPackageDonationFlag([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageDonationFlagRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update list of unflaged donations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/donation/unflag")]
        public abstract System.Threading.Tasks.Task PutPackageDonationUnflag([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageDonationUnflagRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update the list of finish packages.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/finish")]
        public abstract System.Threading.Tasks.Task PutPackageFinish([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageFinishRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update list of changed items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/item")]
        public abstract System.Threading.Tasks.Task PutPackageItem([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageItemRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update the list of required lab test batches.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/labtests/required")]
        public abstract System.Threading.Tasks.Task PutPackageLabTestRequired([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageLabTestRequiredRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update the list of change locations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/location")]
        public abstract System.Threading.Tasks.Task PutPackageLocation([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageLocationRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory • Manage Package Notes
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update list of change notes.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/note")]
        public abstract System.Threading.Tasks.Task PutPackageNote([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageNoteRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update the list of product remediations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/remediate")]
        public abstract System.Threading.Tasks.Task PutPackageRemediate([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageRemediateRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update trade sample flags.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/tradesample/flag")]
        public abstract System.Threading.Tasks.Task PutPackageTradeSampleFlag([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageTradeSampleFlagRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update trade sample unflag.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/tradesample/unflag")]
        public abstract System.Threading.Tasks.Task PutPackageTradeSampleUnflag([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageTradeSampleUnflagRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update list of unfinish packages.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/unfinish")]
        public abstract System.Threading.Tasks.Task PutPackageUnfinish([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageUnfinishRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update list of changed items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/usebydate")]
        public abstract System.Threading.Tasks.Task PutPackageUseByDate([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageUseByDateRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PatientCheckInsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManagePatientsCheckIns
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility for which to archive patient check-in.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("patient-checkins/v2/{id}")]
        public abstract System.Threading.Tasks.Task DeletePatientCheckInById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManagePatientsCheckIns
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of patient check-ins.</param>
        /// <param name="checkinDateStart">The last modified start timestamp</param>
        /// <param name="checkinDateEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("patient-checkins/v2/")]
        public abstract System.Threading.Tasks.Task GetPatientCheckIns([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? checkinDateStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? checkinDateEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManagePatientsCheckIns
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record the list of patient check-ins.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("patient-checkins/v2/")]
        public abstract System.Threading.Tasks.Task PostPatientCheckIns([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPatientCheckInsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManagePatientsCheckIns
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update the list of patient check-ins.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("patient-checkins/v2/")]
        public abstract System.Threading.Tasks.Task PutPatientCheckIns([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPatientCheckInsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("patient-checkins/v2/locations")]
        public abstract System.Threading.Tasks.Task GetPatientCheckInLocations();

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PatientsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility for which to delete the patient.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("patients/v2/{id}")]
        public abstract System.Threading.Tasks.Task DeletePatientById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Patient will be validated against the specified License Number. If not specified, the Patient will be validated against all of the User's current Facilities. Please note that if the Patient is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("patients/v2/{id}")]
        public abstract System.Threading.Tasks.Task GetPatientById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active patients.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("patients/v2/active")]
        public abstract System.Threading.Tasks.Task GetPatientActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record the list of patients.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("patients/v2/")]
        public abstract System.Threading.Tasks.Task PostPatients([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPatientsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update the list of patients.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("patients/v2/")]
        public abstract System.Threading.Tasks.Task PutPatients([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPatientsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PatientsStatusControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Data returned by this endpoint is cached for up to one minute.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Lookup Patients
        /// </remarks>
        /// <param name="patientLicenseNumber">Route parameter patientLicenseNumber</param>
        /// <param name="licenseNumber">The license number of the Facility under which to get the Patient Status.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("patients/v2/statuses/{patientLicenseNumber}")]
        public abstract System.Threading.Tasks.Task GetPatientStatuses(string patientLicenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PlantBatchesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Destroy Immature Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to destroy the plant batch.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/")]
        public abstract System.Threading.Tasks.Task DeletePlantBatches([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.DeletePlantBatchesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active plant batches.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/active")]
        public abstract System.Threading.Tasks.Task GetPlantBatchActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Plant Batch will be validated against the specified License Number. If not specified, the Plant Batch will be validated against all of the User's current Facilities. Please note that if the Plant Batch is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/{id}")]
        public abstract System.Threading.Tasks.Task GetPlantBatchById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive plant batches.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/inactive")]
        public abstract System.Threading.Tasks.Task GetPlantBatchInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/types")]
        public abstract System.Threading.Tasks.Task GetPlantBatchTypes([Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return a list of waste reasons.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/waste/reasons")]
        public abstract System.Threading.Tasks.Task GetPlantBatchWasteReasons([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record plant additives.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/additives")]
        public abstract System.Threading.Tasks.Task PostPlantBatchAdditives([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchAdditivesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record adjustments.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/adjust")]
        public abstract System.Threading.Tasks.Task PostPlantBatchAdjust([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchAdjustRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory • View Veg/Flower Plants • Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to change the growth phase.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/growthphase")]
        public abstract System.Threading.Tasks.Task PostPlantBatchGrowthPhase([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchGrowthPhaseRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory • View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to create a package from the plant batch.</param>
        /// <param name="isFromMotherPlant">Whether the package contains a plant batch from a mother plant - Boolean. Reference v2/packages/frommotherplant</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/packages")]
        public abstract System.Threading.Tasks.Task PostPlantBatchPackages([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchPackagesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] bool? isFromMotherPlant = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory • View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to create packages from a mother plant.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/packages/frommotherplant")]
        public abstract System.Threading.Tasks.Task PostPlantBatchPackageFromMotherPlant([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchPackageFromMotherPlantRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to create the plantings.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/plantings")]
        public abstract System.Threading.Tasks.Task PostPlantBatchPlantings([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchPlantingsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to split the plant batches.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/split")]
        public abstract System.Threading.Tasks.Task PostPlantBatchSplit([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchSplitRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Waste
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record waste of the plant batch.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/waste")]
        public abstract System.Threading.Tasks.Task PostPlantBatchWaste([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchWasteRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to change the location of the plant batch.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/location")]
        public abstract System.Threading.Tasks.Task PutPlantBatchLocation([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantBatchLocationRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to change the strain of the plant batch.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/strain")]
        public abstract System.Threading.Tasks.Task PutPlantBatchStrain([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantBatchStrainRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to replace plant batch tags.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/tag")]
        public abstract System.Threading.Tasks.Task PutPlantBatchTag([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantBatchTagRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PlantsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Destroy Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility that intends to destroy the plants.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("plants/v2/")]
        public abstract System.Threading.Tasks.Task DeletePlants([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.DeletePlantsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View/Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to retrieve plant additives.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/additives")]
        public abstract System.Threading.Tasks.Task GetPlantAdditives([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record plant additives.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v2/additives")]
        public abstract System.Threading.Tasks.Task PostPlantAdditives([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantAdditivesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/additives/types")]
        public abstract System.Threading.Tasks.Task GetPlantAdditiveTypes();

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of flowering plants.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/flowering")]
        public abstract System.Threading.Tasks.Task GetPlantFlowering([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of available Plant Growth Phases.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/growthphases")]
        public abstract System.Threading.Tasks.Task GetPlantGrowthPhases([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Plant will be validated against the specified License Number. If not specified, the Plant will be validated against all of the User's current Facilities. Please note that if the Plant is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/{id}")]
        public abstract System.Threading.Tasks.Task GetPlantById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive plants.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/inactive")]
        public abstract System.Threading.Tasks.Task GetPlantInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="label">Route parameter label</param>
        /// <param name="licenseNumber">If specified, the Plant will be validated against the specified License Number. If not specified, the Plant will be validated against all of the User's current Facilities. Please note that if the Plant is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/{label}")]
        public abstract System.Threading.Tasks.Task GetPlantByLabel(string label, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of plants on hold.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/onhold")]
        public abstract System.Threading.Tasks.Task GetPlantOnHold([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of vegetating plants.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/vegetative")]
        public abstract System.Threading.Tasks.Task GetPlantVegetative([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/waste/methods/all")]
        public abstract System.Threading.Tasks.Task GetPlantWasteMethodAll([Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of waste reasons.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/waste/reasons")]
        public abstract System.Threading.Tasks.Task GetPlantWasteReasons([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants • Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record plant additives.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v2/additives/bylocation")]
        public abstract System.Threading.Tasks.Task PostPlantAdditiveByLocation([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantAdditiveByLocationRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manicure/Harvest Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record the list of plants manicured.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v2/manicure")]
        public abstract System.Threading.Tasks.Task PostPlantManicure([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantManicureRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory • View Veg/Flower Plants • Manage Veg/Flower Plants Inventory • View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record the list of plant batch packages.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v2/plantbatch/packages")]
        public abstract System.Threading.Tasks.Task PostPlantPlantBatchPackages([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantPlantBatchPackagesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory • View Veg/Flower Plants • Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record the list of plant batches.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v2/plantings")]
        public abstract System.Threading.Tasks.Task PostPlantPlantings([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantPlantingsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Waste
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record waste.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v2/waste")]
        public abstract System.Threading.Tasks.Task PostPlantWaste([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantWasteRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update the list of plants growth phase.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plants/v2/growthphase")]
        public abstract System.Threading.Tasks.Task PutPlantGrowthPhase([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantGrowthPhaseRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manicure/Harvest Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update the list of plant harvests.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plants/v2/harvest")]
        public abstract System.Threading.Tasks.Task PutPlantHarvest([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantHarvestRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update the list of plants moved.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plants/v2/location")]
        public abstract System.Threading.Tasks.Task PutPlantLocation([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantLocationRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manicure/Harvest Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update the list of plants merged.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plants/v2/merge")]
        public abstract System.Threading.Tasks.Task PutPlantMerge([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantMergeRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Plant
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update plant splits.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plants/v2/split")]
        public abstract System.Threading.Tasks.Task PutPlantSplit([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantSplitRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update the list of plant strains.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plants/v2/strain")]
        public abstract System.Threading.Tasks.Task PutPlantStrain([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantStrainRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to upate the list of plant tags.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plants/v2/tag")]
        public abstract System.Threading.Tasks.Task PutPlantTag([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantTagRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class ProcessingJobControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility of the processing job.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("processing/v2/{id}")]
        public abstract System.Threading.Tasks.Task DeleteProcessingById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the processing job will be validated against the specified License Number. If not specified, the processing job will be validated against all of the User's current Facilities. Please note that if the processing job is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v2/{id}")]
        public abstract System.Threading.Tasks.Task GetProcessingById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility of the processing job type.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("processing/v2/jobtypes/{id}")]
        public abstract System.Threading.Tasks.Task DeleteProcessingJobTypeById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active processing jobs.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v2/active")]
        public abstract System.Threading.Tasks.Task GetProcessingActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive processing jobs.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v2/inactive")]
        public abstract System.Threading.Tasks.Task GetProcessingInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active processing job types.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v2/jobtypes/active")]
        public abstract System.Threading.Tasks.Task GetProcessingJobTypeActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active processing job type attributes.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v2/jobtypes/attributes")]
        public abstract System.Threading.Tasks.Task GetProcessingJobTypeAttributes([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of processing job type categories.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v2/jobtypes/categories")]
        public abstract System.Threading.Tasks.Task GetProcessingJobTypeCategories([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive processing job types.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v2/jobtypes/inactive")]
        public abstract System.Threading.Tasks.Task GetProcessingJobTypeInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility to adjust the processing job.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("processing/v2/adjust")]
        public abstract System.Threading.Tasks.Task PostProcessingAdjust([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostProcessingAdjustRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to create the packages.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("processing/v2/createpackages")]
        public abstract System.Threading.Tasks.Task PostProcessingCreatePackages([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostProcessingCreatePackagesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility of the job type.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("processing/v2/jobtypes")]
        public abstract System.Threading.Tasks.Task PostProcessingJobTypes([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostProcessingJobTypesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update the processing job types.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("processing/v2/jobtypes")]
        public abstract System.Threading.Tasks.Task PutProcessingJobTypes([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutProcessingJobTypesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility to start the processing job.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("processing/v2/start")]
        public abstract System.Threading.Tasks.Task PostProcessingStart([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostProcessingStartRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility to finish the processing job.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("processing/v2/finish")]
        public abstract System.Threading.Tasks.Task PutProcessingFinish([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutProcessingFinishRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility to unfinish the processing job.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("processing/v2/unfinish")]
        public abstract System.Threading.Tasks.Task PutProcessingUnfinish([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutProcessingUnfinishRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class SalesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales Delivery
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility for which to void delivery.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/{id}")]
        public abstract System.Threading.Tasks.Task DeleteSaleDeliveryById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Sales Delivery • Manage Sales Delivery
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Sales Delivery will be validated against the specified License Number. If not specified, the Sales Delivery will be validated against all of the User's current Facilities. Please note that if the Sales Delivery is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/{id}")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Retailer Delivery
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility for which to void retailer delivery.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/retailer/{id}")]
        public abstract System.Threading.Tasks.Task DeleteSaleDeliveryRetailerById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Retailer Delivery • Manage Retailer Delivery
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Sales Delivery will be validated against the specified License Number. If not specified, the Sales Delivery will be validated against all of the User's current Facilities. Please note that if the Sales Delivery is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/retailer/{id}")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryRetailerById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility for which to archive receipt.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("sales/v2/receipts/{id}")]
        public abstract System.Threading.Tasks.Task DeleteSaleReceiptById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Sales • Manage Sales
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Sales Receipt will be validated against the specified License Number. If not specified, the Sales Receipt will be validated against all of the User's current Facilities. Please note that if the Sales Receipt is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/receipts/{id}")]
        public abstract System.Threading.Tasks.Task GetSaleReceiptById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/counties")]
        public abstract System.Threading.Tasks.Task GetSaleCounties();

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/customertypes")]
        public abstract System.Threading.Tasks.Task GetSaleCustomerTypes();

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Sales Delivery • Manage Sales Delivery
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active deliveries.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/active")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateEnd = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Sales Delivery • Manage Sales Delivery
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive deliveries.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/inactive")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateEnd = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Retailer Delivery • Manage Retailer Delivery
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return active retailer deliveries.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/retailer/active")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryRetailerActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Retailer Delivery • Manage Retailer Delivery
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return inactive retailer deliveries.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/retailer/inactive")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryRetailerInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of delivery return reasons.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/returnreasons")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryReturnReasons([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;:
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/patientregistration/locations")]
        public abstract System.Threading.Tasks.Task GetSalePatientRegistrationLocations();

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Sales Delivery • Manage Sales Delivery
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of payment types.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/paymenttypes")]
        public abstract System.Threading.Tasks.Task GetSalePaymentTypes([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Sales • Manage Sales
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active receipts.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/receipts/active")]
        public abstract System.Threading.Tasks.Task GetSaleReceiptActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateEnd = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Sales • Manage Sales
        /// </remarks>
        /// <param name="externalNumber">Route parameter externalNumber</param>
        /// <param name="licenseNumber">If specified, the External Sales Receipt Number will be validated against the specified License Number. If not specified, the External Sales Receipt Number will be validated against all of the User's current Facilities. Please note that if the External Sales Receipt Number is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/receipts/external/{externalNumber}")]
        public abstract System.Threading.Tasks.Task GetSaleReceiptExternal(string externalNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Sales • Manage Sales
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive receipts.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/receipts/inactive")]
        public abstract System.Threading.Tasks.Task GetSaleReceiptInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateEnd = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without the time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be in Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales Delivery
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record deliveries.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveries([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleDeliveriesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without the time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be in Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales Delivery
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update deliveries.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveries([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveriesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The DateTime field must be the actual date and time of the transaction without the time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be in Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Retailer Delivery
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record retailer deliveries.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/retailer")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveryRetailer([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleDeliveryRetailerRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The DateTime field must be the actual date and time of the transaction without the time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be in Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Retailer Delivery
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update retailer deliveries.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/retailer")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryRetailer([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveryRetailerRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Retailer Delivery
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record depart delivery.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/retailer/depart")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveryRetailerDepart([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleDeliveryRetailerDepartRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The ActualArrivalDateTime field must be the actual date and time of the transaction without the time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be in Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Retailer Delivery
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record end retailer deliveries.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/retailer/end")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveryRetailerEnd([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleDeliveryRetailerEndRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The DateTime field must be the actual date and time of the transaction without the time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be in Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Retailer Delivery
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record restock retailer deliveries.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/retailer/restock")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveryRetailerRestock([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleDeliveryRetailerRestockRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without the time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be in Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Retailer Delivery
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record sale from retailer delivery.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/retailer/sale")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveryRetailerSale([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleDeliveryRetailerSaleRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without the time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be in Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record receipts.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v2/receipts")]
        public abstract System.Threading.Tasks.Task PostSaleReceipts([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleReceiptsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without the time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be in Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update receipts.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v2/receipts")]
        public abstract System.Threading.Tasks.Task PutSaleReceipts([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleReceiptsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales Delivery
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update deliveries completed.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/complete")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryComplete([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveryCompleteRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without the time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be in Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales Delivery
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update hub transporters.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/hub")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryHub([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveryHubRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update hub deliveries accepted.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/hub/accept")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryHubAccept([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveryHubAcceptRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update hub delivery departures.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/hub/depart")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryHubDepart([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveryHubDepartRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update hub delivery Id's.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/hub/verifyID")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryHubVerifyId([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveryHubVerifyIdRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update finalized receipts.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v2/receipts/finalize")]
        public abstract System.Threading.Tasks.Task PutSaleReceiptFinalize([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleReceiptFinalizeRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update unfinalized receipts.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v2/receipts/unfinalize")]
        public abstract System.Threading.Tasks.Task PutSaleReceiptUnfinalize([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleReceiptUnfinalizeRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class StrainsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for which Strain to delete.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("strains/v2/{id}")]
        public abstract System.Threading.Tasks.Task DeleteStrainById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Strain will be validated against the specified License Number. If not specified, the Strain will be validated against all of the User's current Facilities. Please note that if the Strain is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("strains/v2/{id}")]
        public abstract System.Threading.Tasks.Task GetStrainById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active strains.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("strains/v2/active")]
        public abstract System.Threading.Tasks.Task GetStrainActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of inactive Strains.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("strains/v2/inactive")]
        public abstract System.Threading.Tasks.Task GetStrainInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record the list of Strains.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("strains/v2/")]
        public abstract System.Threading.Tasks.Task PostStrains([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostStrainsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the list of Strains.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("strains/v2/")]
        public abstract System.Threading.Tasks.Task PutStrains([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutStrainsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class TagsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Returns a list of available Package Tags. NOTE: This is a premium endpoint.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="licenseNumber">The license number for which to return available package tags.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("tags/v2/package/available")]
        public abstract System.Threading.Tasks.Task GetTagPackageAvailable([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Returns a list of available Plant Tags. NOTE: This is a premium endpoint.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="licenseNumber">The license number for which to return available tags.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("tags/v2/plant/available")]
        public abstract System.Threading.Tasks.Task GetTagPlantAvailable([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class TransfersControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility for which to void the transfer.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("transfers/v2/external/incoming/{id}")]
        public abstract System.Threading.Tasks.Task DeleteTransferExternalIncomingById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility for which to archive the template.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("transfers/v2/templates/outgoing/{id}")]
        public abstract System.Threading.Tasks.Task DeleteTransferTemplateOutgoingById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers • View Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/deliveries/{id}/packages")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryByIdPackages(long id, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers • View Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/deliveries/{id}/packages/wholesale")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryByIdPackageWholesale(long id, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers • View Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/deliveries/{id}/transporters")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryByIdTransporters(long id, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers • View Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/deliveries/{id}/transporters/details")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryByIdTransporterDetails(long id, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/deliveries/packages/states")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryPackageStates();

        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Delivery Package ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers • View Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/deliveries/package/{id}/requiredlabtestbatches")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryPackageByIdRequiredLabTestBatches(long id, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers • View Transfers
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return shipment plans.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/hub")]
        public abstract System.Threading.Tasks.Task GetTransferHub([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer ID.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers • View Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/{id}/deliveries")]
        public abstract System.Threading.Tasks.Task GetTransferByIdDeliveries(long id, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers • View Transfers
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return incoming transfers.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/incoming")]
        public abstract System.Threading.Tasks.Task GetTransferIncoming([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers • View Transfers
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return outgoing transfers.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/outgoing")]
        public abstract System.Threading.Tasks.Task GetTransferOutgoing([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers • View Transfers
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return rejected transfers.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/rejected")]
        public abstract System.Threading.Tasks.Task GetTransferRejected([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfer Templates • View Transfer Templates
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return outgoing shipment templates.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/templates/outgoing")]
        public abstract System.Threading.Tasks.Task GetTransferTemplateOutgoing([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfer Templates
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to create a shipment template.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("transfers/v2/templates/outgoing")]
        public abstract System.Threading.Tasks.Task PostTransferTemplateOutgoing([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostTransferTemplateOutgoingRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfer Templates
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update shipment plan templates.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("transfers/v2/templates/outgoing")]
        public abstract System.Threading.Tasks.Task PutTransferTemplateOutgoing([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutTransferTemplateOutgoingRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Template Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfer Templates • View Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/templates/outgoing/deliveries/{id}/packages")]
        public abstract System.Threading.Tasks.Task GetTransferTemplateOutgoingDeliveryByIdPackages(long id, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Template Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfer Templates • View Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/templates/outgoing/deliveries/{id}/transporters")]
        public abstract System.Threading.Tasks.Task GetTransferTemplateOutgoingDeliveryByIdTransporters(long id, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Template Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfer Templates • View Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/templates/outgoing/deliveries/{id}/transporters/details")]
        public abstract System.Threading.Tasks.Task GetTransferTemplateOutgoingDeliveryByIdTransporterDetails(long id);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfer Templates • View Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/templates/outgoing/{id}/deliveries")]
        public abstract System.Threading.Tasks.Task GetTransferTemplateOutgoingByIdDeliveries(long id, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return transfer types.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/types")]
        public abstract System.Threading.Tasks.Task GetTransferTypes([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers
        /// </remarks>
        /// <param name="licenseNumber">The license number for which to create a shipment plan.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("transfers/v2/external/incoming")]
        public abstract System.Threading.Tasks.Task PostTransferExternalIncoming([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostTransferExternalIncomingRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update external incoming shipment plans.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("transfers/v2/external/incoming")]
        public abstract System.Threading.Tasks.Task PutTransferExternalIncoming([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutTransferExternalIncomingRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class TransportersControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Please note: The {id} parameter above represents a Driver Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transporters
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility for which to archive a driver.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("transporters/v2/drivers/{id}")]
        public abstract System.Threading.Tasks.Task DeleteTransporterDriverById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The {id} parameter above represents a Driver Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transporters
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility for which to return a driver.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transporters/v2/drivers/{id}")]
        public abstract System.Threading.Tasks.Task GetTransporterDriverById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The {id} parameter above represents a Vehicle Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transporters
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number for which to archive a vehicle</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("transporters/v2/vehicles/{id}")]
        public abstract System.Threading.Tasks.Task DeleteTransporterVehicleById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The {id} parameter above represents a Vehicle Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transporters
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility for which to return a vehicle.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transporters/v2/vehicles/{id}")]
        public abstract System.Threading.Tasks.Task GetTransporterVehicleById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transporters
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of drivers.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transporters/v2/drivers")]
        public abstract System.Threading.Tasks.Task GetTransporterDrivers([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transporters
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to create a driver.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("transporters/v2/drivers")]
        public abstract System.Threading.Tasks.Task PostTransporterDrivers([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostTransporterDriversRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transporters
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update a driver(s).</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("transporters/v2/drivers")]
        public abstract System.Threading.Tasks.Task PutTransporterDrivers([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutTransporterDriversRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transporters
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of vehicles.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transporters/v2/vehicles")]
        public abstract System.Threading.Tasks.Task GetTransporterVehicles([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transporters
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to create a vehicle.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("transporters/v2/vehicles")]
        public abstract System.Threading.Tasks.Task PostTransporterVehicles([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostTransporterVehiclesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string data);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transporters
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to update a vehicle(s).</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("transporters/v2/vehicles")]
        public abstract System.Threading.Tasks.Task PutTransporterVehicles([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutTransporterVehiclesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string data);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class UnitsOfMeasureControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("unitsofmeasure/v2/active")]
        public abstract System.Threading.Tasks.Task GetUnitOfMeasureActive();

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("unitsofmeasure/v2/inactive")]
        public abstract System.Threading.Tasks.Task GetUnitOfMeasureInactive();

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class WasteMethodsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("wastemethods/v2/")]
        public abstract System.Threading.Tasks.Task GetWasteMethods();

    }

    


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625