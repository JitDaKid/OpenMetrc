//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;
using OpenMetrc.Builder.Domain;
using OpenMetrc.Builder.Domain.Requests;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace OpenMetrc.V2.Builder.Controllers
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class AdditivesTemplatesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Retrieves a list of active additive templates for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Additives
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of active additives.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("additivestemplates/v2/active")]
        public abstract System.Threading.Tasks.Task GetAdditivestemplateActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves an Additive Template by its Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Additives
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Additive will be validated against the specified License Number. If not specified, the Additive will be validated against all of the User's current Facilities. Please note that if the Additive is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("additivestemplates/v2/{id}")]
        public abstract System.Threading.Tasks.Task GetAdditivestemplateById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Retrieves a list of inactive additive templates for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Additives
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of inactive additives.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("additivestemplates/v2/inactive")]
        public abstract System.Threading.Tasks.Task GetAdditivestemplateInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Creates new additive templates for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Additives
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record the list of additives.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("additivestemplates/v2/")]
        public abstract System.Threading.Tasks.Task PostAdditivestemplates([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostAdditivestemplatesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates existing additive templates for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Additives
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the list of additives.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("additivestemplates/v2/")]
        public abstract System.Threading.Tasks.Task PutAdditivestemplates([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutAdditivestemplatesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class CaregiversStatusControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Retrieves the status of a Caregiver by their License Number for a specified Facility. Data returned by this endpoint is cached for up to one minute.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Lookup Caregivers
        /// </remarks>
        /// <param name="caregiverLicenseNumber">Route parameter caregiverLicenseNumber</param>
        /// <param name="licenseNumber">The License Number of the Facility under which to get the Caregiver status.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("caregivers/v2/status/{caregiverLicenseNumber}")]
        public abstract System.Threading.Tasks.Task GetCaregiverStatus(string caregiverLicenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class EmployeesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Retrieves a list of employees for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Employees â€¢ View Employees
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility under which to get the employees.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("employees/v2/")]
        public abstract System.Threading.Tasks.Task GetEmployees([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Retrieves the permissions of a specified Employee, identified by their Employee License Number, for a given Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Employees
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility under which to get the Employee.</param>
        /// <param name="employeeLicenseNumber">The License Number of the Employee under which to get the Permission.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("employees/v2/permissions")]
        public abstract System.Threading.Tasks.Task GetEmployeePermissions([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string employeeLicenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class FacilitiesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// A Facility represents a building licensed for the growing, processing, and/or selling of product.
        /// </summary>
        /// <remarks>
        /// This endpoint provides a list of facilities for which the authenticated user has access.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("facilities/v2/")]
        public abstract System.Threading.Tasks.Task GetFacilities();

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class HarvestsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Discontinues a specific harvest waste record by Id for the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests â€¢ Discontinue Harvest Waste
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of harvests waste.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("harvests/v2/waste/{id}")]
        public abstract System.Threading.Tasks.Task DeleteHarvestWasteById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a list of active harvests for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of active harvests.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v2/active")]
        public abstract System.Threading.Tasks.Task GetHarvestActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a Harvest by its Id, optionally validated against a specified Facility License Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v2/{id}")]
        public abstract System.Threading.Tasks.Task GetHarvestById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Retrieves a list of inactive harvests for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of inactive harvests.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v2/inactive")]
        public abstract System.Threading.Tasks.Task GetHarvestInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a list of harvests on hold for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of harvests on hold.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v2/onhold")]
        public abstract System.Threading.Tasks.Task GetHarvestOnHold([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a list of Waste records for a specified Harvest, identified by its Harvest Id, within a Facility identified by its License Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of waste harvests.</param>
        /// <param name="harvestId">The harvestId is the unique identifier for each harvest.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v2/waste")]
        public abstract System.Threading.Tasks.Task GetHarvestWaste([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] long harvestId, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Records Waste from harvests for a specified Facility. NOTE: The IDs passed in the request body are the harvest IDs for which you are documenting waste.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests â€¢ Manage Harvests
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of harvests waste.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("harvests/v2/waste")]
        public abstract System.Threading.Tasks.Task PostHarvestWaste([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostHarvestWasteRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a list of Waste types for harvests.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v2/waste/types")]
        public abstract System.Threading.Tasks.Task GetHarvestWasteTypes([Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Creates packages from harvested products for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests â€¢ Manage Harvests â€¢ View Packages â€¢ Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of harvests packages.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("harvests/v2/packages")]
        public abstract System.Threading.Tasks.Task PostHarvestPackages([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostHarvestPackagesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Creates packages for testing from harvested products for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests â€¢ Manage Harvests â€¢ View Packages â€¢ Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of harvests packages.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("harvests/v2/packages/testing")]
        public abstract System.Threading.Tasks.Task PostHarvestPackageTesting([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostHarvestPackageTestingRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Marks one or more harvests as finished for the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests â€¢ Finish/Discontinue Harvests
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of finished harvests.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("harvests/v2/finish")]
        public abstract System.Threading.Tasks.Task PutHarvestFinish([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutHarvestFinishRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates the Location of Harvest for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests â€¢ Manage Harvests
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of harvests locations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("harvests/v2/location")]
        public abstract System.Threading.Tasks.Task PutHarvestLocation([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutHarvestLocationRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Renames one or more harvests for the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests â€¢ Manage Harvests
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of renamed harvests.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("harvests/v2/rename")]
        public abstract System.Threading.Tasks.Task PutHarvestRename([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutHarvestRenameRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Restores previously harvested plants to their original state for the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests â€¢ Finish/Discontinue Harvests
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of harvests restored.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("harvests/v2/restore/harvestedplants")]
        public abstract System.Threading.Tasks.Task PutHarvestRestoreHarvestedPlants([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutHarvestRestoreHarvestedPlantsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Reopens one or more previously finished harvests for the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests â€¢ Finish/Discontinue Harvests
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of unfinished harvests.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("harvests/v2/unfinish")]
        public abstract System.Threading.Tasks.Task PutHarvestUnfinish([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutHarvestUnfinishRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class ItemsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Archives the specified Item Brand by Id for the given Facility License Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for the Item Brand to delete.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("items/v2/brand/{id}")]
        public abstract System.Threading.Tasks.Task DeleteItemBrandById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Archives the specified Product by Id for the given Facility License Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for the Item to delete.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("items/v2/{id}")]
        public abstract System.Threading.Tasks.Task DeleteItemById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves detailed information about a specific Item by Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Item will be validated against the specified License Number. If not specified, the Item will be validated against all of the User's current Facilities. Please note that if the Item is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v2/{id}")]
        public abstract System.Threading.Tasks.Task GetItemById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Returns a list of active items for the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of active items.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v2/active")]
        public abstract System.Threading.Tasks.Task GetItemActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a list of active item brands for the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of active item brands.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v2/brands")]
        public abstract System.Threading.Tasks.Task GetItemBrands([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Retrieves a list of item categories.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="licenseNumber">If specified, the categories will be retrieved for the specified License Number. If not specified, all item categories will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v2/categories")]
        public abstract System.Threading.Tasks.Task GetItemCategories([Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Retrieves a file by its Id for the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the file.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v2/file/{id}")]
        public abstract System.Threading.Tasks.Task GetItemFileById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Retrieves a list of inactive items for the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of inactive items.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v2/inactive")]
        public abstract System.Threading.Tasks.Task GetItemInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Retrieves an image by its Id for the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the image.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v2/photo/{id}")]
        public abstract System.Threading.Tasks.Task GetItemPhotoById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Creates one or more new products for the specified Facility. NOTE: To include a photo with an item, first use POST /items/v2/photo to POST the photo, and then use the returned Id in the request body in this endpoint.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to create new items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("items/v2/")]
        public abstract System.Threading.Tasks.Task PostItems([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostItemsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates one or more existing products for the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for the Item updates.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("items/v2/")]
        public abstract System.Threading.Tasks.Task PutItems([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutItemsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Creates one or more new item brands for the specified Facility identified by the License Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for the Item Brands to create.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("items/v2/brand")]
        public abstract System.Threading.Tasks.Task PostItemBrand([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostItemBrandRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates one or more existing item brands for the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for the Item Brand updates.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("items/v2/brand")]
        public abstract System.Threading.Tasks.Task PutItemBrand([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutItemBrandRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Uploads one or more image or PDF files for products, labels, packaging, or documents at the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("items/v2/file")]
        public abstract System.Threading.Tasks.Task PostItemFile([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostItemFileRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// This endpoint allows only BMP, GIF, JPG, and PNG files and uploaded files can be no more than 5 MB in size.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to add an image.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("items/v2/photo")]
        public abstract System.Threading.Tasks.Task PostItemPhoto([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostItemPhotoRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class LabTestsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Retrieves a list of Lab Test batches.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("labtests/v2/batches")]
        public abstract System.Threading.Tasks.Task GetLabTestBatches([Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Retrieves a specific Lab Test result document by its Id for a given Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Manage Packages Inventory
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">LabTestDocumentFileId</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("labtests/v2/labtestdocument/{id}")]
        public abstract System.Threading.Tasks.Task GetLabTestLabTestDocumentById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves Lab Test results for a specified Package.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Manage Packages Inventory
        /// </remarks>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("labtests/v2/results")]
        public abstract System.Threading.Tasks.Task GetLabTestResults([Microsoft.AspNetCore.Mvc.FromQuery] long packageId, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Returns a list of all lab testing states.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("labtests/v2/states")]
        public abstract System.Threading.Tasks.Task GetLabTestStates();

        /// <remarks>
        /// Returns a list of Lab Test types.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("labtests/v2/types")]
        public abstract System.Threading.Tasks.Task GetLabTestTypes([Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Submits Lab Test results for one or more packages. NOTE: This endpoint allows only PDF files, and uploaded files can be no more than 5 MB in size. The Label element in the request is a Package Label.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility recording the Lab Test.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("labtests/v2/record")]
        public abstract System.Threading.Tasks.Task PostLabTestRecord([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostLabTestRecordRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates one or more documents for previously submitted lab tests.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility updating the Lab Test document.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("labtests/v2/labtestdocument")]
        public abstract System.Threading.Tasks.Task PutLabTestLabTestDocument([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutLabTestLabTestDocumentRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Releases Lab Test results for one or more packages.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility releasing the Lab Test results.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("labtests/v2/results/release")]
        public abstract System.Threading.Tasks.Task PutLabTestResultRelease([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutLabTestResultReleaseRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class LocationsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Archives a specified Location, identified by its Id, for a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for which to delete the list of locations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("locations/v2/{id}")]
        public abstract System.Threading.Tasks.Task DeleteLocationById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a Location by its Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Location will be validated against the specified License Number. If not specified, the Location will be validated against all of the User's current Facilities. Please note that if the Location is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("locations/v2/{id}")]
        public abstract System.Threading.Tasks.Task GetLocationById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Retrieves a list of active locations for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of active locations.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("locations/v2/active")]
        public abstract System.Threading.Tasks.Task GetLocationActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a list of inactive locations for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of inactive locations.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("locations/v2/inactive")]
        public abstract System.Threading.Tasks.Task GetLocationInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Retrieves a list of active location types for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of active location types.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("locations/v2/types")]
        public abstract System.Threading.Tasks.Task GetLocationTypes([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Creates new locations for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record the list of locations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("locations/v2/")]
        public abstract System.Threading.Tasks.Task PostLocations([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostLocationsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates existing locations for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the list of locations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("locations/v2/")]
        public abstract System.Threading.Tasks.Task PutLocations([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutLocationsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PackagesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Discontinues a Package at a specific Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for which to discontinue.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("packages/v2/{id}")]
        public abstract System.Threading.Tasks.Task DeletePackageById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a Package by its Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Package will be validated against the specified License Number. If not specified, the Package will be validated against all of the User's current Facilities. Please note that if the Package is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/{id}")]
        public abstract System.Threading.Tasks.Task GetPackageById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Retrieves a list of active packages for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of active packages.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/active")]
        public abstract System.Threading.Tasks.Task GetPackageActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a list of adjustment reasons for packages at a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of adjustment reasons.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/adjust/reasons")]
        public abstract System.Threading.Tasks.Task GetPackageAdjustReasons([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Retrieves the source harvests for a Package by its Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Package Source Harvests
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Package will be validated against the specified License Number. If not specified, the Package will be validated against all of the User's current Facilities. Please note that if the Package is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/{id}/source/harvests")]
        public abstract System.Threading.Tasks.Task GetPackageByIdSourceHarvests(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Retrieves a list of inactive packages for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of inactive packages.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/inactive")]
        public abstract System.Threading.Tasks.Task GetPackageInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a list of packages in transit for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of packages in transit.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/intransit")]
        public abstract System.Threading.Tasks.Task GetPackageIntransit([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a Package by its label.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="label">Route parameter label</param>
        /// <param name="licenseNumber">If specified, the Package will be validated against the specified License Number. If not specified, the Package will be validated against all of the User's current Facilities. Please note that if the Package is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/{label}")]
        public abstract System.Threading.Tasks.Task GetPackageByLabel(string label, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Retrieves a list of lab sample packages created or sent for testing for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of lab sample packages that have been created/sent for testing.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/labsamples")]
        public abstract System.Threading.Tasks.Task GetPackageLabSamples([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a list of packages on hold for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of packages on hold.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/onhold")]
        public abstract System.Threading.Tasks.Task GetPackageOnHold([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a list of transferred packages for a specific Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of transferred packages.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/transferred")]
        public abstract System.Threading.Tasks.Task GetPackageTransferred([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a list of available Package types.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v2/types")]
        public abstract System.Threading.Tasks.Task GetPackageTypes();

        /// <remarks>
        /// Creates new packages for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record the list of new packages.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v2/")]
        public abstract System.Threading.Tasks.Task PostPackages([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPackagesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Records a list of adjustments for packages at a specific Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record the list of adjustments.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v2/adjust")]
        public abstract System.Threading.Tasks.Task PostPackageAdjust([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPackageAdjustRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Set the final quantity for a Package.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record the list of adjustments.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/adjust")]
        public abstract System.Threading.Tasks.Task PutPackageAdjust([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageAdjustRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Creates new plantings from packages for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants â€¢ Manage Immature Plants â€¢ View Packages â€¢ Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record the list of new plantings.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v2/plantings")]
        public abstract System.Threading.Tasks.Task PostPackagePlantings([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPackagePlantingsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Creates new packages for testing for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record the list of new packages for testing.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v2/testing")]
        public abstract System.Threading.Tasks.Task PostPackageTesting([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPackageTestingRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates the Product decontaminate information for a list of packages at a specific Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the list of product decontaminations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/decontaminate")]
        public abstract System.Threading.Tasks.Task PutPackageDecontaminate([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageDecontaminateRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Flags one or more packages for donation at the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update list of flagged donations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/donation/flag")]
        public abstract System.Threading.Tasks.Task PutPackageDonationFlag([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageDonationFlagRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Removes the donation flag from one or more packages at the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update list of unflaged donations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/donation/unflag")]
        public abstract System.Threading.Tasks.Task PutPackageDonationUnflag([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageDonationUnflagRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates the external identifiers for one or more packages at the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Manage Package Inventory â€¢ External Id Enabled
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update list of change external Ids.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/externalid")]
        public abstract System.Threading.Tasks.Task PutPackageExternalid([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageExternalidRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates a list of packages as finished for a specific Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the list of finish packages.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/finish")]
        public abstract System.Threading.Tasks.Task PutPackageFinish([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageFinishRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates the associated Item for one or more packages at the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update list of changed items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/item")]
        public abstract System.Threading.Tasks.Task PutPackageItem([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageItemRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates the list of required lab test batches for one or more packages at the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the list of required lab test batches.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/labtests/required")]
        public abstract System.Threading.Tasks.Task PutPackageLabTestRequired([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageLabTestRequiredRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates the Location and Sublocation for one or more packages at the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the list of change locations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/location")]
        public abstract System.Threading.Tasks.Task PutPackageLocation([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageLocationRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates notes associated with one or more packages for the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Manage Packages Inventory â€¢ Manage Package Notes
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update list of change notes.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/note")]
        public abstract System.Threading.Tasks.Task PutPackageNote([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageNoteRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates a list of Product remediations for packages at a specific Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the list of product remediations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/remediate")]
        public abstract System.Threading.Tasks.Task PutPackageRemediate([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageRemediateRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Flags or unflags one or more packages at the specified Facility as trade samples.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update trade sample flags.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/tradesample/flag")]
        public abstract System.Threading.Tasks.Task PutPackageTradeSampleFlag([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageTradeSampleFlagRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Removes the trade sample flag from one or more packages at the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update trade sample unflag.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/tradesample/unflag")]
        public abstract System.Threading.Tasks.Task PutPackageTradeSampleUnflag([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageTradeSampleUnflagRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates a list of packages as unfinished for a specific Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Manage Packages Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update list of unfinish packages.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/unfinish")]
        public abstract System.Threading.Tasks.Task PutPackageUnfinish([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageUnfinishRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates the use-by date for one or more packages at the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Packages â€¢ Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update list of changed items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v2/usebydate")]
        public abstract System.Threading.Tasks.Task PutPackageUseByDate([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageUseByDateRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PatientCheckInsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Archives a Patient Check-In, identified by its Id, for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: ManagePatientsCheckIns
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for which to archive Patient check-in.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("patient-checkins/v2/{id}")]
        public abstract System.Threading.Tasks.Task DeletePatientCheckInById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a list of patient check-ins for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: ManagePatientsCheckIns
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of Patient check-ins.</param>
        /// <param name="checkinDateStart">The last modified start timestamp</param>
        /// <param name="checkinDateEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("patient-checkins/v2/")]
        public abstract System.Threading.Tasks.Task GetPatientCheckIns([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? checkinDateStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? checkinDateEnd = null);

        /// <remarks>
        /// Records patient check-ins for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: ManagePatientsCheckIns
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record the list of Patient check-ins.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("patient-checkins/v2/")]
        public abstract System.Threading.Tasks.Task PostPatientCheckIns([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPatientCheckInsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates patient check-ins for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: ManagePatientsCheckIns
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the list of Patient check-ins.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("patient-checkins/v2/")]
        public abstract System.Threading.Tasks.Task PutPatientCheckIns([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPatientCheckInsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a list of Patient Check-In locations.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("patient-checkins/v2/locations")]
        public abstract System.Threading.Tasks.Task GetPatientCheckInLocations();

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PatientsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Removes a Patient, identified by an Id, from a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for which to delete the Patient.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("patients/v2/{id}")]
        public abstract System.Threading.Tasks.Task DeletePatientById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a Patient by Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Patient will be validated against the specified License Number. If not specified, the Patient will be validated against all of the User's current Facilities. Please note that if the Patient is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("patients/v2/{id}")]
        public abstract System.Threading.Tasks.Task GetPatientById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Retrieves a list of active patients for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of active patients.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("patients/v2/active")]
        public abstract System.Threading.Tasks.Task GetPatientActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Adds new patients to a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record the list of patients.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("patients/v2/")]
        public abstract System.Threading.Tasks.Task PostPatients([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPatientsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates Patient information for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the list of patients.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("patients/v2/")]
        public abstract System.Threading.Tasks.Task PutPatients([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPatientsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PatientsStatusControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Retrieves a list of statuses for a Patient License Number for a specified Facility. Data returned by this endpoint is cached for up to one minute.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Lookup Patients
        /// </remarks>
        /// <param name="patientLicenseNumber">Route parameter patientLicenseNumber</param>
        /// <param name="licenseNumber">The License Number of the Facility under which to get the Patient Status.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("patients/v2/statuses/{patientLicenseNumber}")]
        public abstract System.Threading.Tasks.Task GetPatientStatuses(string patientLicenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PlantBatchesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Completes the destruction of plant batches based on the provided input data.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants â€¢ Destroy Immature Plants
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to destroy the Plant Batch.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/")]
        public abstract System.Threading.Tasks.Task DeletePlantBatches([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.DeletePlantBatchesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a list of active plant batches for the specified Facility, optionally filtered by last modified date.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of active plant batches.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/active")]
        public abstract System.Threading.Tasks.Task GetPlantBatchActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a Plant Batch by Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Plant Batch will be validated against the specified License Number. If not specified, the Plant Batch will be validated against all of the User's current Facilities. Please note that if the Plant Batch is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/{id}")]
        public abstract System.Threading.Tasks.Task GetPlantBatchById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Retrieves a list of inactive plant batches for the specified Facility, optionally filtered by last modified date.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of inactive plant batches.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/inactive")]
        public abstract System.Threading.Tasks.Task GetPlantBatchInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a list of plant batch types.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/types")]
        public abstract System.Threading.Tasks.Task GetPlantBatchTypes([Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Retrieves waste details associated with plant batches at a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Plants Waste
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of waste plants.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/waste")]
        public abstract System.Threading.Tasks.Task GetPlantBatchWaste([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Records waste information for plant batches based on the submitted data for the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Waste
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record waste of the Plant Batch.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/waste")]
        public abstract System.Threading.Tasks.Task PostPlantBatchWaste([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchWasteRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a list of valid waste reasons associated with immature plant batches for the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return a list of waste reasons.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/waste/reasons")]
        public abstract System.Threading.Tasks.Task GetPlantBatchWasteReasons([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Records Additive usage details for plant batches at a specific Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record plant additives.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/additives")]
        public abstract System.Threading.Tasks.Task PostPlantBatchAdditives([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchAdditivesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Records Additive usage for plant batches at a Facility using predefined additive templates.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record plant additives.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/additives/usingtemplate")]
        public abstract System.Threading.Tasks.Task PostPlantBatchAdditiveUsingtemplate([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchAdditiveUsingtemplateRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Applies Facility specific adjustments to plant batches based on submitted reasons and input data.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants â€¢ Manage Immature Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record adjustments.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/adjust")]
        public abstract System.Threading.Tasks.Task PostPlantBatchAdjust([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchAdjustRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates the growth phase of plants at a specified Facility based on tracking information.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants â€¢ Manage Immature Plants Inventory â€¢ View Veg/Flower Plants â€¢ Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to change the growth phase.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/growthphase")]
        public abstract System.Threading.Tasks.Task PostPlantBatchGrowthPhase([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchGrowthPhaseRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Creates packages from plant batches at a Facility, with optional support for packaging from mother plants.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants â€¢ Manage Immature Plants Inventory â€¢ View Packages â€¢ Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to create a package from the Plant Batch.</param>
        /// <param name="isFromMotherPlant">Whether the Package contains a Plant Batch from a mother plant - Boolean. Reference v2/packages/frommotherplant</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/packages")]
        public abstract System.Threading.Tasks.Task PostPlantBatchPackages([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchPackagesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] bool? isFromMotherPlant = null);

        /// <remarks>
        /// Creates packages from mother plants at the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants â€¢ Manage Immature Plants Inventory â€¢ View Packages â€¢ Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to create packages from a mother plant.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/packages/frommotherplant")]
        public abstract System.Threading.Tasks.Task PostPlantBatchPackageFromMotherPlant([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchPackageFromMotherPlantRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Creates new plantings for a Facility by generating plant batches based on provided planting details.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants â€¢ Manage Immature Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to create the plantings.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/plantings")]
        public abstract System.Threading.Tasks.Task PostPlantBatchPlantings([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchPlantingsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Splits an existing Plant Batch into multiple groups at the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants â€¢ Manage Immature Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to split the plant batches.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/split")]
        public abstract System.Threading.Tasks.Task PostPlantBatchSplit([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchSplitRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Moves one or more plant batches to new locations with in a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants â€¢ Manage Immature Plants
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to change the Location of the Plant Batch.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/location")]
        public abstract System.Threading.Tasks.Task PutPlantBatchLocation([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantBatchLocationRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Renames plant batches at a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants â€¢ Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to rename the Plant Batch.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/name")]
        public abstract System.Threading.Tasks.Task PutPlantBatchName([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantBatchNameRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Changes the strain of plant batches at a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants â€¢ Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to change the Strain of the Plant Batch.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/strain")]
        public abstract System.Threading.Tasks.Task PutPlantBatchStrain([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantBatchStrainRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Replaces tags for plant batches at a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants â€¢ Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to replace Plant Batch tags.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plantbatches/v2/tag")]
        public abstract System.Threading.Tasks.Task PutPlantBatchTag([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantBatchTagRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PlantsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Removes plants from a Facilityâ€™s inventory while recording the reason for their disposal.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants â€¢ Destroy Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility that intends to destroy the plants.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("plants/v2/")]
        public abstract System.Threading.Tasks.Task DeletePlants([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.DeletePlantsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves additive records applied to plants at a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View/Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to retrieve plant additives.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/additives")]
        public abstract System.Threading.Tasks.Task GetPlantAdditives([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Records additive usage details applied to specific plants at a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record Plant additives.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v2/additives")]
        public abstract System.Threading.Tasks.Task PostPlantAdditives([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantAdditivesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a list of all plant additive types defined within a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/additives/types")]
        public abstract System.Threading.Tasks.Task GetPlantAdditiveTypes();

        /// <remarks>
        /// Retrieves flowering-phase plants at a specified Facility, optionally filtered by last modified date.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of flowering plants.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/flowering")]
        public abstract System.Threading.Tasks.Task GetPlantFlowering([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves the list of growth phases supported by a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of available Plant Growth Phases.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/growthphases")]
        public abstract System.Threading.Tasks.Task GetPlantGrowthPhases([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a Plant by Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Plant will be validated against the specified License Number. If not specified, the Plant will be validated against all of the User's current Facilities. Please note that if the Plant is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/{id}")]
        public abstract System.Threading.Tasks.Task GetPlantById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Retrieves inactive plants at a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of inactive plants.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/inactive")]
        public abstract System.Threading.Tasks.Task GetPlantInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a Plant by label.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="label">Route parameter label</param>
        /// <param name="licenseNumber">If specified, the Plant will be validated against the specified License Number. If not specified, the Plant will be validated against all of the User's current Facilities. Please note that if the Plant is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/{label}")]
        public abstract System.Threading.Tasks.Task GetPlantByLabel(string label, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Retrieves mother-phase plants at a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Mother Plants
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of mother plants.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/mother")]
        public abstract System.Threading.Tasks.Task GetPlantMother([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves inactive mother-phase plants at a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Mother Plants
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of inactive mother plants.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/mother/inactive")]
        public abstract System.Threading.Tasks.Task GetPlantMotherInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves mother-phase plants currently marked as on hold at a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Mother Plants
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of mother plants on hold.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/mother/onhold")]
        public abstract System.Threading.Tasks.Task GetPlantMotherOnHold([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves plants that are currently on hold at a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of plants on hold.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/onhold")]
        public abstract System.Threading.Tasks.Task GetPlantOnHold([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves vegetative-phase plants at a specified Facility, optionally filtered by last modified date.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of vegetating plants.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/vegetative")]
        public abstract System.Threading.Tasks.Task GetPlantVegetative([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a list of recorded plant waste events for a specific Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Plants Waste
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of waste plants.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/waste")]
        public abstract System.Threading.Tasks.Task GetPlantWaste([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Records waste events for plants at a Facility, including method, reason, and location details.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Waste
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record waste.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v2/waste")]
        public abstract System.Threading.Tasks.Task PostPlantWaste([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantWasteRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a list of package records linked to the specified plantWasteId for a given facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Plants Waste
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of waste plants.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/waste/{id}/package")]
        public abstract System.Threading.Tasks.Task GetPlantWasteByIdPackage(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Retrieves a list of plants records linked to the specified plantWasteId for a given facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Plants Waste
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of waste plants.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/waste/{id}/plant")]
        public abstract System.Threading.Tasks.Task GetPlantWasteByIdPlant(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Retrieves a list of all available plant waste methods for use within a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/waste/methods/all")]
        public abstract System.Threading.Tasks.Task GetPlantWasteMethodAll([Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Retriveves available reasons for recording mature plant waste at a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of waste reasons.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v2/waste/reasons")]
        public abstract System.Threading.Tasks.Task GetPlantWasteReasons([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Records additive usage for plants based on their location within a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants â€¢ Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record Plant additives.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v2/additives/bylocation")]
        public abstract System.Threading.Tasks.Task PostPlantAdditiveByLocation([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantAdditiveByLocationRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Records additive usage for plants by location using a predefined additive template at a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record Plant additives.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v2/additives/bylocation/usingtemplate")]
        public abstract System.Threading.Tasks.Task PostPlantAdditiveByLocationUsingtemplate([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantAdditiveByLocationUsingtemplateRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Records additive usage for plants using predefined additive templates at a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record Plant additives.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v2/additives/usingtemplate")]
        public abstract System.Threading.Tasks.Task PostPlantAdditiveUsingtemplate([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantAdditiveUsingtemplateRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Creates harvest product records from plant batches at a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants â€¢ Manicure/Harvest Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record the list of plants manicured.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v2/manicure")]
        public abstract System.Threading.Tasks.Task PostPlantManicure([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantManicureRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Creates packages from plant batches at a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants â€¢ Manage Immature Plants Inventory â€¢ View Veg/Flower Plants â€¢ Manage Veg/Flower Plants Inventory â€¢ View Packages â€¢ Create/Submit/Discontinue Packages
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record the list of Plant Batch packages.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v2/plantbatch/packages")]
        public abstract System.Threading.Tasks.Task PostPlantPlantBatchPackages([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantPlantBatchPackagesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Creates new plant batches at a specified Facility from existing plant data.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants â€¢ Manage Immature Plants Inventory â€¢ View Veg/Flower Plants â€¢ Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record the list of plant batches.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v2/plantings")]
        public abstract System.Threading.Tasks.Task PostPlantPlantings([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantPlantingsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Changes the growth phases of plants within a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants â€¢ Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the list of plants growth phase.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plants/v2/growthphase")]
        public abstract System.Threading.Tasks.Task PutPlantGrowthPhase([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantGrowthPhaseRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Processes whole plant Harvest data for a specific Facility. NOTE: If HarvestName is excluded from the request body, or if it is passed in as null, the harvest name is auto-generated.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants â€¢ Manicure/Harvest Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the list of Plant harvests.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plants/v2/harvest")]
        public abstract System.Threading.Tasks.Task PutPlantHarvest([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantHarvestRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Moves plant batches to new locations within a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants â€¢ Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the list of plants moved.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plants/v2/location")]
        public abstract System.Threading.Tasks.Task PutPlantLocation([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantLocationRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Merges multiple plant groups into a single group within a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants â€¢ Manicure/Harvest Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the list of plants merged.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plants/v2/merge")]
        public abstract System.Threading.Tasks.Task PutPlantMerge([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantMergeRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Splits an existing plant group into multiple groups within a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Plant
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update Plant splits.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plants/v2/split")]
        public abstract System.Threading.Tasks.Task PutPlantSplit([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantSplitRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates the strain information for plants within a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants â€¢ Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the list of Plant strains.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plants/v2/strain")]
        public abstract System.Threading.Tasks.Task PutPlantStrain([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantStrainRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Replaces existing plant tags with new tags for plants within a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants â€¢ Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to upate the list of Plant tags.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plants/v2/tag")]
        public abstract System.Threading.Tasks.Task PutPlantTag([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantTagRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Adjusts the recorded count of plants at a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants â€¢ Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the Plant count.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plants/v2/adjust")]
        public abstract System.Threading.Tasks.Task PutPlantAdjust([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantAdjustRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class ProcessingJobControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Archives a Processing Job at a Facility by marking it as inactive and removing it from active use.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility of the Processing Job.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("processing/v2/{id}")]
        public abstract System.Threading.Tasks.Task DeleteProcessingById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a ProcessingJob by Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the processing job will be validated against the specified License Number. If not specified, the processing job will be validated against all of the User's current Facilities. Please note that if the processing job is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v2/{id}")]
        public abstract System.Threading.Tasks.Task GetProcessingById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Archives a Processing Job Type at a Facility, making it inactive for future use.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility of the Processing Job Type.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("processing/v2/jobtypes/{id}")]
        public abstract System.Threading.Tasks.Task DeleteProcessingJobTypeById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves active processing jobs at a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of active processing jobs.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v2/active")]
        public abstract System.Threading.Tasks.Task GetProcessingActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves inactive processing jobs at a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of inactive processing jobs.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v2/inactive")]
        public abstract System.Threading.Tasks.Task GetProcessingInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a list of all active processing job types defined within a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of active processing job types.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v2/jobtypes/active")]
        public abstract System.Threading.Tasks.Task GetProcessingJobTypeActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves all processing job attributes available for a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of active processing job type attributes.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v2/jobtypes/attributes")]
        public abstract System.Threading.Tasks.Task GetProcessingJobTypeAttributes([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves all processing job categories available for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of processing job type categories.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v2/jobtypes/categories")]
        public abstract System.Threading.Tasks.Task GetProcessingJobTypeCategories([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a list of all inactive processing job types defined within a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of inactive processing job types.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v2/jobtypes/inactive")]
        public abstract System.Threading.Tasks.Task GetProcessingJobTypeInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Adjusts the details of existing processing jobs at a Facility, including units of measure and associated packages.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility to adjust the Processing Job.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("processing/v2/adjust")]
        public abstract System.Threading.Tasks.Task PostProcessingAdjust([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostProcessingAdjustRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Creates packages from processing jobs at a Facility, including optional location and note assignments.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to create the packages.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("processing/v2/createpackages")]
        public abstract System.Threading.Tasks.Task PostProcessingCreatePackages([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostProcessingCreatePackagesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Creates new processing job types for a Facility, including name, category, description, steps, and attributes.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility of the Job Type.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("processing/v2/jobtypes")]
        public abstract System.Threading.Tasks.Task PostProcessingJobTypes([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostProcessingJobTypesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates existing processing job types at a Facility, including their name, category, description, steps, and attributes.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the processing job types.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("processing/v2/jobtypes")]
        public abstract System.Threading.Tasks.Task PutProcessingJobTypes([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutProcessingJobTypesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Initiates new processing jobs at a Facility, including job details and associated packages.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility to start the Processing Job.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("processing/v2/start")]
        public abstract System.Threading.Tasks.Task PostProcessingStart([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostProcessingStartRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Completes processing jobs at a Facility by recording final notes and waste measurements.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility to finish the Processing Job.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("processing/v2/finish")]
        public abstract System.Threading.Tasks.Task PutProcessingFinish([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutProcessingFinishRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Reopens previously completed processing jobs at a Facility to allow further updates or corrections.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility to unfinish the Processing Job.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("processing/v2/unfinish")]
        public abstract System.Threading.Tasks.Task PutProcessingUnfinish([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutProcessingUnfinishRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class RetailIdControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Get a list of eaches (Retail ID QR code URL) and sibling tags based on given Package label.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: External Sources(ThirdPartyVendorV2)/Manage RetailId â€¢ WebApi Retail ID Read Write State (All or ReadOnly) â€¢ Industry/View Packages â€¢ One of the following: Industry/Facility Type/Can Receive Associate Product Label, Licensee/Receive Associate Product Label or Admin/Employees/Packages Page/Product Labels(View or Manage)
        /// </remarks>
        /// <param name="label">Route parameter label</param>
        /// <param name="licenseNumber">If specified, the Package will be validated against the specified License Number. If not specified, the Package will be validated against all of the User's current Facilities.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("retailid/v2/receive/{label}")]
        public abstract System.Threading.Tasks.Task GetRetailidReceiveByLabel(string label, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Get a list of eaches (Retail ID QR code URL) and sibling tags based on given short code value (first segment in Retail ID QR code URL).&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: External Sources(ThirdPartyVendorV2)/Manage RetailId â€¢ WebApi Retail ID Read Write State (All or ReadOnly) â€¢ Industry/View Packages â€¢ One of the following: Industry/Facility Type/Can Receive Associate Product Label, Licensee/Receive Associate Product Label or Admin/Employees/Packages Page/Product Labels(View or Manage)
        /// </remarks>
        /// <param name="shortCode">Route parameter shortCode</param>
        /// <param name="licenseNumber">The License Number of the Facility</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("retailid/v2/receive/qr/{shortCode}")]
        public abstract System.Threading.Tasks.Task GetRetailidReceiveQr(string shortCode, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Facilitate association of QR codes and Package labels. This will return the count of packages and QR codes associated that were added or replaced.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: External Sources(ThirdPartyVendorV2)/Retail ID(Write) â€¢ WebApi Retail ID Read Write State (All or WriteOnly) â€¢ Industry/View Packages â€¢ One of the following: Industry/Facility Type/Can Receive Associate Product Label, Licensee/Receive Associate Product Label or Admin/Employees/Packages Page/Product Labels(Manage)
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to associate the packages and QR codes provided.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("retailid/v2/associate")]
        public abstract System.Threading.Tasks.Task PostRetailidAssociate([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostRetailidAssociateRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Allows you to generate a specific quantity of QR codes. Id value returned (issuance ID) could be used for printing.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: External Sources(ThirdPartyVendorV2)/Retail ID(Write) â€¢ WebApi Retail ID Read Write State (All or WriteOnly) â€¢ Industry/View Packages â€¢ One of the following: Industry/Facility Type/Can Download Product Label, Licensee/Download Product Label or Admin/Employees/Packages Page/Product Labels(Manage)
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to associate the packages and QR codes provided.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("retailid/v2/generate")]
        public abstract System.Threading.Tasks.Task PostRetailidGenerate([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostRetailidGenerateRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Merge and adjust one source to one target Package. First Package detected will be processed as target Package. This requires an action reason with name containing the 'Merge' word and setup with 'Package adjustment' area.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: External Sources(ThirdPartyVendorV2)/Retail ID(Write) â€¢ WebApi Retail ID Read Write State (All or WriteOnly) â€¢ Key Value Settings/Retail ID Merge Packages Enabled
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("retailid/v2/merge")]
        public abstract System.Threading.Tasks.Task PostRetailidMerge([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostRetailidMergeRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves Package information for given list of Package labels.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: External Sources(ThirdPartyVendorV2)/Retail ID(Write) â€¢ WebApi Retail ID Read Write State (All or WriteOnly) â€¢ Industry/View Packages â€¢ Admin/Employees/Packages Page/Product Labels(Manage)
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("retailid/v2/packages/info")]
        public abstract System.Threading.Tasks.Task PostRetailidPackageInfo([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostRetailidPackageInfoRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class SalesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Voids a sales delivery for a Facility using the provided License Number and delivery Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales Delivery
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for which to void delivery.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/{id}")]
        public abstract System.Threading.Tasks.Task DeleteSaleDeliveryById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a sales delivery record by its Id, with an optional License Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Sales Delivery â€¢ Manage Sales Delivery
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Sales Delivery will be validated against the specified License Number. If not specified, the Sales Delivery will be validated against all of the User's current Facilities. Please note that if the Sales Delivery is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/{id}")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Voids a retailer delivery for a Facility using the provided License Number and delivery Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: External Sources(ThirdPartyVendorV2)/Sales Deliveries(Write) â€¢ Industry/Facility Type/Retailer Delivery â€¢ Industry/Facility Type/Consumer Sales Delivery or Industry/Facility Type/Patient Sales Delivery â€¢ WebApi Sales Deliveries Read Write State (All or WriteOnly) â€¢ Manage Retailer Delivery
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for which to void retailer delivery.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/retailer/{id}")]
        public abstract System.Threading.Tasks.Task DeleteSaleDeliveryRetailerById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a retailer delivery record by its ID, with an optional License Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Retailer Delivery â€¢ Manage Retailer Delivery
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Sales Delivery will be validated against the specified License Number. If not specified, the Sales Delivery will be validated against all of the User's current Facilities. Please note that if the Sales Delivery is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/retailer/{id}")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryRetailerById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Archives a sales receipt for a Facility using the provided License Number and receipt Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for which to archive receipt.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("sales/v2/receipts/{id}")]
        public abstract System.Threading.Tasks.Task DeleteSaleReceiptById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a sales receipt by its Id, with an optional License Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Sales â€¢ Manage Sales
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Sales Receipt will be validated against the specified License Number. If not specified, the Sales Receipt will be validated against all of the User's current Facilities. Please note that if the Sales Receipt is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/receipts/{id}")]
        public abstract System.Threading.Tasks.Task GetSaleReceiptById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Returns a list of counties available for sales deliveries.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/counties")]
        public abstract System.Threading.Tasks.Task GetSaleCounties();

        /// <remarks>
        /// Returns a list of customer types.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/customertypes")]
        public abstract System.Threading.Tasks.Task GetSaleCustomerTypes();

        /// <remarks>
        /// Returns a list of active sales deliveries for a Facility, filtered by optional sales or last modified date ranges.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Sales Delivery â€¢ Manage Sales Delivery
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of active deliveries.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/active")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateEnd = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Returns a list of inactive sales deliveries for a Facility, filtered by optional sales or last modified date ranges.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Sales Delivery â€¢ Manage Sales Delivery
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of inactive deliveries.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/inactive")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateEnd = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Returns a list of active retailer deliveries for a Facility, optionally filtered by last modified date range&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Retailer Delivery â€¢ Manage Retailer Delivery
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return active retailer deliveries.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/retailer/active")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryRetailerActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Returns a list of inactive retailer deliveries for a Facility, optionally filtered by last modified date range&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Retailer Delivery â€¢ Manage Retailer Delivery
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return inactive retailer deliveries.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/retailer/inactive")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryRetailerInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Returns a list of return reasons for sales deliveries based on the provided License Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of delivery return reasons.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/returnreasons")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryReturnReasons([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Returns a list of valid Patient registration locations for sales.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;:
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/patientregistration/locations")]
        public abstract System.Threading.Tasks.Task GetSalePatientRegistrationLocations();

        /// <remarks>
        /// Returns a list of available payment types for the specified License Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Sales Delivery â€¢ Manage Sales Delivery
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of payment types.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/paymenttypes")]
        public abstract System.Threading.Tasks.Task GetSalePaymentTypes([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Returns a list of active sales receipts for a Facility, filtered by optional sales or last modified date ranges.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Sales â€¢ Manage Sales
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of active receipts.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/receipts/active")]
        public abstract System.Threading.Tasks.Task GetSaleReceiptActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateEnd = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a Sales Receipt by its external number, with an optional License Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Sales â€¢ Manage Sales
        /// </remarks>
        /// <param name="externalNumber">Route parameter externalNumber</param>
        /// <param name="licenseNumber">If specified, the External Sales Receipt Number will be validated against the specified License Number. If not specified, the External Sales Receipt Number will be validated against all of the User's current Facilities. Please note that if the External Sales Receipt Number is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/receipts/external/{externalNumber}")]
        public abstract System.Threading.Tasks.Task GetSaleReceiptExternal(string externalNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Returns a list of inactive sales receipts for a Facility, filtered by optional sales or last modified date ranges.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: View Sales â€¢ Manage Sales
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of inactive receipts.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v2/receipts/inactive")]
        public abstract System.Threading.Tasks.Task GetSaleReceiptInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateEnd = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Records new sales delivery entries for a given License Number. Please note: The SalesDateTime field must be the actual date and time of the transaction without the time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be in Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: External Sources(ThirdPartyVendorV2)/Sales Deliveries(Write) â€¢ Industry/Facility Type/Consumer Sales Delivery or Industry/Facility Type/Patient Sales Delivery â€¢ WebApi Sales Deliveries Read Write State (All or WriteOnly) â€¢ WebApi Retail ID Read Write State (All or WriteOnly) - Required for RID only. â€¢ External Sources(ThirdPartyVendorV2)/Retail ID(Write) - Required for RID only.
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record deliveries.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveries([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleDeliveriesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates sales delivery records for a given License Number. Please note: The SalesDateTime field must be the actual date and time of the transaction without the time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be in Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales Delivery
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update deliveries.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveries([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveriesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Records retailer delivery data for a given License Number, including delivery destinations. Please note: The DateTime field must be the actual date and time of the transaction without the time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be in Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: External Sources(ThirdPartyVendorV2)/Sales Deliveries(Write) â€¢ Industry/Facility Type/Retailer Delivery â€¢ Industry/Facility Type/Consumer Sales Delivery or Industry/Facility Type/Patient Sales Delivery â€¢ WebApi Sales Deliveries Read Write State (All or WriteOnly) â€¢ WebApi Retail ID Read Write State (All or WriteOnly) - Required for RID only. â€¢ External Sources(ThirdPartyVendorV2)/Retail ID(Write) - Required for RID only. â€¢ Manage Retailer Delivery
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record retailer deliveries.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/retailer")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveryRetailer([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleDeliveryRetailerRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates retailer delivery records for a given License Number. Please note: The DateTime field must be the actual date and time of the transaction without the time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be in Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: External Sources(ThirdPartyVendorV2)/Sales Deliveries(Write) â€¢ Industry/Facility Type/Retailer Delivery â€¢ Industry/Facility Type/Consumer Sales Delivery or Industry/Facility Type/Patient Sales Delivery â€¢ WebApi Sales Deliveries Read Write State (All or WriteOnly) â€¢ WebApi Retail ID Read Write State (All or WriteOnly) - Required for RID only. â€¢ External Sources(ThirdPartyVendorV2)/Retail ID(Write) - Required for RID only. â€¢ Manage Retailer Delivery
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update retailer deliveries.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/retailer")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryRetailer([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveryRetailerRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Processes the departure of retailer deliveries for a Facility using the provided License Number and delivery data.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: External Sources(ThirdPartyVendorV2)/Sales Deliveries(Write) â€¢ Industry/Facility Type/Retailer Delivery â€¢ Industry/Facility Type/Consumer Sales Delivery or Industry/Facility Type/Patient Sales Delivery â€¢ WebApi Sales Deliveries Read Write State (All or WriteOnly) â€¢ Manage Retailer Delivery
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record depart delivery.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/retailer/depart")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveryRetailerDepart([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleDeliveryRetailerDepartRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Ends retailer delivery records for a given License Number. Please note: The ActualArrivalDateTime field must be the actual date and time of the transaction without the time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be in Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: External Sources(ThirdPartyVendorV2)/Sales Deliveries(Write) â€¢ Industry/Facility Type/Retailer Delivery â€¢ Industry/Facility Type/Consumer Sales Delivery or Industry/Facility Type/Patient Sales Delivery â€¢ WebApi Sales Deliveries Read Write State (All or WriteOnly) â€¢ Manage Retailer Delivery
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record end retailer deliveries.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/retailer/end")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveryRetailerEnd([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleDeliveryRetailerEndRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Records restock deliveries for retailer facilities using the provided License Number. Please note: The DateTime field must be the actual date and time of the transaction without the time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be in Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: External Sources(ThirdPartyVendorV2)/Sales Deliveries(Write) â€¢ Industry/Facility Type/Retailer Delivery â€¢ Industry/Facility Type/Consumer Sales Delivery or Industry/Facility Type/Patient Sales Delivery â€¢ WebApi Sales Deliveries Read Write State (All or WriteOnly) â€¢ Manage Retailer Delivery
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record restock retailer deliveries.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/retailer/restock")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveryRetailerRestock([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleDeliveryRetailerRestockRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Records sales deliveries originating from a retailer delivery for a given License Number. Please note: The SalesDateTime field must be the actual date and time of the transaction without the time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be in Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: External Sources(ThirdPartyVendorV2)/Sales Deliveries(Write) â€¢ Industry/Facility Type/Retailer Delivery â€¢ Industry/Facility Type/Consumer Sales Delivery or Industry/Facility Type/Patient Sales Delivery â€¢ WebApi Sales Deliveries Read Write State (All or WriteOnly) â€¢ WebApi Retail ID Read Write State (All or WriteOnly) - Required for RID only. â€¢ External Sources(ThirdPartyVendorV2)/Retail ID(Write) - Required for RID only.
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record sale from retailer delivery.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/retailer/sale")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveryRetailerSale([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleDeliveryRetailerSaleRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Records a list of sales deliveries for a given License Number. Please note: The SalesDateTime field must be the actual date and time of the transaction without the time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be in Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: External Sources(ThirdPartyVendorV2)/Sales (Write) â€¢ Industry/Facility Type/Consumer Sales or Industry/Facility Type/Patient Sales or Industry/Facility Type/External Patient Sales or Industry/Facility Type/Caregiver Sales â€¢ Industry/Facility Type/Advanced Sales â€¢ WebApi Sales Read Write State (All or WriteOnly) â€¢ WebApi Retail ID Read Write State (All or WriteOnly) - Required for RID only. â€¢ External Sources(ThirdPartyVendorV2)/Retail ID(Write) - Required for RID only.
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record receipts.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v2/receipts")]
        public abstract System.Threading.Tasks.Task PostSaleReceipts([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleReceiptsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates sales receipt records for a given License Number. Please note: The SalesDateTime field must be the actual date and time of the transaction without the time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be in Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update receipts.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v2/receipts")]
        public abstract System.Threading.Tasks.Task PutSaleReceipts([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleReceiptsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Completes a list of sales deliveries for a Facility using the provided License Number and delivery data.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales Delivery
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update deliveries completed.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/complete")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryComplete([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveryCompleteRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates hub transporter details for a given License Number. Please note: The SalesDateTime field must be the actual date and time of the transaction without the time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be in Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales Delivery, Manage Sales Delivery Hub
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update hub transporters.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/hub")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryHub([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveryHubRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Accepts a list of hub sales deliveries for a Facility based on the provided License Number and delivery data.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales Delivery Hub
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update hub deliveries accepted.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/hub/accept")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryHubAccept([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveryHubAcceptRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Processes the departure of hub sales deliveries for a Facility using the provided License Number and delivery data.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales Delivery Hub
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update hub delivery departures.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/hub/depart")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryHubDepart([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveryHubDepartRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Verifies identification for a list of hub sales deliveries using the provided License Number and delivery data.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales Delivery Hub
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update hub delivery Id's.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v2/deliveries/hub/verifyID")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryHubVerifyId([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveryHubVerifyIdRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Finalizes a list of sales receipts for a Facility using the provided License Number and receipt data.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update finalized receipts.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v2/receipts/finalize")]
        public abstract System.Threading.Tasks.Task PutSaleReceiptFinalize([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleReceiptFinalizeRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Unfinalizes a list of sales receipts for a Facility using the provided License Number and receipt data.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Sales
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update unfinalized receipts.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v2/receipts/unfinalize")]
        public abstract System.Threading.Tasks.Task PutSaleReceiptUnfinalize([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleReceiptUnfinalizeRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class SandboxControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// This endpoint is used to handle the setup of an external integrator for sandbox environments. It processes a request to create a new sandbox user for integration based on an external source's API key. It checks whether the API key is valid, manages the user creation process, and returns an appropriate status based on the current state of the request.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="userKey">An existing user key to reuse for integrator setup. Provide this if you already have a user key that you want to continue using. If you don't already have a user key, or you would like a new one, do not provide a value.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sandbox/v2/integrator/setup")]
        public abstract System.Threading.Tasks.Task PostSandboxIntegratorSetup([Microsoft.AspNetCore.Mvc.FromQuery] string? userKey = null);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class StrainsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Archives an existing strain record for a Facility&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for which Strain to delete.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("strains/v2/{id}")]
        public abstract System.Threading.Tasks.Task DeleteStrainById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a Strain record by its Id, with an optional license number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Strain will be validated against the specified License Number. If not specified, the Strain will be validated against all of the User's current Facilities. Please note that if the Strain is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("strains/v2/{id}")]
        public abstract System.Threading.Tasks.Task GetStrainById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Retrieves a list of active strains for the current Facility, optionally filtered by last modified date range.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of active strains.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("strains/v2/active")]
        public abstract System.Threading.Tasks.Task GetStrainActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a list of inactive strains for the current Facility, optionally filtered by last modified date range.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of inactive strains.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("strains/v2/inactive")]
        public abstract System.Threading.Tasks.Task GetStrainInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Creates new strain records for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record the list of strains.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("strains/v2/")]
        public abstract System.Threading.Tasks.Task PostStrains([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostStrainsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates existing strain records for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the list of strains.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("strains/v2/")]
        public abstract System.Threading.Tasks.Task PutStrains([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutStrainsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class SublocationsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Archives an existing Sublocation record for a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for which to delete the list of sublocations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("sublocations/v2/{id}")]
        public abstract System.Threading.Tasks.Task DeleteSublocationById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a Sublocation by its Id, with an optional license number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Sublocation will be validated against the specified License Number. If not specified, the Sublocation will be validated against all of the User's current Facilities. Please note that if the Sublocation is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sublocations/v2/{id}")]
        public abstract System.Threading.Tasks.Task GetSublocationById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// Retrieves a list of active sublocations for the current Facility, optionally filtered by last modified date range.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of active sublocations.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The Last Modified start timestamp</param>
        /// <param name="lastModifiedEnd">The Last Modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sublocations/v2/active")]
        public abstract System.Threading.Tasks.Task GetSublocationActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a list of inactive sublocations for the specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of inactive sublocations.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sublocations/v2/inactive")]
        public abstract System.Threading.Tasks.Task GetSublocationInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Creates new sublocation records for a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to record the list of sublocations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sublocations/v2/")]
        public abstract System.Threading.Tasks.Task PostSublocations([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSublocationsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates existing sublocation records for a specified Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the list of sublocations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sublocations/v2/")]
        public abstract System.Threading.Tasks.Task PutSublocations([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSublocationsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class TagsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Returns a list of available package tags. NOTE: This is a premium endpoint.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: WebApi Tags Read Write State (All or WriteOnly)
        /// </remarks>
        /// <param name="licenseNumber">The License Number for which to return available Package tags.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("tags/v2/package/available")]
        public abstract System.Threading.Tasks.Task GetTagPackageAvailable([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Returns a list of available plant tags. NOTE: This is a premium endpoint.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: WebApi Tags Read Write State (All or WriteOnly)
        /// </remarks>
        /// <param name="licenseNumber">The License Number for which to return available tags.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("tags/v2/plant/available")]
        public abstract System.Threading.Tasks.Task GetTagPlantAvailable([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Returns a list of staged tags. NOTE: This is a premium endpoint.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: WebApi Tags Read Write State (All or WriteOnly) â€¢ RetailId.AllowPackageStaging Key Value enabled
        /// </remarks>
        /// <param name="licenseNumber">The License Number for which to return staged tags.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("tags/v2/staged")]
        public abstract System.Threading.Tasks.Task GetTagStaged([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class TransfersControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Voids an external incoming shipment plan for a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for which to void the Transfer.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("transfers/v2/external/incoming/{id}")]
        public abstract System.Threading.Tasks.Task DeleteTransferExternalIncomingById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Archives a transfer template for a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for which to archive the template.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("transfers/v2/templates/outgoing/{id}")]
        public abstract System.Threading.Tasks.Task DeleteTransferTemplateOutgoingById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a list of packages associated with a given Transfer Delivery Id. Please note: The {id} parameter above represents a Transfer Delivery Id, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers â€¢ View Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/deliveries/{id}/packages")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryByIdPackages(long id, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Retrieves a list of wholesale shipment packages for a given Transfer Delivery Id. Please note: The {id} parameter above represents a Transfer Delivery Id, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers â€¢ View Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/deliveries/{id}/packages/wholesale")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryByIdPackageWholesale(long id, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Retrieves a list of transporters for a given Transfer Delivery Id. Please note: The {id} parameter above represents a Transfer Delivery Id, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers â€¢ View Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/deliveries/{id}/transporters")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryByIdTransporters(long id, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Retrieves a list of transporter details for a given Transfer Delivery Id. Please note: The {id} parameter above represents a Transfer Delivery Id, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers â€¢ View Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/deliveries/{id}/transporters/details")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryByIdTransporterDetails(long id, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Returns a list of available shipment Package states.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/deliveries/packages/states")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryPackageStates();

        /// <remarks>
        /// Retrieves a list of required lab test batches for a given Transfer Delivery Package Id. Please note: The {id} parameter above represents a Transfer Delivery Package Id, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers â€¢ View Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/deliveries/package/{id}/requiredlabtestbatches")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryPackageByIdRequiredLabTestBatches(long id, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Retrieves a list of transfer hub shipments for a Facility, filtered by either last modified or estimated arrival date range.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers â€¢ View Transfers
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return shipment plans.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the estimated arrival date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the estimated arrival date parameters will result in an error.</param>
        /// <param name="estimatedArrivalStart">The estimated arrival date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="estimatedArrivalEnd">The estimated arrival date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/hub")]
        public abstract System.Threading.Tasks.Task GetTransferHub([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? estimatedArrivalStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? estimatedArrivalEnd = null);

        /// <remarks>
        /// Retrieves a list of shipment deliveries for a given Transfer Id. Please note: The {id} parameter above represents a Transfer Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers â€¢ View Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/{id}/deliveries")]
        public abstract System.Threading.Tasks.Task GetTransferByIdDeliveries(long id, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Retrieves a list of incoming shipments for a Facility, optionally filtered by last modified date range.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers â€¢ View Transfers
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return incoming transfers.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/incoming")]
        public abstract System.Threading.Tasks.Task GetTransferIncoming([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a list of outgoing shipments for a Facility, optionally filtered by last modified date range.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers â€¢ View Transfers
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return outgoing transfers.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/outgoing")]
        public abstract System.Threading.Tasks.Task GetTransferOutgoing([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Retrieves a list of shipments with rejected packages for a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers â€¢ View Transfers
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return rejected transfers.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/rejected")]
        public abstract System.Threading.Tasks.Task GetTransferRejected([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Retrieves a list of transfer templates for a Facility, optionally filtered by last modified date range.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfer Templates â€¢ View Transfer Templates
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return outgoing shipment templates.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/templates/outgoing")]
        public abstract System.Threading.Tasks.Task GetTransferTemplateOutgoing([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// Creates new transfer templates for a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfer Templates
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to create a Shipment Template.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("transfers/v2/templates/outgoing")]
        public abstract System.Threading.Tasks.Task PostTransferTemplateOutgoing([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostTransferTemplateOutgoingRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates existing transfer templates for a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfer Templates
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update shipment plan templates.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("transfers/v2/templates/outgoing")]
        public abstract System.Threading.Tasks.Task PutTransferTemplateOutgoing([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutTransferTemplateOutgoingRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a list of delivery package templates for a given Transfer Template Delivery Id. Please note: The {id} parameter above represents a Transfer Template Delivery Id, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfer Templates â€¢ View Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/templates/outgoing/deliveries/{id}/packages")]
        public abstract System.Threading.Tasks.Task GetTransferTemplateOutgoingDeliveryByIdPackages(long id, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Retrieves a list of transporter templates for a given Transfer Template Delivery Id. Please note: The {id} parameter above represents a Transfer Template Delivery Id, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfer Templates â€¢ View Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/templates/outgoing/deliveries/{id}/transporters")]
        public abstract System.Threading.Tasks.Task GetTransferTemplateOutgoingDeliveryByIdTransporters(long id, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Retrieves detailed transporter templates for a given Transfer Template Delivery Id. Please note: The {id} parameter above represents a Transfer Template Delivery Id, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfer Templates â€¢ View Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/templates/outgoing/deliveries/{id}/transporters/details")]
        public abstract System.Threading.Tasks.Task GetTransferTemplateOutgoingDeliveryByIdTransporterDetails(long id);

        /// <remarks>
        /// Retrieves a list of deliveries associated with a specific transfer template.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfer Templates â€¢ View Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/templates/outgoing/{id}/deliveries")]
        public abstract System.Threading.Tasks.Task GetTransferTemplateOutgoingByIdDeliveries(long id, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Retrieves a list of available transfer types for a Facility based on its license number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return transfer types.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v2/types")]
        public abstract System.Threading.Tasks.Task GetTransferTypes([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Creates external incoming shipment plans for a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers
        /// </remarks>
        /// <param name="licenseNumber">The License Number for which to create a Shipment Plan.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("transfers/v2/external/incoming")]
        public abstract System.Threading.Tasks.Task PostTransferExternalIncoming([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostTransferExternalIncomingRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates external incoming shipment plans for a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transfers
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update external incoming shipment plans.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("transfers/v2/external/incoming")]
        public abstract System.Threading.Tasks.Task PutTransferExternalIncoming([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutTransferExternalIncomingRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class TransportersControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Archives a Driver record for a Facility.  Please note: The {id} parameter above represents a Driver Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transporters
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for which to archive a Driver.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("transporters/v2/drivers/{id}")]
        public abstract System.Threading.Tasks.Task DeleteTransporterDriverById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a Driver by its Id, with an optional license number. Please note: The {id} parameter above represents a Driver Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transporters
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for which to return a Driver.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transporters/v2/drivers/{id}")]
        public abstract System.Threading.Tasks.Task GetTransporterDriverById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Archives a Vehicle for a facility.  Please note: The {id} parameter above represents a Vehicle Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transporters
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number for which to archive a Vehicle</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("transporters/v2/vehicles/{id}")]
        public abstract System.Threading.Tasks.Task DeleteTransporterVehicleById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a Vehicle by its Id, with an optional license number. Please note: The {id} parameter above represents a Vehicle Id.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transporters
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The License Number of the Facility for which to return a Vehicle.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transporters/v2/vehicles/{id}")]
        public abstract System.Threading.Tasks.Task GetTransporterVehicleById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a list of drivers for a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transporters
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of drivers.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transporters/v2/drivers")]
        public abstract System.Threading.Tasks.Task GetTransporterDrivers([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Creates new driver records for a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transporters
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to create a Driver.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("transporters/v2/drivers")]
        public abstract System.Threading.Tasks.Task PostTransporterDrivers([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostTransporterDriversRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates existing driver records for a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transporters
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the list of drivers.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("transporters/v2/drivers")]
        public abstract System.Threading.Tasks.Task PutTransporterDrivers([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutTransporterDriversRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Retrieves a list of vehicles for a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transporters
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to return the list of vehicles.</param>
        /// <param name="pageNumber">The number of the data page from which to return data.</param>
        /// <param name="pageSize">The number of records to return per page. Pagination is currently disabled by default. You can enable pagination on this query by specifying a value that does not exceed 20.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transporters/v2/vehicles")]
        public abstract System.Threading.Tasks.Task GetTransporterVehicles([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize = null);

        /// <remarks>
        /// Creates new vehicle records for a Facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transporters
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to create a Vehicle.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("transporters/v2/vehicles")]
        public abstract System.Threading.Tasks.Task PostTransporterVehicles([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostTransporterVehiclesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Updates existing vehicle records for a facility.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Manage Transporters
        /// </remarks>
        /// <param name="licenseNumber">The License Number of the Facility for which to update the list of vehicles.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("transporters/v2/vehicles")]
        public abstract System.Threading.Tasks.Task PutTransporterVehicles([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutTransporterVehiclesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class UnitsOfMeasureControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Retrieves all active units of measure.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("unitsofmeasure/v2/active")]
        public abstract System.Threading.Tasks.Task GetUnitOfMeasureActive();

        /// <remarks>
        /// Retrieves all inactive units of measure.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("unitsofmeasure/v2/inactive")]
        public abstract System.Threading.Tasks.Task GetUnitOfMeasureInactive();

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class WasteMethodsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Retrieves all available waste methods.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("wastemethods/v2/")]
        public abstract System.Threading.Tasks.Task GetWasteMethods();

    }

    


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore  649
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
#pragma warning restore 8765