//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;
using OpenMetrc.Builder.Domain;
using OpenMetrc.Builder.Domain.Requests;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace OpenMetrc.V1.Builder.Controllers
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class CaregiversStatusControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Data returned by this endpoint is cached for up to one minute.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Lookup Caregivers
        /// </remarks>
        /// <param name="caregiverLicenseNumber">Route parameter caregiverLicenseNumber</param>
        /// <param name="licenseNumber">The license number of the Facility under which to get the Caregiver status.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("caregivers/v1/status/{caregiverLicenseNumber}")]
        public abstract System.Threading.Tasks.Task GetCaregiverStatus(string caregiverLicenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class EmployeesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Employees
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("employees/v1/")]
        public abstract System.Threading.Tasks.Task GetEmployees([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class FacilitiesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// A Facility represents a building licensed for the growing, processing, and/or selling of product.
        /// </summary>
        /// <remarks>
        /// This endpoint provides a list of facilities for which the authenticated user has access.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("facilities/v1/")]
        public abstract System.Threading.Tasks.Task GetFacilities();

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class HarvestsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active harvests.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v1/active")]
        public abstract System.Threading.Tasks.Task GetHarvestActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v1/{id}")]
        public abstract System.Threading.Tasks.Task GetHarvestById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive harvests.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v1/inactive")]
        public abstract System.Threading.Tasks.Task GetHarvestInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of harvests on hold.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v1/onhold")]
        public abstract System.Threading.Tasks.Task GetHarvestOnHold([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("harvests/v1/waste/types")]
        public abstract System.Threading.Tasks.Task GetHarvestWasteTypes();

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests • Manage Harvests • View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("harvests/v1/create/packages")]
        public abstract System.Threading.Tasks.Task PostHarvestCreatePackages([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostHarvestCreatePackagesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests • Manage Harvests • View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("harvests/v1/create/packages/testing")]
        public abstract System.Threading.Tasks.Task PostHarvestCreatePackageTesting([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostHarvestCreatePackageTestingRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests • Finish/Discontinue Harvests
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("harvests/v1/finish")]
        public abstract System.Threading.Tasks.Task PostHarvestFinish([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostHarvestFinishRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests • Manage Harvests
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("harvests/v1/removewaste")]
        public abstract System.Threading.Tasks.Task PostHarvestRemoveWaste([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostHarvestRemoveWasteRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests • Finish/Discontinue Harvests
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("harvests/v1/unfinish")]
        public abstract System.Threading.Tasks.Task PostHarvestUnfinish([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostHarvestUnfinishRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests • Manage Harvests
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("harvests/v1/move")]
        public abstract System.Threading.Tasks.Task PutHarvestMove([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutHarvestMoveRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests • Manage Harvests
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("harvests/v1/rename")]
        public abstract System.Threading.Tasks.Task PutHarvestRename([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutHarvestRenameRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class ItemsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("items/v1/{id}")]
        public abstract System.Threading.Tasks.Task DeleteItemById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Item will be validated against the specified License Number. If not specified, the Item will be validated against all of the User's current Facilities. Please note that if the Item is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v1/{id}")]
        public abstract System.Threading.Tasks.Task GetItemById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v1/active")]
        public abstract System.Threading.Tasks.Task GetItemActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active item brands.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v1/brands")]
        public abstract System.Threading.Tasks.Task GetItemBrands([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Categories will be retrived for the specified License Number. If not specified, the all Item Categories will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v1/categories")]
        public abstract System.Threading.Tasks.Task GetItemCategories([Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v1/inactive")]
        public abstract System.Threading.Tasks.Task GetItemInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The file system id of the image to return.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("items/v1/photo/{id}")]
        public abstract System.Threading.Tasks.Task GetItemPhotoById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("items/v1/create")]
        public abstract System.Threading.Tasks.Task PostItemCreate([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostItemCreateRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("items/v1/photo")]
        public abstract System.Threading.Tasks.Task PostItemPhoto([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostItemPhotoRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("items/v1/update")]
        public abstract System.Threading.Tasks.Task PostItemUpdate([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostItemUpdateRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class LabTestsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">LabTestDocumentFileId</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("labtests/v1/labtestdocument/{id}")]
        public abstract System.Threading.Tasks.Task GetLabTestLabTestDocumentById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("labtests/v1/results")]
        public abstract System.Threading.Tasks.Task GetLabTestResults([Microsoft.AspNetCore.Mvc.FromQuery] long packageId, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("labtests/v1/states")]
        public abstract System.Threading.Tasks.Task GetLabTestStates();

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("labtests/v1/types")]
        public abstract System.Threading.Tasks.Task GetLabTestTypes();

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("labtests/v1/record")]
        public abstract System.Threading.Tasks.Task PostLabTestRecord([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostLabTestRecordRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("labtests/v1/labtestdocument")]
        public abstract System.Threading.Tasks.Task PutLabTestLabTestDocument([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutLabTestLabTestDocumentRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("labtests/v1/results/release")]
        public abstract System.Threading.Tasks.Task PutLabTestResultRelease([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutLabTestResultReleaseRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class LocationsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("locations/v1/{id}")]
        public abstract System.Threading.Tasks.Task DeleteLocationById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Location will be validated against the specified License Number. If not specified, the Location will be validated against all of the User's current Facilities. Please note that if the Location is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("locations/v1/{id}")]
        public abstract System.Threading.Tasks.Task GetLocationById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active locations.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("locations/v1/active")]
        public abstract System.Threading.Tasks.Task GetLocationActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active location types.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("locations/v1/types")]
        public abstract System.Threading.Tasks.Task GetLocationTypes([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("locations/v1/create")]
        public abstract System.Threading.Tasks.Task PostLocationCreate([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostLocationCreateRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("locations/v1/update")]
        public abstract System.Threading.Tasks.Task PostLocationUpdate([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostLocationUpdateRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PackagesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active packages.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v1/active")]
        public abstract System.Threading.Tasks.Task GetPackageActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v1/adjust/reasons")]
        public abstract System.Threading.Tasks.Task GetPackageAdjustReasons([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Package will be validated against the specified License Number. If not specified, the Package will be validated against all of the User's current Facilities. Please note that if the Package is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v1/{id}")]
        public abstract System.Threading.Tasks.Task GetPackageById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive packages.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v1/inactive")]
        public abstract System.Threading.Tasks.Task GetPackageInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="label">Route parameter label</param>
        /// <param name="licenseNumber">If specified, the Package will be validated against the specified License Number. If not specified, the Package will be validated against all of the User's current Facilities. Please note that if the Package is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v1/{label}")]
        public abstract System.Threading.Tasks.Task GetPackageByLabel(string label, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of packages on hold.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v1/onhold")]
        public abstract System.Threading.Tasks.Task GetPackageOnHold([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packages/v1/types")]
        public abstract System.Threading.Tasks.Task GetPackageTypes();

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v1/adjust")]
        public abstract System.Threading.Tasks.Task PostPackageAdjust([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPackageAdjustRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v1/change/item")]
        public abstract System.Threading.Tasks.Task PostPackageChangeItem([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPackageChangeItemRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v1/change/locations")]
        public abstract System.Threading.Tasks.Task PostPackageChangeLocations([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPackageChangeLocationsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v1/create")]
        public abstract System.Threading.Tasks.Task PostPackageCreate([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPackageCreateRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants • View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v1/create/plantings")]
        public abstract System.Threading.Tasks.Task PostPackageCreatePlantings([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPackageCreatePlantingsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v1/create/testing")]
        public abstract System.Threading.Tasks.Task PostPackageCreateTesting([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPackageCreateTestingRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v1/finish")]
        public abstract System.Threading.Tasks.Task PostPackageFinish([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPackageFinishRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v1/remediate")]
        public abstract System.Threading.Tasks.Task PostPackageRemediate([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPackageRemediateRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packages/v1/unfinish")]
        public abstract System.Threading.Tasks.Task PostPackageUnfinish([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPackageUnfinishRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory • Manage Package Notes
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("packages/v1/change/note")]
        public abstract System.Threading.Tasks.Task PutPackageChangeNote([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPackageChangeNoteRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PatientCheckInsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManagePatientsCheckIns
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("patient-checkins/v1/{id}")]
        public abstract System.Threading.Tasks.Task DeletePatientCheckInById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManagePatientsCheckIns
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("patient-checkins/v1/")]
        public abstract System.Threading.Tasks.Task GetPatientCheckIns([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] DateOnly? checkinDateStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] DateOnly? checkinDateEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManagePatientsCheckIns
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("patient-checkins/v1/")]
        public abstract System.Threading.Tasks.Task PostPatientCheckIns([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPatientCheckInsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManagePatientsCheckIns
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("patient-checkins/v1/")]
        public abstract System.Threading.Tasks.Task PutPatientCheckIns([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPatientCheckInsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("patient-checkins/v1/locations")]
        public abstract System.Threading.Tasks.Task GetPatientCheckInLocations();

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PatientsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("patients/v1/{id}")]
        public abstract System.Threading.Tasks.Task DeletePatientById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Patient will be validated against the specified License Number. If not specified, the Patient will be validated against all of the User's current Facilities. Please note that if the Patient is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("patients/v1/{id}")]
        public abstract System.Threading.Tasks.Task GetPatientById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active patients.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("patients/v1/active")]
        public abstract System.Threading.Tasks.Task GetPatientActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("patients/v1/add")]
        public abstract System.Threading.Tasks.Task PostPatientAdd([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPatientAddRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("patients/v1/update")]
        public abstract System.Threading.Tasks.Task PostPatientUpdate([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPatientUpdateRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PatientsStatusControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// Data returned by this endpoint is cached for up to one minute.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Lookup Patients
        /// </remarks>
        /// <param name="patientLicenseNumber">Route parameter patientLicenseNumber</param>
        /// <param name="licenseNumber">The license number of the Facility under which to get the Patient Status.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("patients/v1/statuses/{patientLicenseNumber}")]
        public abstract System.Threading.Tasks.Task GetPatientStatuses(string patientLicenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PlantBatchesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Destroy Immature Plants
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/")]
        public abstract System.Threading.Tasks.Task DeletePlantBatches([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.DeletePlantBatchesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active plant groups.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/active")]
        public abstract System.Threading.Tasks.Task GetPlantBatchActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Plant Batch will be validated against the specified License Number. If not specified, the Plant Batch will be validated against all of the User's current Facilities. Please note that if the Plant Batch is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/{id}")]
        public abstract System.Threading.Tasks.Task GetPlantBatchById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive plant groups.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/inactive")]
        public abstract System.Threading.Tasks.Task GetPlantBatchInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/types")]
        public abstract System.Threading.Tasks.Task GetPlantBatchTypes();

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/waste/reasons")]
        public abstract System.Threading.Tasks.Task GetPlantBatchWasteReasons([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record plant additives.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/additives")]
        public abstract System.Threading.Tasks.Task PostPlantBatchAdditives([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchAdditivesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/adjust")]
        public abstract System.Threading.Tasks.Task PostPlantBatchAdjust([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchAdjustRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory • View Veg/Flower Plants • Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/changegrowthphase")]
        public abstract System.Threading.Tasks.Task PostPlantBatchChangeGrowthPhase([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchChangeGrowthPhaseRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory • View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/createpackages")]
        public abstract System.Threading.Tasks.Task PostPlantBatchCreatePackages([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchCreatePackagesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] bool? isFromMotherPlant = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/createplantings")]
        public abstract System.Threading.Tasks.Task PostPlantBatchCreatePlantings([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchCreatePlantingsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory • View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/create/packages/frommotherplant")]
        public abstract System.Threading.Tasks.Task PostPlantBatchCreatePackageFromMotherPlant([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchCreatePackageFromMotherPlantRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/split")]
        public abstract System.Threading.Tasks.Task PostPlantBatchSplit([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchSplitRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Waste
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/waste")]
        public abstract System.Threading.Tasks.Task PostPlantBatchWaste([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantBatchWasteRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("plantbatches/v1/moveplantbatches")]
        public abstract System.Threading.Tasks.Task PutPlantBatchMovePlantBatches([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutPlantBatchMovePlantBatchesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PlantsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Destroy Veg/Flower Plants
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("plants/v1/")]
        public abstract System.Threading.Tasks.Task DeletePlants([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.DeletePlantsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View/Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record plant additives.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/additives")]
        public abstract System.Threading.Tasks.Task GetPlantAdditives([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record plant additives.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v1/additives")]
        public abstract System.Threading.Tasks.Task PostPlantAdditives([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantAdditivesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;:
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/additives/types")]
        public abstract System.Threading.Tasks.Task GetPlantAdditiveTypes();

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of flowering plants.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/flowering")]
        public abstract System.Threading.Tasks.Task GetPlantFlowering([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of available Plant Growth Phases.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/growthphases")]
        public abstract System.Threading.Tasks.Task GetPlantGrowthPhases([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Plant will be validated against the specified License Number. If not specified, the Plant will be validated against all of the User's current Facilities. Please note that if the Plant is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/{id}")]
        public abstract System.Threading.Tasks.Task GetPlantById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive plants.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/inactive")]
        public abstract System.Threading.Tasks.Task GetPlantInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="label">Route parameter label</param>
        /// <param name="licenseNumber">If specified, the Plant will be validated against the specified License Number. If not specified, the Plant will be validated against all of the User's current Facilities. Please note that if the Plant is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/{label}")]
        public abstract System.Threading.Tasks.Task GetPlantByLabel(string label, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of plants on hold.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/onhold")]
        public abstract System.Threading.Tasks.Task GetPlantOnHold([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of vegetating plants.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/vegetative")]
        public abstract System.Threading.Tasks.Task GetPlantVegetative([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/waste/methods/all")]
        public abstract System.Threading.Tasks.Task GetPlantWasteMethodAll();

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("plants/v1/waste/reasons")]
        public abstract System.Threading.Tasks.Task GetPlantWasteReasons([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants • Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record plant additives.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v1/additives/bylocation")]
        public abstract System.Threading.Tasks.Task PostPlantAdditiveByLocation([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantAdditiveByLocationRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v1/changegrowthphases")]
        public abstract System.Threading.Tasks.Task PostPlantChangeGrowthPhases([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantChangeGrowthPhasesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory • View Veg/Flower Plants • Manage Veg/Flower Plants Inventory • View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v1/create/plantbatch/packages")]
        public abstract System.Threading.Tasks.Task PostPlantCreatePlantBatchPackages([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantCreatePlantBatchPackagesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory • View Veg/Flower Plants • Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v1/create/plantings")]
        public abstract System.Threading.Tasks.Task PostPlantCreatePlantings([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantCreatePlantingsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manicure/Harvest Veg/Flower Plants
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v1/harvestplants")]
        public abstract System.Threading.Tasks.Task PostPlantHarvestPlants([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantHarvestPlantsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manicure/Harvest Veg/Flower Plants
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v1/manicureplants")]
        public abstract System.Threading.Tasks.Task PostPlantManicurePlants([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantManicurePlantsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v1/moveplants")]
        public abstract System.Threading.Tasks.Task PostPlantMovePlants([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantMovePlantsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Waste
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("plants/v1/waste")]
        public abstract System.Threading.Tasks.Task PostPlantWaste([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostPlantWasteRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class ProcessingJobControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("processing/v1/{id}")]
        public abstract System.Threading.Tasks.Task DeleteProcessingById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v1/{id}")]
        public abstract System.Threading.Tasks.Task GetProcessingById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("processing/v1/jobtypes/{id}")]
        public abstract System.Threading.Tasks.Task DeleteProcessingJobTypeById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v1/active")]
        public abstract System.Threading.Tasks.Task GetProcessingActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v1/inactive")]
        public abstract System.Threading.Tasks.Task GetProcessingInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v1/jobtypes/active")]
        public abstract System.Threading.Tasks.Task GetProcessingJobTypeActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v1/jobtypes/attributes")]
        public abstract System.Threading.Tasks.Task GetProcessingJobTypeAttributes([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v1/jobtypes/categories")]
        public abstract System.Threading.Tasks.Task GetProcessingJobTypeCategories([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive items.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("processing/v1/jobtypes/inactive")]
        public abstract System.Threading.Tasks.Task GetProcessingJobTypeInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManageProcessingJobs
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("processing/v1/adjust")]
        public abstract System.Threading.Tasks.Task PostProcessingAdjust([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostProcessingAdjustRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManageProcessingJobs
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("processing/v1/createpackages")]
        public abstract System.Threading.Tasks.Task PostProcessingCreatePackages([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostProcessingCreatePackagesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("processing/v1/jobtypes")]
        public abstract System.Threading.Tasks.Task PostProcessingJobTypes([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostProcessingJobTypesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("processing/v1/jobtypes")]
        public abstract System.Threading.Tasks.Task PutProcessingJobTypes([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutProcessingJobTypesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManageProcessingJobs
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("processing/v1/start")]
        public abstract System.Threading.Tasks.Task PostProcessingStart([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostProcessingStartRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("processing/v1/finish")]
        public abstract System.Threading.Tasks.Task PutProcessingFinish([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutProcessingFinishRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("processing/v1/unfinish")]
        public abstract System.Threading.Tasks.Task PutProcessingUnfinish([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutProcessingUnfinishRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class SalesControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/{id}")]
        public abstract System.Threading.Tasks.Task DeleteSaleDeliveryById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Sales Delivery will be validated against the specified License Number. If not specified, the Sales Delivery will be validated against all of the User's current Facilities. Please note that if the Sales Delivery is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/{id}")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/retailer/{id}")]
        public abstract System.Threading.Tasks.Task DeleteSaleDeliveryRetailerById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Sales Delivery will be validated against the specified License Number. If not specified, the Sales Delivery will be validated against all of the User's current Facilities. Please note that if the Sales Delivery is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/retailer/{id}")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryRetailerById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("sales/v1/receipts/{id}")]
        public abstract System.Threading.Tasks.Task DeleteSaleReceiptById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Sales Receipt will be validated against the specified License Number. If not specified, the Sales Receipt will be validated against all of the User's current Facilities. Please note that if the Sales Receipt is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/receipts/{id}")]
        public abstract System.Threading.Tasks.Task GetSaleReceiptById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/counties")]
        public abstract System.Threading.Tasks.Task GetSaleCounties();

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/customertypes")]
        public abstract System.Threading.Tasks.Task GetSaleCustomerTypes();

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/active")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateEnd = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/inactive")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateEnd = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <param name="lastModifiedStart">The last modified start timestamp.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/retailer/active")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryRetailerActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <param name="lastModifiedStart">The last modified start timestamp.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/retailer/inactive")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryRetailerInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;:
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/returnreasons")]
        public abstract System.Threading.Tasks.Task GetSaleDeliveryReturnReasons([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;:
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/patientregistration/locations")]
        public abstract System.Threading.Tasks.Task GetSalePatientRegistrationLocations();

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/paymenttypes")]
        public abstract System.Threading.Tasks.Task GetSalePaymentTypes([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/receipts/active")]
        public abstract System.Threading.Tasks.Task GetSaleReceiptActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateEnd = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/receipts/inactive")]
        public abstract System.Threading.Tasks.Task GetSaleReceiptInactive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? salesDateEnd = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of dates with sales transactions.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/transactions")]
        public abstract System.Threading.Tasks.Task GetSaleTransactions([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="salesDateStart">Route parameter salesDateStart</param>
        /// <param name="salesDateEnd">Route parameter salesDateEnd</param>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of sales transactions for the specified date range.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sales/v1/transactions/{salesDateStart}/{salesDateEnd}")]
        public abstract System.Threading.Tasks.Task GetSaleTransactionByDateRange(DateOnly salesDateStart, DateOnly salesDateEnd, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveries([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleDeliveriesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveries([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveriesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The DateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/retailer")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveryRetailer([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleDeliveryRetailerRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The DateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/retailer")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryRetailer([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveryRetailerRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/retailer/depart")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveryRetailerDepart([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleDeliveryRetailerDepartRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The ActualArrivalDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/retailer/end")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveryRetailerEnd([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleDeliveryRetailerEndRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The DateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/retailer/restock")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveryRetailerRestock([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleDeliveryRetailerRestockRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/retailer/sale")]
        public abstract System.Threading.Tasks.Task PostSaleDeliveryRetailerSale([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleDeliveryRetailerSaleRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v1/receipts")]
        public abstract System.Threading.Tasks.Task PostSaleReceipts([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleReceiptsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v1/receipts")]
        public abstract System.Threading.Tasks.Task PutSaleReceipts([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleReceiptsRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="date">Route parameter date</param>
        /// <param name="licenseNumber">The license number of the facility for which to append the sales transactions on the specified date.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("sales/v1/transactions/{date}")]
        public abstract System.Threading.Tasks.Task PostSaleTransactions([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostSaleTransactionsRequest> request, DateOnly date, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="date">Route parameter date</param>
        /// <param name="licenseNumber">The license number of the facility for which to update the sales transactions on the specified date.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v1/transactions/{date}")]
        public abstract System.Threading.Tasks.Task PutSaleTransactions([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleTransactionsRequest> request, DateOnly date, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/complete")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryComplete([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveryCompleteRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/hub")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryHub([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveryHubRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/hub/accept")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryHubAccept([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveryHubAcceptRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/hub/depart")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryHubDepart([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveryHubDepartRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("sales/v1/deliveries/hub/verifyID")]
        public abstract System.Threading.Tasks.Task PutSaleDeliveryHubVerifyId([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutSaleDeliveryHubVerifyIdRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class StrainsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("strains/v1/{id}")]
        public abstract System.Threading.Tasks.Task DeleteStrainById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Strain will be validated against the specified License Number. If not specified, the Strain will be validated against all of the User's current Facilities. Please note that if the Strain is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("strains/v1/{id}")]
        public abstract System.Threading.Tasks.Task GetStrainById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string? licenseNumber = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active strains.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("strains/v1/active")]
        public abstract System.Threading.Tasks.Task GetStrainActive([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("strains/v1/create")]
        public abstract System.Threading.Tasks.Task PostStrainCreate([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostStrainCreateRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("strains/v1/update")]
        public abstract System.Threading.Tasks.Task PostStrainUpdate([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostStrainUpdateRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class TransfersControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("transfers/v1/external/incoming/{id}")]
        public abstract System.Threading.Tasks.Task DeleteTransferExternalIncomingById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("transfers/v1/templates/{id}")]
        public abstract System.Threading.Tasks.Task DeleteTransferTemplateById(long id, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/deliveries/{id}/packages")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryByIdPackages(long id);

        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/deliveries/{id}/packages/wholesale")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryByIdPackageWholesale(long id);

        /// <remarks>
        /// Please note: that the {id} parameter above represents a Shipment Delivery ID.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/deliveries/{id}/transporters")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryByIdTransporters(long id);

        /// <remarks>
        /// Please note: The {id} parameter above represents a Shipment Delivery ID.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/deliveries/{id}/transporters/details")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryByIdTransporterDetails(long id);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/deliveries/packages/states")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryPackageStates();

        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Delivery Package ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/deliveries/package/{id}/requiredlabtestbatches")]
        public abstract System.Threading.Tasks.Task GetTransferDeliveryPackageByIdRequiredLabTestBatches(long id);

        /// <remarks>
        /// Please note: that the {id} parameter above represents a Shipment Plan ID.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/{id}/deliveries")]
        public abstract System.Threading.Tasks.Task GetTransferByIdDeliveries(long id);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/incoming")]
        public abstract System.Threading.Tasks.Task GetTransferIncoming([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/outgoing")]
        public abstract System.Threading.Tasks.Task GetTransferOutgoing([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/rejected")]
        public abstract System.Threading.Tasks.Task GetTransferRejected([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/templates")]
        public abstract System.Threading.Tasks.Task GetTransferTemplates([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedStart = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? lastModifiedEnd = null);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("transfers/v1/templates")]
        public abstract System.Threading.Tasks.Task PostTransferTemplates([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostTransferTemplatesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("transfers/v1/templates")]
        public abstract System.Threading.Tasks.Task PutTransferTemplates([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutTransferTemplatesRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Template Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/templates/deliveries/{id}/packages")]
        public abstract System.Threading.Tasks.Task GetTransferTemplateDeliveryByIdPackages(long id);

        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Template Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/templates/deliveries/{id}/transporters")]
        public abstract System.Threading.Tasks.Task GetTransferTemplateDeliveryByIdTransporters(long id);

        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Template Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/templates/deliveries/{id}/transporters/details")]
        public abstract System.Threading.Tasks.Task GetTransferTemplateDeliveryByIdTransporterDetails(long id);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/templates/{id}/deliveries")]
        public abstract System.Threading.Tasks.Task GetTransferTemplateByIdDeliveries(long id);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("transfers/v1/types")]
        public abstract System.Threading.Tasks.Task GetTransferTypes([Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("transfers/v1/external/incoming")]
        public abstract System.Threading.Tasks.Task PostTransferExternalIncoming([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PostTransferExternalIncomingRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("transfers/v1/external/incoming")]
        public abstract System.Threading.Tasks.Task PutTransferExternalIncoming([System.ComponentModel.DataAnnotations.Required] List<OpenMetrc.Builder.Domain.Requests.PutTransferExternalIncomingRequest> request, [Microsoft.AspNetCore.Mvc.FromQuery] string licenseNumber);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class UnitsOfMeasureControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("unitsofmeasure/v1/active")]
        public abstract System.Threading.Tasks.Task GetUnitOfMeasureActive();

    }

    


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625