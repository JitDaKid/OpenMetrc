//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace OpenMetrc.V2
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICaregiverClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaregiverStatus> GetCaregiverStatusAsync(string caregiverLicenseNumber, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaregiverClient : MetrcBaseClient, ICaregiverClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public CaregiverClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CaregiverStatus> GetCaregiverStatusAsync(string caregiverLicenseNumber, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (caregiverLicenseNumber == null)
                throw new System.ArgumentNullException("caregiverLicenseNumber");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "caregivers/v2/status/{caregiverLicenseNumber}"
                    urlBuilder_.Append("caregivers/v2/status/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(caregiverLicenseNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaregiverStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IEmployeeClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EmployeeMetrcWrapper> GetEmployeesAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetEmployeePermissionsAsync(string licenseNumber, string employeeLicenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmployeeClient : MetrcBaseClient, IEmployeeClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public EmployeeClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EmployeeMetrcWrapper> GetEmployeesAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "employees/v2"
                    urlBuilder_.Append("employees/v2");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EmployeeMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetEmployeePermissionsAsync(string licenseNumber, string employeeLicenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (employeeLicenseNumber == null)
                throw new System.ArgumentNullException("employeeLicenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "employees/v2/permissions"
                    urlBuilder_.Append("employees/v2/permissions");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("employeeLicenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(employeeLicenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IFacilityClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Facility>?> GetFacilitiesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FacilityClient : MetrcBaseClient, IFacilityClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public FacilityClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Facility>?> GetFacilitiesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "facilities/v2"
                    urlBuilder_.Append("facilities/v2");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Facility>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IHarvestClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Harvest> GetHarvestByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HarvestMetrcWrapper> GetHarvestActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HarvestMetrcWrapper> GetHarvestOnHoldAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HarvestMetrcWrapper> GetHarvestInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HarvestWasteMetrcWrapper> GetHarvestWasteAsync(string licenseNumber, long harvestId, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostHarvestWasteAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostHarvestWasteRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HarvestWasteTypeMetrcWrapper> GetHarvestWasteTypesAsync(int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostHarvestPackagesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostHarvestPackagesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostHarvestPackageTestingAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostHarvestPackageTestingRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutHarvestLocationAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutHarvestLocationRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutHarvestRenameAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutHarvestRenameRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutHarvestFinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutHarvestFinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutHarvestUnfinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutHarvestUnfinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutHarvestRestoreHarvestedPlantsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutHarvestRestoreHarvestedPlantsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteHarvestWasteByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HarvestClient : MetrcBaseClient, IHarvestClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public HarvestClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Harvest> GetHarvestByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v2/{id}"
                    urlBuilder_.Append("harvests/v2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Harvest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HarvestMetrcWrapper> GetHarvestActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v2/active"
                    urlBuilder_.Append("harvests/v2/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HarvestMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HarvestMetrcWrapper> GetHarvestOnHoldAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v2/onhold"
                    urlBuilder_.Append("harvests/v2/onhold");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HarvestMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HarvestMetrcWrapper> GetHarvestInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v2/inactive"
                    urlBuilder_.Append("harvests/v2/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HarvestMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HarvestWasteMetrcWrapper> GetHarvestWasteAsync(string licenseNumber, long harvestId, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (harvestId == null)
                throw new System.ArgumentNullException("harvestId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v2/waste"
                    urlBuilder_.Append("harvests/v2/waste");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("harvestId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(harvestId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HarvestWasteMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostHarvestWasteAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostHarvestWasteRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v2/waste"
                    urlBuilder_.Append("harvests/v2/waste");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HarvestWasteTypeMetrcWrapper> GetHarvestWasteTypesAsync(int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v2/waste/types"
                    urlBuilder_.Append("harvests/v2/waste/types");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HarvestWasteTypeMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostHarvestPackagesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostHarvestPackagesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v2/packages"
                    urlBuilder_.Append("harvests/v2/packages");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostHarvestPackageTestingAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostHarvestPackageTestingRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v2/packages/testing"
                    urlBuilder_.Append("harvests/v2/packages/testing");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutHarvestLocationAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutHarvestLocationRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v2/location"
                    urlBuilder_.Append("harvests/v2/location");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutHarvestRenameAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutHarvestRenameRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v2/rename"
                    urlBuilder_.Append("harvests/v2/rename");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutHarvestFinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutHarvestFinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v2/finish"
                    urlBuilder_.Append("harvests/v2/finish");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutHarvestUnfinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutHarvestUnfinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v2/unfinish"
                    urlBuilder_.Append("harvests/v2/unfinish");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutHarvestRestoreHarvestedPlantsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutHarvestRestoreHarvestedPlantsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v2/restore/harvestedplants"
                    urlBuilder_.Append("harvests/v2/restore/harvestedplants");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteHarvestWasteByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v2/waste/{id}"
                    urlBuilder_.Append("harvests/v2/waste/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IItemClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Item> GetItemByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteItemByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ItemMetrcWrapper> GetItemActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProcessingResponse> GetItemFileByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ItemMetrcWrapper> GetItemInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ItemCategoryMetrcWrapper> GetItemCategoriesAsync(int? pageNumber = null, int? pageSize = null, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ItemBrandMetrcWrapper> GetItemBrandsAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Photo> GetItemPhotoByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostItemsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostItemsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutItemsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutItemsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostItemPhotoAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostItemPhotoRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteItemBrandByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostItemBrandAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostItemBrandRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutItemBrandAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutItemBrandRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostItemFileAsync(System.Collections.Generic.IEnumerable<PostItemFileRequest> body, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemClient : MetrcBaseClient, IItemClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public ItemClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Item> GetItemByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v2/{id}"
                    urlBuilder_.Append("items/v2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Item>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteItemByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v2/{id}"
                    urlBuilder_.Append("items/v2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ItemMetrcWrapper> GetItemActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v2/active"
                    urlBuilder_.Append("items/v2/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ItemMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProcessingResponse> GetItemFileByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v2/file/{id}"
                    urlBuilder_.Append("items/v2/file/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProcessingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ItemMetrcWrapper> GetItemInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v2/inactive"
                    urlBuilder_.Append("items/v2/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ItemMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ItemCategoryMetrcWrapper> GetItemCategoriesAsync(int? pageNumber = null, int? pageSize = null, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v2/categories"
                    urlBuilder_.Append("items/v2/categories");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ItemCategoryMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ItemBrandMetrcWrapper> GetItemBrandsAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v2/brands"
                    urlBuilder_.Append("items/v2/brands");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ItemBrandMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Photo> GetItemPhotoByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v2/photo/{id}"
                    urlBuilder_.Append("items/v2/photo/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Photo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostItemsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostItemsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v2"
                    urlBuilder_.Append("items/v2");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutItemsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutItemsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v2"
                    urlBuilder_.Append("items/v2");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostItemPhotoAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostItemPhotoRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v2/photo"
                    urlBuilder_.Append("items/v2/photo");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteItemBrandByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v2/brand/{id}"
                    urlBuilder_.Append("items/v2/brand/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostItemBrandAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostItemBrandRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v2/brand"
                    urlBuilder_.Append("items/v2/brand");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutItemBrandAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutItemBrandRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v2/brand"
                    urlBuilder_.Append("items/v2/brand");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostItemFileAsync(System.Collections.Generic.IEnumerable<PostItemFileRequest> body, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v2/file"
                    urlBuilder_.Append("items/v2/file");
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ILabTestClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StringMetrcWrapper> GetLabTestStatesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LabTestBatchMetrcWrapper> GetLabTestBatchesAsync(int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LabTestTypeMetrcWrapper> GetLabTestTypesAsync(int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LabTestMetrcWrapper> GetLabTestResultsAsync(long packageId, string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostLabTestRecordAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostLabTestRecordRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutLabTestLabTestDocumentAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutLabTestLabTestDocumentRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutLabTestResultReleaseAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutLabTestResultReleaseRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LabTestMetrcWrapper> GetLabTestLabTestDocumentByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabTestClient : MetrcBaseClient, ILabTestClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public LabTestClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StringMetrcWrapper> GetLabTestStatesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "labtests/v2/states"
                    urlBuilder_.Append("labtests/v2/states");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StringMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LabTestBatchMetrcWrapper> GetLabTestBatchesAsync(int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "labtests/v2/batches"
                    urlBuilder_.Append("labtests/v2/batches");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LabTestBatchMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LabTestTypeMetrcWrapper> GetLabTestTypesAsync(int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "labtests/v2/types"
                    urlBuilder_.Append("labtests/v2/types");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LabTestTypeMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LabTestMetrcWrapper> GetLabTestResultsAsync(long packageId, string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (packageId == null)
                throw new System.ArgumentNullException("packageId");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "labtests/v2/results"
                    urlBuilder_.Append("labtests/v2/results");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("packageId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(packageId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LabTestMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostLabTestRecordAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostLabTestRecordRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "labtests/v2/record"
                    urlBuilder_.Append("labtests/v2/record");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutLabTestLabTestDocumentAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutLabTestLabTestDocumentRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "labtests/v2/labtestdocument"
                    urlBuilder_.Append("labtests/v2/labtestdocument");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutLabTestResultReleaseAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutLabTestResultReleaseRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "labtests/v2/results/release"
                    urlBuilder_.Append("labtests/v2/results/release");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LabTestMetrcWrapper> GetLabTestLabTestDocumentByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "labtests/v2/labtestdocument/{id}"
                    urlBuilder_.Append("labtests/v2/labtestdocument/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LabTestMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ILocationClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Location> GetLocationByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteLocationByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LocationMetrcWrapper> GetLocationActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LocationMetrcWrapper> GetLocationInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LocationTypeMetrcWrapper> GetLocationTypesAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostLocationsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostLocationsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutLocationsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutLocationsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationClient : MetrcBaseClient, ILocationClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public LocationClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Location> GetLocationByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "locations/v2/{id}"
                    urlBuilder_.Append("locations/v2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Location>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteLocationByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "locations/v2/{id}"
                    urlBuilder_.Append("locations/v2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LocationMetrcWrapper> GetLocationActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "locations/v2/active"
                    urlBuilder_.Append("locations/v2/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LocationMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LocationMetrcWrapper> GetLocationInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "locations/v2/inactive"
                    urlBuilder_.Append("locations/v2/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LocationMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LocationTypeMetrcWrapper> GetLocationTypesAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "locations/v2/types"
                    urlBuilder_.Append("locations/v2/types");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LocationTypeMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostLocationsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostLocationsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "locations/v2"
                    urlBuilder_.Append("locations/v2");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutLocationsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutLocationsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "locations/v2"
                    urlBuilder_.Append("locations/v2");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPackageClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePackageByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Package> GetPackageByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PackageMetrcWrapper> GetPackageIntransitAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Package> GetPackageByLabelAsync(string label, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PackageLabSampleMetrcWrapper> GetPackageLabSamplesAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PackageMetrcWrapper> GetPackageActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PackageMetrcWrapper> GetPackageOnHoldAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PackageTransferredMetrcWrapper> GetPackageTransferredAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PackageSourceHarvestMetrcWrapper> GetPackageByIdSourceHarvestsAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PackageMetrcWrapper> GetPackageInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StringMetrcWrapper> GetPackageTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PackageAdjustReasonMetrcWrapper> GetPackageAdjustReasonsAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPackagesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackagesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPackageTestingAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageTestingRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPackageDecontaminateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageDecontaminateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPackageDonationFlagAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageDonationFlagRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPackageExternalidAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageExternalidRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPackageDonationUnflagAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageDonationUnflagRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPackageAdjustAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageAdjustRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPackageAdjustAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageAdjustRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPackagePlantingsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackagePlantingsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPackageItemAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageItemRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPackageLabTestRequiredAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageLabTestRequiredRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPackageNoteAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageNoteRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPackageLocationAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageLocationRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPackageRemediateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageRemediateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPackageTradeSampleFlagAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageTradeSampleFlagRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPackageTradeSampleUnflagAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageTradeSampleUnflagRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPackageFinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageFinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPackageUnfinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageUnfinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPackageUseByDateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageUseByDateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageClient : MetrcBaseClient, IPackageClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PackageClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeletePackageByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/{id}"
                    urlBuilder_.Append("packages/v2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Package> GetPackageByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/{id}"
                    urlBuilder_.Append("packages/v2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Package>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PackageMetrcWrapper> GetPackageIntransitAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/intransit"
                    urlBuilder_.Append("packages/v2/intransit");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PackageMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Package> GetPackageByLabelAsync(string label, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (label == null)
                throw new System.ArgumentNullException("label");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/{label}"
                    urlBuilder_.Append("packages/v2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(label, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Package>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PackageLabSampleMetrcWrapper> GetPackageLabSamplesAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/labsamples"
                    urlBuilder_.Append("packages/v2/labsamples");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PackageLabSampleMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PackageMetrcWrapper> GetPackageActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/active"
                    urlBuilder_.Append("packages/v2/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PackageMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PackageMetrcWrapper> GetPackageOnHoldAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/onhold"
                    urlBuilder_.Append("packages/v2/onhold");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PackageMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PackageTransferredMetrcWrapper> GetPackageTransferredAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/transferred"
                    urlBuilder_.Append("packages/v2/transferred");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PackageTransferredMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PackageSourceHarvestMetrcWrapper> GetPackageByIdSourceHarvestsAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/{id}/source/harvests"
                    urlBuilder_.Append("packages/v2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/source/harvests");
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PackageSourceHarvestMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PackageMetrcWrapper> GetPackageInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/inactive"
                    urlBuilder_.Append("packages/v2/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PackageMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StringMetrcWrapper> GetPackageTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/types"
                    urlBuilder_.Append("packages/v2/types");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StringMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PackageAdjustReasonMetrcWrapper> GetPackageAdjustReasonsAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/adjust/reasons"
                    urlBuilder_.Append("packages/v2/adjust/reasons");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PackageAdjustReasonMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPackagesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackagesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2"
                    urlBuilder_.Append("packages/v2");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPackageTestingAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageTestingRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/testing"
                    urlBuilder_.Append("packages/v2/testing");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPackageDecontaminateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageDecontaminateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/decontaminate"
                    urlBuilder_.Append("packages/v2/decontaminate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPackageDonationFlagAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageDonationFlagRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/donation/flag"
                    urlBuilder_.Append("packages/v2/donation/flag");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPackageExternalidAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageExternalidRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/externalid"
                    urlBuilder_.Append("packages/v2/externalid");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPackageDonationUnflagAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageDonationUnflagRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/donation/unflag"
                    urlBuilder_.Append("packages/v2/donation/unflag");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPackageAdjustAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageAdjustRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/adjust"
                    urlBuilder_.Append("packages/v2/adjust");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPackageAdjustAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageAdjustRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/adjust"
                    urlBuilder_.Append("packages/v2/adjust");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPackagePlantingsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackagePlantingsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/plantings"
                    urlBuilder_.Append("packages/v2/plantings");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPackageItemAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageItemRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/item"
                    urlBuilder_.Append("packages/v2/item");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPackageLabTestRequiredAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageLabTestRequiredRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/labtests/required"
                    urlBuilder_.Append("packages/v2/labtests/required");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPackageNoteAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageNoteRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/note"
                    urlBuilder_.Append("packages/v2/note");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPackageLocationAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageLocationRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/location"
                    urlBuilder_.Append("packages/v2/location");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPackageRemediateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageRemediateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/remediate"
                    urlBuilder_.Append("packages/v2/remediate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPackageTradeSampleFlagAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageTradeSampleFlagRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/tradesample/flag"
                    urlBuilder_.Append("packages/v2/tradesample/flag");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPackageTradeSampleUnflagAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageTradeSampleUnflagRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/tradesample/unflag"
                    urlBuilder_.Append("packages/v2/tradesample/unflag");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPackageFinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageFinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/finish"
                    urlBuilder_.Append("packages/v2/finish");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPackageUnfinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageUnfinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/unfinish"
                    urlBuilder_.Append("packages/v2/unfinish");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPackageUseByDateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageUseByDateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v2/usebydate"
                    urlBuilder_.Append("packages/v2/usebydate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPatientClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Patient> GetPatientByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePatientByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PatientMetrcWrapper> GetPatientActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPatientsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPatientsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPatientsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPatientsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatientClient : MetrcBaseClient, IPatientClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PatientClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Patient> GetPatientByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patients/v2/{id}"
                    urlBuilder_.Append("patients/v2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Patient>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeletePatientByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patients/v2/{id}"
                    urlBuilder_.Append("patients/v2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PatientMetrcWrapper> GetPatientActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patients/v2/active"
                    urlBuilder_.Append("patients/v2/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PatientMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPatientsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPatientsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patients/v2"
                    urlBuilder_.Append("patients/v2");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPatientsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPatientsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patients/v2"
                    urlBuilder_.Append("patients/v2");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPatientCheckInClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PatientCheckInLocationMetrcWrapper> GetPatientCheckInLocationsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="dateTimeOffset">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="timeOffset">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PatientCheckInMetrcWrapper> GetPatientCheckInsAsync(string licenseNumber, DateTimeOffset? dateTimeOffset = null, DateTimeOffset? timeOffset = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPatientCheckInsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPatientCheckInsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPatientCheckInsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPatientCheckInsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePatientCheckInByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatientCheckInClient : MetrcBaseClient, IPatientCheckInClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PatientCheckInClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PatientCheckInLocationMetrcWrapper> GetPatientCheckInLocationsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patient-checkins/v2/locations"
                    urlBuilder_.Append("patient-checkins/v2/locations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PatientCheckInLocationMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="dateTimeOffset">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="timeOffset">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PatientCheckInMetrcWrapper> GetPatientCheckInsAsync(string licenseNumber, DateTimeOffset? dateTimeOffset = null, DateTimeOffset? timeOffset = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patient-checkins/v2"
                    urlBuilder_.Append("patient-checkins/v2");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (dateTimeOffset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateTimeOffset")).Append('=').Append(System.Uri.EscapeDataString(dateTimeOffset.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (timeOffset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timeOffset")).Append('=').Append(System.Uri.EscapeDataString(timeOffset.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PatientCheckInMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPatientCheckInsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPatientCheckInsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patient-checkins/v2"
                    urlBuilder_.Append("patient-checkins/v2");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPatientCheckInsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPatientCheckInsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patient-checkins/v2"
                    urlBuilder_.Append("patient-checkins/v2");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeletePatientCheckInByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patient-checkins/v2/{id}"
                    urlBuilder_.Append("patient-checkins/v2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPatientStatusClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PatientStatus>?> GetPatientStatusesAsync(string patientLicenseNumber, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatientStatusClient : MetrcBaseClient, IPatientStatusClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PatientStatusClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PatientStatus>?> GetPatientStatusesAsync(string patientLicenseNumber, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (patientLicenseNumber == null)
                throw new System.ArgumentNullException("patientLicenseNumber");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patients/v2/statuses/{patientLicenseNumber}"
                    urlBuilder_.Append("patients/v2/statuses/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(patientLicenseNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PatientStatus>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPlantClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: me, or
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPlantAdjustAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantAdjustRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlantMetrcWrapper> GetPlantMotherInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlantMetrcWrapper> GetPlantMotherAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlantWasteMetrcWrapper> GetPlantWasteByIdPlantAsync(long id, string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PackageMetrcWrapper> GetPlantWasteByIdPackageAsync(long id, string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlantWasteMetrcWrapper> GetPlantWasteAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantWasteAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantWasteRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlantMotherOnHoldMetrcWrapper> GetPlantMotherOnHoldAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantAdditiveByLocationUsingtemplateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantAdditiveByLocationUsingtemplateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantAdditiveUsingtemplateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantAdditiveUsingtemplateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StringMetrcWrapper> GetPlantAdditiveTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Plant> GetPlantByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Plant> GetPlantByLabelAsync(string label, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlantMetrcWrapper> GetPlantVegetativeAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlantMetrcWrapper> GetPlantFloweringAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlantMetrcWrapper> GetPlantOnHoldAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlantMetrcWrapper> GetPlantInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlantAdditiveMetrcWrapper> GetPlantAdditivesAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantAdditivesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantAdditivesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StringMetrcWrapper> GetPlantGrowthPhasesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlantWasteReasonMetrcWrapper> GetPlantWasteReasonsAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantAdditiveByLocationAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantAdditiveByLocationRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantPlantingsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantPlantingsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantPlantBatchPackagesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantPlantBatchPackagesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantManicureAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantManicureRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPlantLocationAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantLocationRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPlantMergeAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantMergeRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPlantSplitAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantSplitRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPlantStrainAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantStrainRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPlantTagAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantTagRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPlantGrowthPhaseAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantGrowthPhaseRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPlantHarvestAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantHarvestRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePlantsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<DeletePlantsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlantWasteMethodMetrcWrapper> GetPlantWasteMethodAllAsync(int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantClient : MetrcBaseClient, IPlantClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PlantClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: me, or
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPlantAdjustAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantAdjustRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/adjust"
                    urlBuilder_.Append("plants/v2/adjust");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlantMetrcWrapper> GetPlantMotherInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/mother/inactive"
                    urlBuilder_.Append("plants/v2/mother/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlantMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlantMetrcWrapper> GetPlantMotherAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/mother"
                    urlBuilder_.Append("plants/v2/mother");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlantMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlantWasteMetrcWrapper> GetPlantWasteByIdPlantAsync(long id, string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/waste/{id}/plant"
                    urlBuilder_.Append("plants/v2/waste/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/plant");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlantWasteMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PackageMetrcWrapper> GetPlantWasteByIdPackageAsync(long id, string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/waste/{id}/package"
                    urlBuilder_.Append("plants/v2/waste/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/package");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PackageMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlantWasteMetrcWrapper> GetPlantWasteAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/waste"
                    urlBuilder_.Append("plants/v2/waste");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlantWasteMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantWasteAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantWasteRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/waste"
                    urlBuilder_.Append("plants/v2/waste");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlantMotherOnHoldMetrcWrapper> GetPlantMotherOnHoldAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/mother/onhold"
                    urlBuilder_.Append("plants/v2/mother/onhold");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlantMotherOnHoldMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantAdditiveByLocationUsingtemplateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantAdditiveByLocationUsingtemplateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/additives/bylocation/usingtemplate"
                    urlBuilder_.Append("plants/v2/additives/bylocation/usingtemplate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantAdditiveUsingtemplateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantAdditiveUsingtemplateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/additives/usingtemplate"
                    urlBuilder_.Append("plants/v2/additives/usingtemplate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StringMetrcWrapper> GetPlantAdditiveTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/additives/types"
                    urlBuilder_.Append("plants/v2/additives/types");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StringMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Plant> GetPlantByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/{id}"
                    urlBuilder_.Append("plants/v2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Plant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Plant> GetPlantByLabelAsync(string label, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (label == null)
                throw new System.ArgumentNullException("label");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/{label}"
                    urlBuilder_.Append("plants/v2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(label, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Plant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlantMetrcWrapper> GetPlantVegetativeAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/vegetative"
                    urlBuilder_.Append("plants/v2/vegetative");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlantMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlantMetrcWrapper> GetPlantFloweringAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/flowering"
                    urlBuilder_.Append("plants/v2/flowering");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlantMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlantMetrcWrapper> GetPlantOnHoldAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/onhold"
                    urlBuilder_.Append("plants/v2/onhold");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlantMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlantMetrcWrapper> GetPlantInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/inactive"
                    urlBuilder_.Append("plants/v2/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlantMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlantAdditiveMetrcWrapper> GetPlantAdditivesAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/additives"
                    urlBuilder_.Append("plants/v2/additives");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlantAdditiveMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantAdditivesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantAdditivesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/additives"
                    urlBuilder_.Append("plants/v2/additives");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StringMetrcWrapper> GetPlantGrowthPhasesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/growthphases"
                    urlBuilder_.Append("plants/v2/growthphases");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StringMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlantWasteReasonMetrcWrapper> GetPlantWasteReasonsAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/waste/reasons"
                    urlBuilder_.Append("plants/v2/waste/reasons");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlantWasteReasonMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantAdditiveByLocationAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantAdditiveByLocationRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/additives/bylocation"
                    urlBuilder_.Append("plants/v2/additives/bylocation");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantPlantingsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantPlantingsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/plantings"
                    urlBuilder_.Append("plants/v2/plantings");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantPlantBatchPackagesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantPlantBatchPackagesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/plantbatch/packages"
                    urlBuilder_.Append("plants/v2/plantbatch/packages");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantManicureAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantManicureRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/manicure"
                    urlBuilder_.Append("plants/v2/manicure");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPlantLocationAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantLocationRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/location"
                    urlBuilder_.Append("plants/v2/location");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPlantMergeAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantMergeRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/merge"
                    urlBuilder_.Append("plants/v2/merge");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPlantSplitAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantSplitRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/split"
                    urlBuilder_.Append("plants/v2/split");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPlantStrainAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantStrainRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/strain"
                    urlBuilder_.Append("plants/v2/strain");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPlantTagAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantTagRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/tag"
                    urlBuilder_.Append("plants/v2/tag");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPlantGrowthPhaseAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantGrowthPhaseRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/growthphase"
                    urlBuilder_.Append("plants/v2/growthphase");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPlantHarvestAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantHarvestRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/harvest"
                    urlBuilder_.Append("plants/v2/harvest");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeletePlantsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<DeletePlantsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2"
                    urlBuilder_.Append("plants/v2");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlantWasteMethodMetrcWrapper> GetPlantWasteMethodAllAsync(int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v2/waste/methods/all"
                    urlBuilder_.Append("plants/v2/waste/methods/all");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlantWasteMethodMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPlantBatchClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlantBatchWasteMetrcWrapper> GetPlantBatchWasteAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantBatchWasteAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchWasteRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantBatchAdditiveUsingtemplateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchAdditiveUsingtemplateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPlantBatchNameAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantBatchNameRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlantBatch> GetPlantBatchByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlantBatchMetrcWrapper> GetPlantBatchActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlantBatchMetrcWrapper> GetPlantBatchInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StringMetrcWrapper> GetPlantBatchTypesAsync(int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePlantBatchesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<DeletePlantBatchesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlantBatchWasteReasonMetrcWrapper> GetPlantBatchWasteReasonsAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantBatchAdjustAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchAdjustRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantBatchAdditivesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchAdditivesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantBatchPlantingsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchPlantingsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantBatchPackagesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchPackagesRequest> body, bool? isFromMotherPlant = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantBatchPackageFromMotherPlantAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchPackageFromMotherPlantRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantBatchSplitAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchSplitRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantBatchGrowthPhaseAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchGrowthPhaseRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPlantBatchLocationAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantBatchLocationRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPlantBatchStrainAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantBatchStrainRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPlantBatchTagAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantBatchTagRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantBatchClient : MetrcBaseClient, IPlantBatchClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PlantBatchClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlantBatchWasteMetrcWrapper> GetPlantBatchWasteAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v2/waste"
                    urlBuilder_.Append("plantbatches/v2/waste");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlantBatchWasteMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantBatchWasteAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchWasteRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v2/waste"
                    urlBuilder_.Append("plantbatches/v2/waste");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantBatchAdditiveUsingtemplateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchAdditiveUsingtemplateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v2/additives/usingtemplate"
                    urlBuilder_.Append("plantbatches/v2/additives/usingtemplate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPlantBatchNameAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantBatchNameRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v2/name"
                    urlBuilder_.Append("plantbatches/v2/name");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlantBatch> GetPlantBatchByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v2/{id}"
                    urlBuilder_.Append("plantbatches/v2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlantBatch>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlantBatchMetrcWrapper> GetPlantBatchActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v2/active"
                    urlBuilder_.Append("plantbatches/v2/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlantBatchMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlantBatchMetrcWrapper> GetPlantBatchInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v2/inactive"
                    urlBuilder_.Append("plantbatches/v2/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlantBatchMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StringMetrcWrapper> GetPlantBatchTypesAsync(int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v2/types"
                    urlBuilder_.Append("plantbatches/v2/types");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StringMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeletePlantBatchesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<DeletePlantBatchesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v2"
                    urlBuilder_.Append("plantbatches/v2");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlantBatchWasteReasonMetrcWrapper> GetPlantBatchWasteReasonsAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v2/waste/reasons"
                    urlBuilder_.Append("plantbatches/v2/waste/reasons");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlantBatchWasteReasonMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantBatchAdjustAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchAdjustRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v2/adjust"
                    urlBuilder_.Append("plantbatches/v2/adjust");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantBatchAdditivesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchAdditivesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v2/additives"
                    urlBuilder_.Append("plantbatches/v2/additives");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantBatchPlantingsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchPlantingsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v2/plantings"
                    urlBuilder_.Append("plantbatches/v2/plantings");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantBatchPackagesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchPackagesRequest> body, bool? isFromMotherPlant = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v2/packages"
                    urlBuilder_.Append("plantbatches/v2/packages");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (isFromMotherPlant != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isFromMotherPlant")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isFromMotherPlant, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantBatchPackageFromMotherPlantAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchPackageFromMotherPlantRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v2/packages/frommotherplant"
                    urlBuilder_.Append("plantbatches/v2/packages/frommotherplant");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantBatchSplitAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchSplitRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v2/split"
                    urlBuilder_.Append("plantbatches/v2/split");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantBatchGrowthPhaseAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchGrowthPhaseRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v2/growthphase"
                    urlBuilder_.Append("plantbatches/v2/growthphase");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPlantBatchLocationAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantBatchLocationRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v2/location"
                    urlBuilder_.Append("plantbatches/v2/location");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPlantBatchStrainAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantBatchStrainRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v2/strain"
                    urlBuilder_.Append("plantbatches/v2/strain");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPlantBatchTagAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantBatchTagRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v2/tag"
                    urlBuilder_.Append("plantbatches/v2/tag");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IProcessingClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Processing> GetProcessingByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteProcessingByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProcessingMetrcWrapper> GetProcessingActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProcessingMetrcWrapper> GetProcessingInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostProcessingCreatePackagesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostProcessingCreatePackagesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostProcessingStartAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostProcessingStartRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostProcessingAdjustAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostProcessingAdjustRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutProcessingFinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutProcessingFinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutProcessingUnfinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutProcessingUnfinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProcessingJobTypeMetrcWrapper> GetProcessingJobTypeActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProcessingJobTypeMetrcWrapper> GetProcessingJobTypeInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostProcessingJobTypesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostProcessingJobTypesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutProcessingJobTypesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutProcessingJobTypesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteProcessingJobTypeByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobTypeAttributeMetrcWrapper> GetProcessingJobTypeAttributesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StringMetrcWrapper> GetProcessingJobTypeCategoriesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProcessingClient : MetrcBaseClient, IProcessingClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public ProcessingClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Processing> GetProcessingByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v2/{id}"
                    urlBuilder_.Append("processing/v2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Processing>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteProcessingByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v2/{id}"
                    urlBuilder_.Append("processing/v2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProcessingMetrcWrapper> GetProcessingActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v2/active"
                    urlBuilder_.Append("processing/v2/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProcessingMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProcessingMetrcWrapper> GetProcessingInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v2/inactive"
                    urlBuilder_.Append("processing/v2/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProcessingMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostProcessingCreatePackagesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostProcessingCreatePackagesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v2/createpackages"
                    urlBuilder_.Append("processing/v2/createpackages");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostProcessingStartAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostProcessingStartRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v2/start"
                    urlBuilder_.Append("processing/v2/start");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostProcessingAdjustAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostProcessingAdjustRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v2/adjust"
                    urlBuilder_.Append("processing/v2/adjust");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutProcessingFinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutProcessingFinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v2/finish"
                    urlBuilder_.Append("processing/v2/finish");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutProcessingUnfinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutProcessingUnfinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v2/unfinish"
                    urlBuilder_.Append("processing/v2/unfinish");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProcessingJobTypeMetrcWrapper> GetProcessingJobTypeActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v2/jobtypes/active"
                    urlBuilder_.Append("processing/v2/jobtypes/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProcessingJobTypeMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProcessingJobTypeMetrcWrapper> GetProcessingJobTypeInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v2/jobtypes/inactive"
                    urlBuilder_.Append("processing/v2/jobtypes/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProcessingJobTypeMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostProcessingJobTypesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostProcessingJobTypesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v2/jobtypes"
                    urlBuilder_.Append("processing/v2/jobtypes");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutProcessingJobTypesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutProcessingJobTypesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v2/jobtypes"
                    urlBuilder_.Append("processing/v2/jobtypes");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteProcessingJobTypeByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v2/jobtypes/{id}"
                    urlBuilder_.Append("processing/v2/jobtypes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<JobTypeAttributeMetrcWrapper> GetProcessingJobTypeAttributesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v2/jobtypes/attributes"
                    urlBuilder_.Append("processing/v2/jobtypes/attributes");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobTypeAttributeMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StringMetrcWrapper> GetProcessingJobTypeCategoriesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v2/jobtypes/categories"
                    urlBuilder_.Append("processing/v2/jobtypes/categories");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StringMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ISaleClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StringMetrcWrapper> GetSaleCustomerTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PatientRegistrationLocationMetrcWrapper> GetSalePatientRegistrationLocationsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaleDelivery> GetSaleDeliveryByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSaleDeliveryByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="salesDateStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="salesDateEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaleDeliveryMetrcWrapper> GetSaleDeliveryActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? salesDateStart = null, DateTimeOffset? salesDateEnd = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="salesDateStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="salesDateEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaleDeliveryMetrcWrapper> GetSaleDeliveryInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? salesDateStart = null, DateTimeOffset? salesDateEnd = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeliveryReturnReasonMetrcWrapper> GetSaleDeliveryReturnReasonsAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CountyMetrcWrapper> GetSaleCountiesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StringMetrcWrapper> GetSalePaymentTypesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaleReceipt> GetSaleReceiptByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSaleReceiptByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="salesDateStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="salesDateEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaleReceiptMetrcWrapper> GetSaleReceiptActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? salesDateStart = null, DateTimeOffset? salesDateEnd = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaleReceiptMetrcWrapper> GetSaleReceiptExternalAsync(string externalNumber, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="salesDateStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="salesDateEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaleReceiptMetrcWrapper> GetSaleReceiptInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? salesDateStart = null, DateTimeOffset? salesDateEnd = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostSaleDeliveriesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveriesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSaleDeliveriesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveriesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostSaleReceiptsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleReceiptsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSaleReceiptsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleReceiptsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSaleDeliveryHubAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryHubRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSaleDeliveryHubAcceptAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryHubAcceptRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSaleDeliveryCompleteAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryCompleteRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSaleDeliveryHubDepartAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryHubDepartRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSaleDeliveryHubVerifyIdAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryHubVerifyIdRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSaleReceiptFinalizeAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleReceiptFinalizeRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSaleReceiptUnfinalizeAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleReceiptUnfinalizeRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RetailerMetrcWrapper> GetSaleDeliveryRetailerActiveAsync(string licenseNumber, DateTimeOffset lastModifiedStart, DateTimeOffset lastModifiedEnd, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RetailerMetrcWrapper> GetSaleDeliveryRetailerInactiveAsync(string licenseNumber, DateTimeOffset lastModifiedStart, DateTimeOffset lastModifiedEnd, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Retailer> GetSaleDeliveryRetailerByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSaleDeliveryRetailerByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostSaleDeliveryRetailerAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveryRetailerRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSaleDeliveryRetailerAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryRetailerRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostSaleDeliveryRetailerDepartAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveryRetailerDepartRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostSaleDeliveryRetailerRestockAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveryRetailerRestockRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostSaleDeliveryRetailerSaleAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveryRetailerSaleRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostSaleDeliveryRetailerEndAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveryRetailerEndRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleClient : MetrcBaseClient, ISaleClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public SaleClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StringMetrcWrapper> GetSaleCustomerTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/customertypes"
                    urlBuilder_.Append("sales/v2/customertypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StringMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PatientRegistrationLocationMetrcWrapper> GetSalePatientRegistrationLocationsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/patientregistration/locations"
                    urlBuilder_.Append("sales/v2/patientregistration/locations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PatientRegistrationLocationMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SaleDelivery> GetSaleDeliveryByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries/{id}"
                    urlBuilder_.Append("sales/v2/deliveries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SaleDelivery>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteSaleDeliveryByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries/{id}"
                    urlBuilder_.Append("sales/v2/deliveries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="salesDateStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="salesDateEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SaleDeliveryMetrcWrapper> GetSaleDeliveryActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? salesDateStart = null, DateTimeOffset? salesDateEnd = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries/active"
                    urlBuilder_.Append("sales/v2/deliveries/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (salesDateStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("salesDateStart")).Append('=').Append(System.Uri.EscapeDataString(salesDateStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (salesDateEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("salesDateEnd")).Append('=').Append(System.Uri.EscapeDataString(salesDateEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SaleDeliveryMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="salesDateStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="salesDateEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SaleDeliveryMetrcWrapper> GetSaleDeliveryInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? salesDateStart = null, DateTimeOffset? salesDateEnd = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries/inactive"
                    urlBuilder_.Append("sales/v2/deliveries/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (salesDateStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("salesDateStart")).Append('=').Append(System.Uri.EscapeDataString(salesDateStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (salesDateEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("salesDateEnd")).Append('=').Append(System.Uri.EscapeDataString(salesDateEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SaleDeliveryMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeliveryReturnReasonMetrcWrapper> GetSaleDeliveryReturnReasonsAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries/returnreasons"
                    urlBuilder_.Append("sales/v2/deliveries/returnreasons");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeliveryReturnReasonMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CountyMetrcWrapper> GetSaleCountiesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/counties"
                    urlBuilder_.Append("sales/v2/counties");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CountyMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StringMetrcWrapper> GetSalePaymentTypesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/paymenttypes"
                    urlBuilder_.Append("sales/v2/paymenttypes");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StringMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SaleReceipt> GetSaleReceiptByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/receipts/{id}"
                    urlBuilder_.Append("sales/v2/receipts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SaleReceipt>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteSaleReceiptByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/receipts/{id}"
                    urlBuilder_.Append("sales/v2/receipts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="salesDateStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="salesDateEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SaleReceiptMetrcWrapper> GetSaleReceiptActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? salesDateStart = null, DateTimeOffset? salesDateEnd = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/receipts/active"
                    urlBuilder_.Append("sales/v2/receipts/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (salesDateStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("salesDateStart")).Append('=').Append(System.Uri.EscapeDataString(salesDateStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (salesDateEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("salesDateEnd")).Append('=').Append(System.Uri.EscapeDataString(salesDateEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SaleReceiptMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SaleReceiptMetrcWrapper> GetSaleReceiptExternalAsync(string externalNumber, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (externalNumber == null)
                throw new System.ArgumentNullException("externalNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/receipts/external/{externalNumber}"
                    urlBuilder_.Append("sales/v2/receipts/external/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(externalNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SaleReceiptMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="salesDateStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="salesDateEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SaleReceiptMetrcWrapper> GetSaleReceiptInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? salesDateStart = null, DateTimeOffset? salesDateEnd = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/receipts/inactive"
                    urlBuilder_.Append("sales/v2/receipts/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (salesDateStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("salesDateStart")).Append('=').Append(System.Uri.EscapeDataString(salesDateStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (salesDateEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("salesDateEnd")).Append('=').Append(System.Uri.EscapeDataString(salesDateEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SaleReceiptMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostSaleDeliveriesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveriesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries"
                    urlBuilder_.Append("sales/v2/deliveries");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutSaleDeliveriesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveriesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries"
                    urlBuilder_.Append("sales/v2/deliveries");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostSaleReceiptsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleReceiptsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/receipts"
                    urlBuilder_.Append("sales/v2/receipts");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutSaleReceiptsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleReceiptsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/receipts"
                    urlBuilder_.Append("sales/v2/receipts");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutSaleDeliveryHubAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryHubRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries/hub"
                    urlBuilder_.Append("sales/v2/deliveries/hub");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutSaleDeliveryHubAcceptAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryHubAcceptRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries/hub/accept"
                    urlBuilder_.Append("sales/v2/deliveries/hub/accept");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutSaleDeliveryCompleteAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryCompleteRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries/complete"
                    urlBuilder_.Append("sales/v2/deliveries/complete");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutSaleDeliveryHubDepartAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryHubDepartRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries/hub/depart"
                    urlBuilder_.Append("sales/v2/deliveries/hub/depart");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutSaleDeliveryHubVerifyIdAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryHubVerifyIdRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries/hub/verifyID"
                    urlBuilder_.Append("sales/v2/deliveries/hub/verifyID");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutSaleReceiptFinalizeAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleReceiptFinalizeRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/receipts/finalize"
                    urlBuilder_.Append("sales/v2/receipts/finalize");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutSaleReceiptUnfinalizeAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleReceiptUnfinalizeRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/receipts/unfinalize"
                    urlBuilder_.Append("sales/v2/receipts/unfinalize");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RetailerMetrcWrapper> GetSaleDeliveryRetailerActiveAsync(string licenseNumber, DateTimeOffset lastModifiedStart, DateTimeOffset lastModifiedEnd, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (lastModifiedStart == null)
                throw new System.ArgumentNullException("lastModifiedStart");

            if (lastModifiedEnd == null)
                throw new System.ArgumentNullException("lastModifiedEnd");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries/retailer/active"
                    urlBuilder_.Append("sales/v2/deliveries/retailer/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RetailerMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RetailerMetrcWrapper> GetSaleDeliveryRetailerInactiveAsync(string licenseNumber, DateTimeOffset lastModifiedStart, DateTimeOffset lastModifiedEnd, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (lastModifiedStart == null)
                throw new System.ArgumentNullException("lastModifiedStart");

            if (lastModifiedEnd == null)
                throw new System.ArgumentNullException("lastModifiedEnd");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries/retailer/inactive"
                    urlBuilder_.Append("sales/v2/deliveries/retailer/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RetailerMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Retailer> GetSaleDeliveryRetailerByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries/retailer/{id}"
                    urlBuilder_.Append("sales/v2/deliveries/retailer/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Retailer>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteSaleDeliveryRetailerByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries/retailer/{id}"
                    urlBuilder_.Append("sales/v2/deliveries/retailer/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostSaleDeliveryRetailerAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveryRetailerRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries/retailer"
                    urlBuilder_.Append("sales/v2/deliveries/retailer");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutSaleDeliveryRetailerAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryRetailerRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries/retailer"
                    urlBuilder_.Append("sales/v2/deliveries/retailer");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostSaleDeliveryRetailerDepartAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveryRetailerDepartRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries/retailer/depart"
                    urlBuilder_.Append("sales/v2/deliveries/retailer/depart");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostSaleDeliveryRetailerRestockAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveryRetailerRestockRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries/retailer/restock"
                    urlBuilder_.Append("sales/v2/deliveries/retailer/restock");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostSaleDeliveryRetailerSaleAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveryRetailerSaleRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries/retailer/sale"
                    urlBuilder_.Append("sales/v2/deliveries/retailer/sale");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostSaleDeliveryRetailerEndAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveryRetailerEndRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v2/deliveries/retailer/end"
                    urlBuilder_.Append("sales/v2/deliveries/retailer/end");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IStrainClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Strain> GetStrainByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteStrainByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StrainMetrcWrapper> GetStrainActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StrainMetrcWrapper> GetStrainInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostStrainsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostStrainsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutStrainsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutStrainsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StrainClient : MetrcBaseClient, IStrainClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public StrainClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Strain> GetStrainByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "strains/v2/{id}"
                    urlBuilder_.Append("strains/v2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Strain>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteStrainByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "strains/v2/{id}"
                    urlBuilder_.Append("strains/v2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StrainMetrcWrapper> GetStrainActiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "strains/v2/active"
                    urlBuilder_.Append("strains/v2/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StrainMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StrainMetrcWrapper> GetStrainInactiveAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "strains/v2/inactive"
                    urlBuilder_.Append("strains/v2/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StrainMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostStrainsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostStrainsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "strains/v2"
                    urlBuilder_.Append("strains/v2");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutStrainsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutStrainsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "strains/v2"
                    urlBuilder_.Append("strains/v2");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITagClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Tag>?> GetTagPackageAvailableAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Tag>?> GetTagPlantAvailableAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StagedTag>?> GetTagStagedAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagClient : MetrcBaseClient, ITagClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public TagClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Tag>?> GetTagPackageAvailableAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "tags/v2/package/available"
                    urlBuilder_.Append("tags/v2/package/available");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Tag>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Tag>?> GetTagPlantAvailableAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "tags/v2/plant/available"
                    urlBuilder_.Append("tags/v2/plant/available");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Tag>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StagedTag>?> GetTagStagedAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "tags/v2/staged"
                    urlBuilder_.Append("tags/v2/staged");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<StagedTag>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITransferClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferMetrcWrapper> GetTransferIncomingAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferMetrcWrapper> GetTransferOutgoingAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferMetrcWrapper> GetTransferRejectedAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="estimatedArrivalStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="estimatedArrivalEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferHubMetrcWrapper> GetTransferHubAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, DateTimeOffset? estimatedArrivalStart = null, DateTimeOffset? estimatedArrivalEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferDeliveryMetrcWrapper> GetTransferByIdDeliveriesAsync(long id, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferDeliveryTransporterMetrcWrapper> GetTransferDeliveryByIdTransportersAsync(long id, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferDeliveryTransporterDetailMetrcWrapper> GetTransferDeliveryByIdTransporterDetailsAsync(long id, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferDeliveryPackageMetrcWrapper> GetTransferDeliveryByIdPackagesAsync(long id, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferDeliveryPackageWholesaleMetrcWrapper> GetTransferDeliveryByIdPackageWholesaleAsync(long id, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequiredLabTestBatchMetrcWrapper> GetTransferDeliveryPackageByIdRequiredLabTestBatchesAsync(long id, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StringMetrcWrapper> GetTransferDeliveryPackageStatesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferTypeMetrcWrapper> GetTransferTypesAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostTransferExternalIncomingAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostTransferExternalIncomingRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTransferExternalIncomingAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutTransferExternalIncomingRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTransferExternalIncomingByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferMetrcWrapper> GetTransferTemplateOutgoingAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostTransferTemplateOutgoingAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostTransferTemplateOutgoingRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTransferTemplateOutgoingAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutTransferTemplateOutgoingRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferDeliveryMetrcWrapper> GetTransferTemplateOutgoingByIdDeliveriesAsync(long id, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferDeliveryTransporterMetrcWrapper> GetTransferTemplateOutgoingDeliveryByIdTransportersAsync(long id, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferDeliveryTransporterDetailMetrcWrapper> GetTransferTemplateOutgoingDeliveryByIdTransporterDetailsAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferDeliveryPackageMetrcWrapper> GetTransferTemplateOutgoingDeliveryByIdPackagesAsync(long id, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTransferTemplateOutgoingByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferClient : MetrcBaseClient, ITransferClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public TransferClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransferMetrcWrapper> GetTransferIncomingAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/incoming"
                    urlBuilder_.Append("transfers/v2/incoming");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransferMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransferMetrcWrapper> GetTransferOutgoingAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/outgoing"
                    urlBuilder_.Append("transfers/v2/outgoing");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransferMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransferMetrcWrapper> GetTransferRejectedAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/rejected"
                    urlBuilder_.Append("transfers/v2/rejected");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransferMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="estimatedArrivalStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="estimatedArrivalEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransferHubMetrcWrapper> GetTransferHubAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, DateTimeOffset? estimatedArrivalStart = null, DateTimeOffset? estimatedArrivalEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/hub"
                    urlBuilder_.Append("transfers/v2/hub");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (estimatedArrivalStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("estimatedArrivalStart")).Append('=').Append(System.Uri.EscapeDataString(estimatedArrivalStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (estimatedArrivalEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("estimatedArrivalEnd")).Append('=').Append(System.Uri.EscapeDataString(estimatedArrivalEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransferHubMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransferDeliveryMetrcWrapper> GetTransferByIdDeliveriesAsync(long id, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/{id}/deliveries"
                    urlBuilder_.Append("transfers/v2/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/deliveries");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransferDeliveryMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransferDeliveryTransporterMetrcWrapper> GetTransferDeliveryByIdTransportersAsync(long id, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/deliveries/{id}/transporters"
                    urlBuilder_.Append("transfers/v2/deliveries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transporters");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransferDeliveryTransporterMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransferDeliveryTransporterDetailMetrcWrapper> GetTransferDeliveryByIdTransporterDetailsAsync(long id, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/deliveries/{id}/transporters/details"
                    urlBuilder_.Append("transfers/v2/deliveries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transporters/details");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransferDeliveryTransporterDetailMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransferDeliveryPackageMetrcWrapper> GetTransferDeliveryByIdPackagesAsync(long id, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/deliveries/{id}/packages"
                    urlBuilder_.Append("transfers/v2/deliveries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/packages");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransferDeliveryPackageMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransferDeliveryPackageWholesaleMetrcWrapper> GetTransferDeliveryByIdPackageWholesaleAsync(long id, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/deliveries/{id}/packages/wholesale"
                    urlBuilder_.Append("transfers/v2/deliveries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/packages/wholesale");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransferDeliveryPackageWholesaleMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RequiredLabTestBatchMetrcWrapper> GetTransferDeliveryPackageByIdRequiredLabTestBatchesAsync(long id, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/deliveries/package/{id}/requiredlabtestbatches"
                    urlBuilder_.Append("transfers/v2/deliveries/package/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/requiredlabtestbatches");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequiredLabTestBatchMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StringMetrcWrapper> GetTransferDeliveryPackageStatesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/deliveries/packages/states"
                    urlBuilder_.Append("transfers/v2/deliveries/packages/states");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StringMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransferTypeMetrcWrapper> GetTransferTypesAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/types"
                    urlBuilder_.Append("transfers/v2/types");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransferTypeMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostTransferExternalIncomingAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostTransferExternalIncomingRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/external/incoming"
                    urlBuilder_.Append("transfers/v2/external/incoming");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutTransferExternalIncomingAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutTransferExternalIncomingRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/external/incoming"
                    urlBuilder_.Append("transfers/v2/external/incoming");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteTransferExternalIncomingByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/external/incoming/{id}"
                    urlBuilder_.Append("transfers/v2/external/incoming/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <param name="lastModifiedStart">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <param name="lastModifiedEnd">The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransferMetrcWrapper> GetTransferTemplateOutgoingAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/templates/outgoing"
                    urlBuilder_.Append("transfers/v2/templates/outgoing");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransferMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostTransferTemplateOutgoingAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostTransferTemplateOutgoingRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/templates/outgoing"
                    urlBuilder_.Append("transfers/v2/templates/outgoing");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutTransferTemplateOutgoingAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutTransferTemplateOutgoingRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/templates/outgoing"
                    urlBuilder_.Append("transfers/v2/templates/outgoing");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransferDeliveryMetrcWrapper> GetTransferTemplateOutgoingByIdDeliveriesAsync(long id, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/templates/outgoing/{id}/deliveries"
                    urlBuilder_.Append("transfers/v2/templates/outgoing/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/deliveries");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransferDeliveryMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransferDeliveryTransporterMetrcWrapper> GetTransferTemplateOutgoingDeliveryByIdTransportersAsync(long id, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/templates/outgoing/deliveries/{id}/transporters"
                    urlBuilder_.Append("transfers/v2/templates/outgoing/deliveries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transporters");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransferDeliveryTransporterMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransferDeliveryTransporterDetailMetrcWrapper> GetTransferTemplateOutgoingDeliveryByIdTransporterDetailsAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/templates/outgoing/deliveries/{id}/transporters/details"
                    urlBuilder_.Append("transfers/v2/templates/outgoing/deliveries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transporters/details");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransferDeliveryTransporterDetailMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransferDeliveryPackageMetrcWrapper> GetTransferTemplateOutgoingDeliveryByIdPackagesAsync(long id, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/templates/outgoing/deliveries/{id}/packages"
                    urlBuilder_.Append("transfers/v2/templates/outgoing/deliveries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/packages");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransferDeliveryPackageMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteTransferTemplateOutgoingByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v2/templates/outgoing/{id}"
                    urlBuilder_.Append("transfers/v2/templates/outgoing/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITransporterClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransporterDriverMetrcWrapper> GetTransporterDriversAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostTransporterDriversAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostTransporterDriversRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTransporterDriversAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutTransporterDriversRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransporterDriver> GetTransporterDriverByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTransporterDriverByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransporterVehicleMetrcWrapper> GetTransporterVehiclesAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostTransporterVehiclesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostTransporterVehiclesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTransporterVehiclesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutTransporterVehiclesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransporterVehicle> GetTransporterVehicleByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTransporterVehicleByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransporterClient : MetrcBaseClient, ITransporterClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public TransporterClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransporterDriverMetrcWrapper> GetTransporterDriversAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transporters/v2/drivers"
                    urlBuilder_.Append("transporters/v2/drivers");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransporterDriverMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostTransporterDriversAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostTransporterDriversRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transporters/v2/drivers"
                    urlBuilder_.Append("transporters/v2/drivers");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutTransporterDriversAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutTransporterDriversRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transporters/v2/drivers"
                    urlBuilder_.Append("transporters/v2/drivers");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransporterDriver> GetTransporterDriverByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transporters/v2/drivers/{id}"
                    urlBuilder_.Append("transporters/v2/drivers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransporterDriver>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteTransporterDriverByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transporters/v2/drivers/{id}"
                    urlBuilder_.Append("transporters/v2/drivers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransporterVehicleMetrcWrapper> GetTransporterVehiclesAsync(string licenseNumber, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transporters/v2/vehicles"
                    urlBuilder_.Append("transporters/v2/vehicles");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransporterVehicleMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostTransporterVehiclesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostTransporterVehiclesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transporters/v2/vehicles"
                    urlBuilder_.Append("transporters/v2/vehicles");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutTransporterVehiclesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutTransporterVehiclesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transporters/v2/vehicles"
                    urlBuilder_.Append("transporters/v2/vehicles");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransporterVehicle> GetTransporterVehicleByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transporters/v2/vehicles/{id}"
                    urlBuilder_.Append("transporters/v2/vehicles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransporterVehicle>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteTransporterVehicleByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transporters/v2/vehicles/{id}"
                    urlBuilder_.Append("transporters/v2/vehicles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IUnitOfMeasureClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UnitOfMeasureMetrcWrapper> GetUnitOfMeasureActiveAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UnitOfMeasureMetrcWrapper> GetUnitOfMeasureInactiveAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnitOfMeasureClient : MetrcBaseClient, IUnitOfMeasureClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public UnitOfMeasureClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UnitOfMeasureMetrcWrapper> GetUnitOfMeasureActiveAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "unitsofmeasure/v2/active"
                    urlBuilder_.Append("unitsofmeasure/v2/active");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UnitOfMeasureMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UnitOfMeasureMetrcWrapper> GetUnitOfMeasureInactiveAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "unitsofmeasure/v2/inactive"
                    urlBuilder_.Append("unitsofmeasure/v2/inactive");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UnitOfMeasureMetrcWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IWasteMethodClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WasteMethod>?> GetWasteMethodsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WasteMethodClient : MetrcBaseClient, IWasteMethodClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public WasteMethodClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = DefaultJsonSerializerSettings(new System.Text.Json.JsonSerializerOptions());
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;/br&gt;&lt;b&gt;Available In&lt;/b&gt;: ak, al, ca, co, dc, gu, il, ky, la, ma, md, me, mi, mn, mo, ms, mt, nj, nv, ny, oh, ok, or, ri, sd, va, wv
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WasteMethod>?> GetWasteMethodsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "wastemethods/v2"
                    urlBuilder_.Append("wastemethods/v2");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<WasteMethod>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Service Unavailable", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActiveIngredient
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("percentage")]
        public double? Percentage { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaregiverStatus
    {

        [System.Text.Json.Serialization.JsonPropertyName("caregiverLicenseNumber")]
        public string? CaregiverLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        public bool? Active { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class County
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CountyMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<County>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeletePlantBatchesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("plantBatch")]
        public string? PlantBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reasonNote")]
        public string? ReasonNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeletePlantsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteMethodName")]
        public string? WasteMethodName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteMaterialMixed")]
        public string? WasteMaterialMixed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteWeight")]
        public double? WasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteUnitOfMeasureName")]
        public string? WasteUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteReasonName")]
        public string? WasteReasonName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reasonNote")]
        public string? ReasonNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryReturnReason
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresNote")]
        public bool? RequiresNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresWasteWeight")]
        public bool? RequiresWasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresImmatureWasteWeight")]
        public bool? RequiresImmatureWasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresMatureWasteWeight")]
        public bool? RequiresMatureWasteWeight { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryReturnReasonMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<DeliveryReturnReason>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Destination
    {

        [System.Text.Json.Serialization.JsonPropertyName("salesCustomerType")]
        public string? SalesCustomerType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consumerId")]
        public string? ConsumerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientName")]
        public string? RecipientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressStreet1")]
        public string? RecipientAddressStreet1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressStreet2")]
        public string? RecipientAddressStreet2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressCity")]
        public string? RecipientAddressCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressCounty")]
        public string? RecipientAddressCounty { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressState")]
        public string? RecipientAddressState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressPostalCode")]
        public string? RecipientAddressPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<SalesDeliveryTransaction>? Transactions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Employee
    {

        [System.Text.Json.Serialization.JsonPropertyName("fullName")]
        public string? FullName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("license")]
        public License? License { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmployeeMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<Employee>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalDestination
    {

        [System.Text.Json.Serialization.JsonPropertyName("recipientLicenseNumber")]
        public string? RecipientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transferTypeName")]
        public string? TransferTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedRoute")]
        public string? PlannedRoute { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("grossWeight")]
        public double? GrossWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("grossUnitOfWeightId")]
        public string? GrossUnitOfWeightId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporters")]
        public System.Collections.Generic.ICollection<ExternalTransporter>? Transporters { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packages")]
        public System.Collections.Generic.ICollection<Package>? Packages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalTransporter
    {

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityLicenseNumber")]
        public string? TransporterFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverOccupationalLicenseNumber")]
        public string? DriverOccupationalLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverLicenseNumber")]
        public string? DriverLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isLayover")]
        public bool? IsLayover { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterDetails")]
        public TransferDeliveryTransporterDetail? TransporterDetails { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Facility
    {

        [System.Text.Json.Serialization.JsonPropertyName("HireDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? HireDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("IsOwner")]
        public bool? IsOwner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("IsManager")]
        public bool? IsManager { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("Occupations")]
        public System.Collections.Generic.ICollection<object>? Occupations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("Alias")]
        public string? Alias { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string? DisplayName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("CredentialedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? CredentialedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("SupportActivationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SupportActivationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("SupportExpirationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SupportExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("SupportLastPaidDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SupportLastPaidDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("FacilityType")]
        [System.ComponentModel.DataAnnotations.Required]
        public FacilityType FacilityType { get; set; } = new FacilityType();

        [System.Text.Json.Serialization.JsonPropertyName("License")]
        [System.ComponentModel.DataAnnotations.Required]
        public License License { get; set; } = new License();

        [System.Text.Json.Serialization.JsonPropertyName("isFinancialContact")]
        public bool? IsFinancialContact { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FacilityType
    {

        [System.Text.Json.Serialization.JsonPropertyName("isMedical")]
        public bool? IsMedical { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isRetail")]
        public bool? IsRetail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isHemp")]
        public bool? IsHemp { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isSalesDeliveryHub")]
        public bool? IsSalesDeliveryHub { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("restrictHarvestPlantRestoreTimeHours")]
        public int? RestrictHarvestPlantRestoreTimeHours { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalMemberPatientsAllowed")]
        public int? TotalMemberPatientsAllowed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canGrowPlants")]
        public bool? CanGrowPlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canCreateOpeningBalancePlantBatches")]
        public bool? CanCreateOpeningBalancePlantBatches { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canTagPlantBatches")]
        public bool? CanTagPlantBatches { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canAssignLocationsToPlantBatches")]
        public bool? CanAssignLocationsToPlantBatches { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantsRequirePatientAffiliation")]
        public bool? PlantsRequirePatientAffiliation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchesCanContainMotherPlants")]
        public bool? PlantBatchesCanContainMotherPlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canUpdatePlantStrains")]
        public bool? CanUpdatePlantStrains { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canTrackVegetativePlants")]
        public bool? CanTrackVegetativePlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canCreateImmaturePlantPackagesFromPlants")]
        public bool? CanCreateImmaturePlantPackagesFromPlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canPackageVegetativePlants")]
        public bool? CanPackageVegetativePlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canPackageWaste")]
        public bool? CanPackageWaste { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canReportHarvestSchedules")]
        public bool? CanReportHarvestSchedules { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canSubmitHarvestsForTesting")]
        public bool? CanSubmitHarvestsForTesting { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canRequireHarvestSampleLabTestBatches")]
        public bool? CanRequireHarvestSampleLabTestBatches { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canCreateOpeningBalancePackages")]
        public bool? CanCreateOpeningBalancePackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canCreateDerivedPackages")]
        public bool? CanCreateDerivedPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canAssignLocationsToPackages")]
        public bool? CanAssignLocationsToPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canUpdateLocationsOnPackages")]
        public bool? CanUpdateLocationsOnPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packagesRequirePatientAffiliation")]
        public bool? PackagesRequirePatientAffiliation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canCreateTradeSamplePackages")]
        public bool? CanCreateTradeSamplePackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canDonatePackages")]
        public bool? CanDonatePackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canSubmitPackagesForTesting")]
        public bool? CanSubmitPackagesForTesting { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canCreateProcessValidationPackages")]
        public bool? CanCreateProcessValidationPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canRequirePackageSampleLabTestBatches")]
        public bool? CanRequirePackageSampleLabTestBatches { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canRequestProductRemediation")]
        public bool? CanRequestProductRemediation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canRemediatePackagesWithFailedLabResults")]
        public bool? CanRemediatePackagesWithFailedLabResults { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canInfuseProducts")]
        public bool? CanInfuseProducts { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canDestroyProduct")]
        public bool? CanDestroyProduct { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canTestPackages")]
        public bool? CanTestPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canTransferFromExternalFacilities")]
        public bool? CanTransferFromExternalFacilities { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canSellToConsumers")]
        public bool? CanSellToConsumers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canSellToPatients")]
        public bool? CanSellToPatients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canSellToExternalPatients")]
        public bool? CanSellToExternalPatients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canSellToCaregivers")]
        public bool? CanSellToCaregivers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedSales")]
        public bool? AdvancedSales { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesRequirePatientNumber")]
        public bool? SalesRequirePatientNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesRequireExternalPatientNumber")]
        public bool? SalesRequireExternalPatientNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesRequireExternalPatientIdentificationMethod")]
        public bool? SalesRequireExternalPatientIdentificationMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesRequireCaregiverNumber")]
        public bool? SalesRequireCaregiverNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesRequireCaregiverPatientNumber")]
        public bool? SalesRequireCaregiverPatientNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canDeliverSalesToConsumers")]
        public bool? CanDeliverSalesToConsumers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryRequireConsumerId")]
        public bool? SalesDeliveryRequireConsumerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canDeliverSalesToPatients")]
        public bool? CanDeliverSalesToPatients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryRequirePatientNumber")]
        public bool? SalesDeliveryRequirePatientNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryRequireRecipientName")]
        public bool? SalesDeliveryRequireRecipientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canHaveMemberPatients")]
        public bool? CanHaveMemberPatients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canReportPatientCheckIns")]
        public bool? CanReportPatientCheckIns { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canSpecifyPatientSalesLimitExemption")]
        public bool? CanSpecifyPatientSalesLimitExemption { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canReportPatientsAdverseResponses")]
        public bool? CanReportPatientsAdverseResponses { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canReportStrainProperties")]
        public bool? CanReportStrainProperties { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canRecordProcessingJobs")]
        public bool? CanRecordProcessingJobs { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canRecordProductForDestruction")]
        public bool? CanRecordProductForDestruction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canClonePlantBatches")]
        public bool? CanClonePlantBatches { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testsRequireLabSample")]
        public bool? TestsRequireLabSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("restrictPlantBatchAdjustmentTimeHours")]
        public int? RestrictPlantBatchAdjustmentTimeHours { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canTakePlantBatchesOnTrip")]
        public bool? CanTakePlantBatchesOnTrip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canTakePlantsOnTrip")]
        public bool? CanTakePlantsOnTrip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canTakeHarvestsOnTrip")]
        public bool? CanTakeHarvestsOnTrip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canTakePackagesOnTrip")]
        public bool? CanTakePackagesOnTrip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canSellFromPackagesOnTrip")]
        public bool? CanSellFromPackagesOnTrip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryAllowPlannedRoute")]
        public bool? SalesDeliveryAllowPlannedRoute { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryAllowAddress")]
        public bool? SalesDeliveryAllowAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryAllowCity")]
        public bool? SalesDeliveryAllowCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryAllowState")]
        public bool? SalesDeliveryAllowState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryAllowCounty")]
        public bool? SalesDeliveryAllowCounty { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryAllowZip")]
        public bool? SalesDeliveryAllowZip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("retailerDelivery")]
        public bool? RetailerDelivery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("retailerDeliveryAllowTradeSamples")]
        public bool? RetailerDeliveryAllowTradeSamples { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("retailerDeliveryAllowDonations")]
        public bool? RetailerDeliveryAllowDonations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("retailerDeliveryRequirePrice")]
        public bool? RetailerDeliveryRequirePrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("retailerDeliveryAllowPartialPackages")]
        public bool? RetailerDeliveryAllowPartialPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canCreatePartialPackages")]
        public bool? CanCreatePartialPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canAdjustSourcePackagesWithPartials")]
        public bool? CanAdjustSourcePackagesWithPartials { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canReportOperationalExceptions")]
        public bool? CanReportOperationalExceptions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canReportAdulteration")]
        public bool? CanReportAdulteration { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canGenerateProductLabel")]
        public bool? CanGenerateProductLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canPrintProductLabel")]
        public bool? CanPrintProductLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canReceiveAssociateProductLabel")]
        public bool? CanReceiveAssociateProductLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canViewSourcePackages")]
        public bool? CanViewSourcePackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxExemptReportingFeesFacilityType")]
        public bool? TaxExemptReportingFeesFacilityType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxExemptTagOrdersFacilityType")]
        public bool? TaxExemptTagOrdersFacilityType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canDownloadProductLabel")]
        public bool? CanDownloadProductLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("restrictWholesalePriceEditDays")]
        public int? RestrictWholesalePriceEditDays { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Harvest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestType")]
        public string? HarvestType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceStrainCount")]
        public int? SourceStrainCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceStrainNames")]
        public string? SourceStrainNames { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strains")]
        public System.Collections.Generic.ICollection<string>? Strains { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dryingLocationId")]
        public int? DryingLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dryingLocationName")]
        public string? DryingLocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dryingLocationTypeName")]
        public string? DryingLocationTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dryingRoomId")]
        public int? DryingRoomId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dryingRoomName")]
        public string? DryingRoomName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentWeight")]
        public double? CurrentWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalWasteWeight")]
        public double? TotalWasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantCount")]
        public int? PlantCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalWetWeight")]
        public double? TotalWetWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRestoredWeight")]
        public double? TotalRestoredWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageCount")]
        public int? PackageCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPackagedWeight")]
        public double? TotalPackagedWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfWeightName")]
        public string? UnitOfWeightName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestingState")]
        public string? LabTestingState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestingStateDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LabTestingStateDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnHold")]
        public bool? IsOnHold { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestStartDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? HarvestStartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("finishedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? FinishedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("archivedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ArchivedDate { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LastModified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnTrip")]
        public bool? IsOnTrip { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HarvestMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<Harvest>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HarvestWaste
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteTypeName")]
        public string? WasteTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteWeight")]
        public double? WasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfWeightName")]
        public string? UnitOfWeightName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        public string? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HarvestWasteMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<HarvestWaste>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HarvestWasteType
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HarvestWasteTypeMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<HarvestWasteType>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ingredient
    {

        [System.Text.Json.Serialization.JsonPropertyName("harvestId")]
        public int? HarvestId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestName")]
        public string? HarvestName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        public double? Weight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfWeight")]
        public string? UnitOfWeight { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Item
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategoryName")]
        public string? ProductCategoryName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategoryType")]
        public string? ProductCategoryType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityType")]
        public string? QuantityType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultLabTestingState")]
        public string? DefaultLabTestingState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasureName")]
        public string? UnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvalStatus")]
        public string? ApprovalStatus { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("approvalStatusDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ApprovalStatusDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainId")]
        public int? StrainId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainName")]
        public string? StrainName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("administrationMethod")]
        public string? AdministrationMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdPercent")]
        public double? UnitCbdPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContent")]
        public double? UnitCbdContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContentUnitOfMeasureName")]
        public string? UnitCbdContentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContentDose")]
        public double? UnitCbdContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContentDoseUnitOfMeasureName")]
        public string? UnitCbdContentDoseUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcPercent")]
        public double? UnitThcPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContent")]
        public double? UnitThcContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentUnitOfMeasureName")]
        public string? UnitThcContentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentDose")]
        public double? UnitThcContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentDoseUnitOfMeasureName")]
        public string? UnitThcContentDoseUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitVolume")]
        public double? UnitVolume { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitVolumeUnitOfMeasureName")]
        public string? UnitVolumeUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitWeight")]
        public double? UnitWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitWeightUnitOfMeasureName")]
        public string? UnitWeightUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("servingSize")]
        public string? ServingSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplyDurationDays")]
        public int? SupplyDurationDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("numberOfDoses")]
        public int? NumberOfDoses { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitQuantity")]
        public double? UnitQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitQuantityUnitOfMeasureName")]
        public string? UnitQuantityUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ingredients")]
        public string? Ingredients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isUsed")]
        public bool? IsUsed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("publicIngredients")]
        public string? PublicIngredients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productImages")]
        public System.Collections.Generic.ICollection<ProductImage>? ProductImages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labelImages")]
        public System.Collections.Generic.ICollection<LabelImage>? LabelImages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packagingImages")]
        public System.Collections.Generic.ICollection<PackagingImage>? PackagingImages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isExpirationDateRequired")]
        public bool? IsExpirationDateRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isSellByDateRequired")]
        public bool? IsSellByDateRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isUseByDateRequired")]
        public bool? IsUseByDateRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemBrandId")]
        public long? ItemBrandId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("allergens")]
        public string? Allergens { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productPhotoDescription")]
        public string? ProductPhotoDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labelPhotoDescription")]
        public string? LabelPhotoDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packagingPhotoDescription")]
        public string? PackagingPhotoDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasExpirationDate")]
        public bool? HasExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasSellByDate")]
        public bool? HasSellByDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasUseByDate")]
        public bool? HasUseByDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestBatchNames")]
        public System.Collections.Generic.ICollection<string>? LabTestBatchNames { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ProductPDFDocuments")]
        public System.Collections.Generic.ICollection<ProductPdfDocument>? ProductPDFDocuments { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemBrand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemBrandMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<ItemBrand>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemCategory
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategoryType")]
        public string? ProductCategoryType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityType")]
        public string? QuantityType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresStrain")]
        public bool? RequiresStrain { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresItemBrand")]
        public bool? RequiresItemBrand { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresAdministrationMethod")]
        public bool? RequiresAdministrationMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresUnitCbdPercent")]
        public bool? RequiresUnitCbdPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresUnitCbdContent")]
        public bool? RequiresUnitCbdContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresUnitCbdContentDose")]
        public bool? RequiresUnitCbdContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresUnitThcPercent")]
        public bool? RequiresUnitThcPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresUnitThcContent")]
        public bool? RequiresUnitThcContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresUnitThcContentDose")]
        public bool? RequiresUnitThcContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresUnitVolume")]
        public bool? RequiresUnitVolume { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresUnitWeight")]
        public bool? RequiresUnitWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresServingSize")]
        public bool? RequiresServingSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresSupplyDurationDays")]
        public bool? RequiresSupplyDurationDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresNumberOfDoses")]
        public bool? RequiresNumberOfDoses { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresIngredients")]
        public bool? RequiresIngredients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresDescription")]
        public bool? RequiresDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresProductPhoto")]
        public bool? RequiresProductPhoto { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresLabelPhotos")]
        public int? RequiresLabelPhotos { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresPackagingPhotos")]
        public int? RequiresPackagingPhotos { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canContainSeeds")]
        public bool? CanContainSeeds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canBeRemediated")]
        public bool? CanBeRemediated { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresPublicIngredients")]
        public bool? RequiresPublicIngredients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresProductPhotos")]
        public int? RequiresProductPhotos { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canBeDestroyed")]
        public bool? CanBeDestroyed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresAllergens")]
        public bool? RequiresAllergens { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresProductPhotoDescription")]
        public bool? RequiresProductPhotoDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresLabelPhotoDescription")]
        public bool? RequiresLabelPhotoDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresPackagingPhotoDescription")]
        public bool? RequiresPackagingPhotoDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canBeRevised")]
        public bool? CanBeRevised { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("RequiresProductPDFDocuments")]
        public int? RequiresProductPDFDocuments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestBatchNames")]
        public string? LabTestBatchNames { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemCategoryMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<ItemCategory>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<Item>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JobTypeAttribute
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LastModified { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JobTypeAttributeMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<JobTypeAttribute>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabTest
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageId")]
        public long? PackageId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestResultId")]
        public long? LabTestResultId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labFacilityLicenseNumber")]
        public string? LabFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labFacilityName")]
        public string? LabFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageLabel")]
        public string? SourcePackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        public string? ProductName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategoryName")]
        public string? ProductCategoryName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testPerformedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? TestPerformedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("overallPassed")]
        public bool? OverallPassed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("revokedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RevokedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resultReleased")]
        public bool? ResultReleased { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("resultReleaseDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ResultReleaseDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testTypeName")]
        public string? TestTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testPassed")]
        public bool? TestPassed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testResultLevel")]
        public double? TestResultLevel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testComment")]
        public string? TestComment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testInformationalOnly")]
        public bool? TestInformationalOnly { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestDetailRevokedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LabTestDetailRevokedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ExpirationDateTime { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabTestBatch
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestTypes")]
        public System.Collections.Generic.ICollection<LabTestType>? LabTestTypes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabTestBatchMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<LabTestBatch>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabTestMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<LabTest>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabTestResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("labTestTypeName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string LabTestTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("passed")]
        public bool Passed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Notes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabTestType
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresTestResult")]
        public bool? RequiresTestResult { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("informationalOnly")]
        public bool? InformationalOnly { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("alwaysPasses")]
        public bool? AlwaysPasses { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestResultMode")]
        public string? LabTestResultMode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestResultMinimum")]
        public double? LabTestResultMinimum { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestResultMaximum")]
        public double? LabTestResultMaximum { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestResultExpirationDays")]
        public int? LabTestResultExpirationDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dependencyMode")]
        public string? DependencyMode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maxAllowedFailureCount")]
        public int? MaxAllowedFailureCount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabTestTypeMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<LabTestType>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabelImage
    {

        [System.Text.Json.Serialization.JsonPropertyName("fileSystemId")]
        public long? FileSystemId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class License
    {

        [System.Text.Json.Serialization.JsonPropertyName("Number")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("StartDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? StartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("EndDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EndDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("LicenseType")]
        public string? LicenseType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Location
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationTypeId")]
        public long? LocationTypeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationTypeName")]
        public string? LocationTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forPlantBatches")]
        public bool? ForPlantBatches { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forPlants")]
        public bool? ForPlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forHarvests")]
        public bool? ForHarvests { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forPackages")]
        public bool? ForPackages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<Location>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationType
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forPlantBatches")]
        public bool? ForPlantBatches { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forPlants")]
        public bool? ForPlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forHarvests")]
        public bool? ForHarvests { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forPackages")]
        public bool? ForPackages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationTypeMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<LocationType>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Package
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageType")]
        public string? PackageType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceHarvestNames")]
        public string? SourceHarvestNames { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceHarvestCount")]
        public int? SourceHarvestCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationId")]
        public int? LocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationName")]
        public string? LocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationTypeName")]
        public string? LocationTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("roomId")]
        public int? RoomId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("roomName")]
        public string? RoomName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasureName")]
        public string? UnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasureAbbreviation")]
        public string? UnitOfMeasureAbbreviation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemFromFacilityLicenseNumber")]
        public string? ItemFromFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemFromFacilityName")]
        public string? ItemFromFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packagedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? PackagedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("initialLabTestingState")]
        public string? InitialLabTestingState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestingState")]
        public string? LabTestingState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestingStateDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LabTestingStateDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isProductionBatch")]
        public bool? IsProductionBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productionBatchNumber")]
        public string? ProductionBatchNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceProductionBatchNumbers")]
        public string? SourceProductionBatchNumbers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTradeSample")]
        public bool? IsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonation")]
        public bool? IsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonationPersistent")]
        public bool? IsDonationPersistent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageIsDonation")]
        public bool? SourcePackageIsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageIsTradeSample")]
        public bool? SourcePackageIsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageCount")]
        public int? SourcePackageCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTestingSample")]
        public bool? IsTestingSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isProcessValidationTestingSample")]
        public bool? IsProcessValidationTestingSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceProcessingJobCount")]
        public int? SourceProcessingJobCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTradeSamplePersistent")]
        public bool? IsTradeSamplePersistent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productRequiresRemediation")]
        public bool? ProductRequiresRemediation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsRemediatedProduct")]
        public bool? ContainsRemediatedProduct { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RemediationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ReceivedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedFromManifestNumber")]
        public string? ReceivedFromManifestNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedFromFacilityLicenseNumber")]
        public string? ReceivedFromFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedFromFacilityName")]
        public string? ReceivedFromFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnHold")]
        public bool? IsOnHold { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("archivedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ArchivedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("finishedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? FinishedDate { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LastModified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        public Item? Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageLabels")]
        public string? SourcePackageLabels { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnTrip")]
        public bool? IsOnTrip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnRetailerDelivery")]
        public bool? IsOnRetailerDelivery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isFinished")]
        public bool? IsFinished { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sellByDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SellByDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useByDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? UseByDate { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("labTestingRecordedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LabTestingRecordedDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageAdjustReason
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresNote")]
        public bool? RequiresNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresWasteWeight")]
        public bool? RequiresWasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresImmatureWasteWeight")]
        public bool? RequiresImmatureWasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresMatureWasteWeight")]
        public bool? RequiresMatureWasteWeight { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageAdjustReasonMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<PackageAdjustReason>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageLabSample
    {

        [System.Text.Json.Serialization.JsonPropertyName("labFacilityLicenseNumber")]
        public string? LabFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labFacilityName")]
        public string? LabFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("overallPassed")]
        public bool? OverallPassed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testPerformedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? TestPerformedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resultReleased")]
        public bool? ResultReleased { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resultReleaseDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ResultReleaseDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testTypeName")]
        public string? TestTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testPassed")]
        public bool? TestPassed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testResultLevel")]
        public double? TestResultLevel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testComment")]
        public string? TestComment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testInformationalOnly")]
        public bool? TestInformationalOnly { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageType")]
        public string? PackageType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceHarvestCount")]
        public int? SourceHarvestCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageCount")]
        public int? SourcePackageCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceProcessingJobCount")]
        public int? SourceProcessingJobCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceHarvestNames")]
        public string? SourceHarvestNames { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageLabels")]
        public string? SourcePackageLabels { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationId")]
        public long? LocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationName")]
        public string? LocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationTypeName")]
        public string? LocationTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasureName")]
        public string? UnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasureAbbreviation")]
        public string? UnitOfMeasureAbbreviation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemFromFacilityLicenseNumber")]
        public string? ItemFromFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemFromFacilityName")]
        public string? ItemFromFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packagedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? PackagedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sellByDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SellByDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useByDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? UseByDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("initialLabTestingState")]
        public string? InitialLabTestingState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestingState")]
        public string? LabTestingState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestingStateDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LabTestingStateDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestingRecordedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LabTestingRecordedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isProductionBatch")]
        public bool? IsProductionBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productionBatchNumber")]
        public string? ProductionBatchNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceProductionBatchNumbers")]
        public string? SourceProductionBatchNumbers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTradeSample")]
        public bool? IsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTradeSamplePersistent")]
        public bool? IsTradeSamplePersistent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageIsTradeSample")]
        public bool? SourcePackageIsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonation")]
        public bool? IsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonationPersistent")]
        public bool? IsDonationPersistent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageIsDonation")]
        public bool? SourcePackageIsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTestingSample")]
        public bool? IsTestingSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isProcessValidationTestingSample")]
        public bool? IsProcessValidationTestingSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productRequiresRemediation")]
        public bool? ProductRequiresRemediation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsRemediatedProduct")]
        public bool? ContainsRemediatedProduct { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RemediationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ReceivedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedFromManifestNumber")]
        public string? ReceivedFromManifestNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedFromFacilityLicenseNumber")]
        public string? ReceivedFromFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedFromFacilityName")]
        public string? ReceivedFromFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnHold")]
        public bool? IsOnHold { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("archivedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ArchivedDate { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("finishedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? FinishedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnTrip")]
        public bool? IsOnTrip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnRetailerDelivery")]
        public bool? IsOnRetailerDelivery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageForProductDestruction")]
        public string? PackageForProductDestruction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LastModified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        public Item? Item { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageLabSampleMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<PackageLabSample>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<Package>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageSourceHarvest
    {

        [System.Text.Json.Serialization.JsonPropertyName("harvestedByFacilityLicenseNumber")]
        public string? HarvestedByFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestedByFacilityName")]
        public string? HarvestedByFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestStartDate")]
        public string? HarvestStartDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageSourceHarvestMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<PackageSourceHarvest>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageTransferred
    {

        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("PackageId")]
        public long PackageId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("RecipientFacilityLicenseNumber")]
        public string? RecipientFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("RecipientFacilityName")]
        public string? RecipientFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ManifestNumber")]
        public string? ManifestNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("PackageLabel")]
        public string? PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ExternalId")]
        public string? ExternalId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("SourceHarvestNames")]
        public string? SourceHarvestNames { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("SourcePackageLabels")]
        public string? SourcePackageLabels { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ProductName")]
        public string? ProductName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ProductCategoryName")]
        public string? ProductCategoryName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ItemStrainName")]
        public string? ItemStrainName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("LabTestingStateName")]
        public string? LabTestingStateName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ShippedQuantity")]
        public double? ShippedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ShippedUnitOfMeasureAbbreviation")]
        public string? ShippedUnitOfMeasureAbbreviation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("GrossWeight")]
        public double? GrossWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("GrossUnitOfWeightAbbreviation")]
        public string? GrossUnitOfWeightAbbreviation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ShipperWholesalePrice")]
        public double? ShipperWholesalePrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ReceivedQuantity")]
        public double? ReceivedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ReceivedUnitOfMeasureAbbreviation")]
        public string? ReceivedUnitOfMeasureAbbreviation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ReceiverWholesalePrice")]
        public double? ReceiverWholesalePrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ShipmentPackageStateName")]
        public string? ShipmentPackageStateName { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("ActualDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ActualDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("ReceivedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ReceivedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ProcessingJobTypeName")]
        public string? ProcessingJobTypeName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageTransferredMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<PackageTransferred>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackagingImage
    {

        [System.Text.Json.Serialization.JsonPropertyName("fileSystemId")]
        public long? FileSystemId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Patient
    {

        [System.Text.Json.Serialization.JsonPropertyName("patientId")]
        public long PatientId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("licenseNumber")]
        public string? LicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RegistrationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("licenseEffectiveStartDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LicenseEffectiveStartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("licenseEffectiveEndDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LicenseEffectiveEndDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recommendedPlants")]
        public int? RecommendedPlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recommendedSmokableQuantity")]
        public double? RecommendedSmokableQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasSalesLimitExemption")]
        public bool? HasSalesLimitExemption { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otherFacilitiesCount")]
        public int? OtherFacilitiesCount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatientCheckIn
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkInLocationId")]
        public long? CheckInLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkInLocationName")]
        public string? CheckInLocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationStartDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RegistrationStartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationExpiryDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RegistrationExpiryDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkInDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? CheckInDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatientCheckInLocation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatientCheckInLocationMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<PatientCheckInLocation>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatientCheckInMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<PatientCheckIn>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatientMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<Patient>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatientRegistrationLocation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatientRegistrationLocationMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<PatientRegistrationLocation>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatientStatus
    {

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        public bool? Active { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flowerOuncesAvailable")]
        public double? FlowerOuncesAvailable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("thcOuncesAvailable")]
        public double? ThcOuncesAvailable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purchaseAmountDays")]
        public double? PurchaseAmountDays { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Photo
    {

        [System.Text.Json.Serialization.JsonPropertyName("fileContents")]
        public string? FileContents { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contentType")]
        public string? ContentType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileDownloadName")]
        public string? FileDownloadName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Plant
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string? State { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("growthPhase")]
        public string? GrowthPhase { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchId")]
        public int? PlantBatchId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchName")]
        public string? PlantBatchName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchTypeId")]
        public int? PlantBatchTypeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchTypeName")]
        public string? PlantBatchTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainId")]
        public int? StrainId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainName")]
        public string? StrainName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationId")]
        public int? LocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationName")]
        public string? LocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationTypeName")]
        public string? LocationTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("roomId")]
        public int? RoomId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("roomName")]
        public string? RoomName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestId")]
        public int? HarvestId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestedUnitOfWeightName")]
        public string? HarvestedUnitOfWeightName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestedUnitOfWeightAbbreviation")]
        public string? HarvestedUnitOfWeightAbbreviation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestedWetWeight")]
        public double? HarvestedWetWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestCount")]
        public int? HarvestCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnHold")]
        public bool? IsOnHold { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? PlantedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vegetativeDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? VegetativeDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("floweringDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? FloweringDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? HarvestedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destroyedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? DestroyedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destroyedNote")]
        public string? DestroyedNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destroyedByUserName")]
        public string? DestroyedByUserName { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LastModified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groupTagTypeMax")]
        public int? GroupTagTypeMax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnTrip")]
        public bool? IsOnTrip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tagTypeMax")]
        public int? TagTypeMax { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantAdditive
    {

        [System.Text.Json.Serialization.JsonPropertyName("additiveTypeName")]
        public string? AdditiveTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productTradeName")]
        public string? ProductTradeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epaRegistrationNumber")]
        public string? EpaRegistrationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productSupplier")]
        public string? ProductSupplier { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("applicationDevice")]
        public string? ApplicationDevice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amountUnitOfMeasure")]
        public string? AmountUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmountApplied")]
        public double? TotalAmountApplied { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchId")]
        public int? PlantBatchId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchName")]
        public string? PlantBatchName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantCount")]
        public int? PlantCount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantAdditiveMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<PlantAdditive>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantBatch
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchTypeId")]
        public int? PlantBatchTypeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchTypeName")]
        public string? PlantBatchTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationId")]
        public int? LocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationName")]
        public string? LocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationTypeName")]
        public string? LocationTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("roomId")]
        public int? RoomId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("roomName")]
        public string? RoomName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainId")]
        public int? StrainId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainName")]
        public string? StrainName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("untrackedCount")]
        public int? UntrackedCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("trackedCount")]
        public int? TrackedCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("liveCount")]
        public int? LiveCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packagedCount")]
        public int? PackagedCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestedCount")]
        public int? HarvestedCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destroyedCount")]
        public int? DestroyedCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageId")]
        public int? SourcePackageId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageLabel")]
        public string? SourcePackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePlantId")]
        public int? SourcePlantId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePlantLabel")]
        public string? SourcePlantLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePlantBatchId")]
        public int? SourcePlantBatchId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePlantBatchName")]
        public string? SourcePlantBatchName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePlantBatchIds")]
        public System.Collections.Generic.ICollection<int>? SourcePlantBatchIds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePlantBatchNames")]
        public string? SourcePlantBatchNames { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("multiPlantBatch")]
        public bool? MultiPlantBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? PlantedDate { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LastModified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnTrip")]
        public bool? IsOnTrip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnHold")]
        public bool? IsOnHold { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sellByDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SellByDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useByDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? UseByDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantBatchMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<PlantBatch>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantBatchWaste
    {

        [System.Text.Json.Serialization.JsonPropertyName("PlantWasteNumber")]
        [System.ComponentModel.DataAnnotations.Required]
        public string PlantWasteNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("WasteMethodName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string WasteMethodName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("WasteWeight")]
        public double WasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("WasteUnitOfMeasureName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string WasteUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("WasteReasonName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string WasteReasonName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("PlantBatchId")]
        public long PlantBatchId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("PlantBatchName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string PlantBatchName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("PlantCount")]
        public int PlantCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("WasteDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly WasteDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantBatchWasteMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<PlantBatchWaste>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantBatchWasteReason
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresNote")]
        public bool? RequiresNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresWasteWeight")]
        public bool? RequiresWasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresImmatureWasteWeight")]
        public bool? RequiresImmatureWasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresMatureWasteWeight")]
        public bool? RequiresMatureWasteWeight { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantBatchWasteReasonMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<PlantBatchWasteReason>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<Plant>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantMotherOnHold
    {

        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("Label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("State")]
        public string? State { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("GrowthPhase")]
        public string? GrowthPhase { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("PlantBatchId")]
        public int? PlantBatchId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("PlantBatchName")]
        public string? PlantBatchName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("PlantBatchTypeId")]
        public int? PlantBatchTypeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("PlantBatchTypeName")]
        public string? PlantBatchTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("StrainId")]
        public int? StrainId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("StrainName")]
        public string? StrainName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("LocationId")]
        public int? LocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("LocationName")]
        public string? LocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("LocationTypeName")]
        public string? LocationTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("SublocationId")]
        public int? SublocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("SublocationName")]
        public string? SublocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("RoomId")]
        public int? RoomId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("RoomName")]
        public string? RoomName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("PatientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("HarvestId")]
        public int? HarvestId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("HarvestedUnitOfWeightName")]
        public string? HarvestedUnitOfWeightName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("HarvestedUnitOfWeightAbbreviation")]
        public string? HarvestedUnitOfWeightAbbreviation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("HarvestedWetWeight")]
        public double? HarvestedWetWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("HarvestCount")]
        public int? HarvestCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("IsOnHold")]
        public bool? IsOnHold { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("PlantedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? PlantedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("VegetativeDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? VegetativeDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("FloweringDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? FloweringDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("HarvestedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? HarvestedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("DestroyedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? DestroyedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("DestroyedNote")]
        public string? DestroyedNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("DestroyedByUserName")]
        public string? DestroyedByUserName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("MotherPlantDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? MotherPlantDate { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("LastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LastModified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("GroupTagTypeMax")]
        public int? GroupTagTypeMax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("IsOnTrip")]
        public bool? IsOnTrip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("TagTypeMax")]
        public int? TagTypeMax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ClonedCount")]
        public int? ClonedCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("SurvivedCount")]
        public int? SurvivedCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("DescendedCount")]
        public int? DescendedCount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantMotherOnHoldMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<PlantMotherOnHold>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantWaste
    {

        [System.Text.Json.Serialization.JsonPropertyName("PlantWasteNumber")]
        [System.ComponentModel.DataAnnotations.Required]
        public string PlantWasteNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("WasteMethodName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string WasteMethodName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("WasteWeight")]
        public double WasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("WasteUnitOfMeasureName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string WasteUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("WasteReasonName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string WasteReasonName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("PlantBatchId")]
        public long? PlantBatchId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("PlantBatchName")]
        public string? PlantBatchName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("PlantCount")]
        public int PlantCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("WasteDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly WasteDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantWasteMethod
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forPlants")]
        public bool? ForPlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forProductDestruction")]
        public bool? ForProductDestruction { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LastModified { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantWasteMethodMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<PlantWasteMethod>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantWasteMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<PlantWaste>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantWasteReason
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresNote")]
        public bool? RequiresNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresWasteWeight")]
        public bool? RequiresWasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresImmatureWasteWeight")]
        public bool? RequiresImmatureWasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresMatureWasteWeight")]
        public bool? RequiresMatureWasteWeight { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantWasteReasonMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<PlantWasteReason>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostHarvestPackageTestingRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("tag")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Tag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        public string? Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfWeight")]
        public string? UnitOfWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isProductionBatch")]
        public bool? IsProductionBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productionBatchNumber")]
        public string? ProductionBatchNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTradeSample")]
        public bool? IsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonation")]
        public bool? IsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productRequiresRemediation")]
        public bool? ProductRequiresRemediation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediateProduct")]
        public bool? RemediateProduct { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationMethodId")]
        public int? RemediationMethodId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RemediationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationSteps")]
        public object? RemediationSteps { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ingredients")]
        public System.Collections.Generic.ICollection<Ingredient>? Ingredients { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostHarvestPackagesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("tag")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Tag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        public string? Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfWeight")]
        public string? UnitOfWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isProductionBatch")]
        public bool? IsProductionBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productionBatchNumber")]
        public string? ProductionBatchNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTradeSample")]
        public bool? IsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonation")]
        public bool? IsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productRequiresRemediation")]
        public bool? ProductRequiresRemediation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediateProduct")]
        public bool? RemediateProduct { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationMethodId")]
        public int? RemediationMethodId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RemediationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationSteps")]
        public object? RemediationSteps { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ingredients")]
        public System.Collections.Generic.ICollection<Ingredient>? Ingredients { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostHarvestWasteRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteType")]
        public string? WasteType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfWeight")]
        public string? UnitOfWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteWeight")]
        public double? WasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostItemBrandRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostItemFileRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("FileName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string FileName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("EncodedImageBase64")]
        [System.ComponentModel.DataAnnotations.Required]
        public string EncodedImageBase64 { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostItemPhotoRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("fileName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string FileName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("encodedImageBase64")]
        [System.ComponentModel.DataAnnotations.Required]
        public string EncodedImageBase64 { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostItemsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategoryName")]
        public string? ProductCategoryName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategoryType")]
        public string? ProductCategoryType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityType")]
        public string? QuantityType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultLabTestingState")]
        public string? DefaultLabTestingState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasureName")]
        public string? UnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvalStatus")]
        public string? ApprovalStatus { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("approvalStatusDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ApprovalStatusDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainId")]
        public int? StrainId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainName")]
        public string? StrainName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("administrationMethod")]
        public string? AdministrationMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdPercent")]
        public double? UnitCbdPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContent")]
        public double? UnitCbdContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContentUnitOfMeasureName")]
        public string? UnitCbdContentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContentDose")]
        public double? UnitCbdContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContentDoseUnitOfMeasureName")]
        public string? UnitCbdContentDoseUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcPercent")]
        public double? UnitThcPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContent")]
        public double? UnitThcContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentUnitOfMeasureName")]
        public string? UnitThcContentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentDose")]
        public double? UnitThcContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentDoseUnitOfMeasureName")]
        public string? UnitThcContentDoseUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitVolume")]
        public double? UnitVolume { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitVolumeUnitOfMeasureName")]
        public string? UnitVolumeUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitWeight")]
        public double? UnitWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitWeightUnitOfMeasureName")]
        public string? UnitWeightUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("servingSize")]
        public string? ServingSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplyDurationDays")]
        public int? SupplyDurationDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("numberOfDoses")]
        public int? NumberOfDoses { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitQuantity")]
        public double? UnitQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitQuantityUnitOfMeasureName")]
        public string? UnitQuantityUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ingredients")]
        public string? Ingredients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isUsed")]
        public bool? IsUsed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("publicIngredients")]
        public string? PublicIngredients { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostLabTestRecordRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resultDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly ResultDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentFileName")]
        public string? DocumentFileName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentFileBase64")]
        public string? DocumentFileBase64 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.ICollection<LabTestResult>? Results { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostLocationsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationTypeName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string LocationTypeName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPackageAdjustRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public string? UnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentReason")]
        public string? AdjustmentReason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? AdjustmentDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reasonNote")]
        public string? ReasonNote { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPackagePlantingsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        [System.ComponentModel.DataAnnotations.Required]
        public string PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageAdjustmentAmount")]
        public double? PackageAdjustmentAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageAdjustmentUnitOfMeasureName")]
        public string? PackageAdjustmentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchName")]
        public string? PlantBatchName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchType")]
        public string? PlantBatchType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantCount")]
        public int PlantCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationName")]
        public string? LocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainName")]
        public string? StrainName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("plantedDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset PlantedDate { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("unpackagedDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset UnpackagedDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPackageTestingRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("tag")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Tag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        [System.ComponentModel.DataAnnotations.Required]
        public string UnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isProductionBatch")]
        public bool IsProductionBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productionBatchNumber")]
        public string? ProductionBatchNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonation")]
        public bool IsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productRequiresRemediation")]
        public bool ProductRequiresRemediation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useSameItem")]
        public bool UseSameItem { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly ActualDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ingredients")]
        public System.Collections.Generic.ICollection<Ingredient>? Ingredients { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPackagesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("tag")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Tag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        [System.ComponentModel.DataAnnotations.Required]
        public string UnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isProductionBatch")]
        public bool IsProductionBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productionBatchNumber")]
        public string? ProductionBatchNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonation")]
        public bool IsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productRequiresRemediation")]
        public bool ProductRequiresRemediation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useSameItem")]
        public bool UseSameItem { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly ActualDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ingredients")]
        public System.Collections.Generic.ICollection<Ingredient>? Ingredients { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPatientCheckInsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkInLocationId")]
        public long? CheckInLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationStartDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RegistrationStartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationExpiryDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RegistrationExpiryDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkInDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? CheckInDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPatientsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("licenseNumber")]
        [System.ComponentModel.DataAnnotations.Required]
        public string LicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("licenseEffectiveStartDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly LicenseEffectiveStartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("licenseEffectiveEndDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly LicenseEffectiveEndDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recommendedPlants")]
        public int RecommendedPlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recommendedSmokableQuantity")]
        public double RecommendedSmokableQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasSalesLimitExemption")]
        public bool HasSalesLimitExemption { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantAdditiveByLocationRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("additiveType")]
        public string? AdditiveType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productTradeName")]
        public string? ProductTradeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epaRegistrationNumber")]
        public string? EpaRegistrationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productSupplier")]
        public string? ProductSupplier { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("applicationDevice")]
        public string? ApplicationDevice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmountApplied")]
        public double? TotalAmountApplied { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmountUnitOfMeasure")]
        public string? TotalAmountUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("activeIngredients")]
        public System.Collections.Generic.ICollection<ActiveIngredient>? ActiveIngredients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationName")]
        public string? LocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantAdditiveByLocationUsingtemplateRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("AdditivesTemplateName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string AdditivesTemplateName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("Rate")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Rate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("Volume")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Volume { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("TotalAmountApplied")]
        public double TotalAmountApplied { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("TotalAmountUnitOfMeasure")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TotalAmountUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("LocationName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string LocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("SublocationName")]
        public string? SublocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ActualDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantAdditiveUsingtemplateRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("AdditivesTemplateName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string AdditivesTemplateName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("Rate")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Rate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("Volume")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Volume { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("TotalAmountApplied")]
        public double TotalAmountApplied { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("TotalAmountUnitOfMeasure")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TotalAmountUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("PlantLabels")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> PlantLabels { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("ActualDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantAdditivesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("additiveType")]
        public string? AdditiveType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productTradeName")]
        public string? ProductTradeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epaRegistrationNumber")]
        public string? EpaRegistrationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productSupplier")]
        public string? ProductSupplier { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("applicationDevice")]
        public string? ApplicationDevice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmountApplied")]
        public double? TotalAmountApplied { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmountUnitOfMeasure")]
        public string? TotalAmountUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("activeIngredients")]
        public System.Collections.Generic.ICollection<ActiveIngredient>? ActiveIngredients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantLabels")]
        public System.Collections.Generic.ICollection<string>? PlantLabels { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantBatchAdditiveUsingtemplateRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("AdditivesTemplateName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string AdditivesTemplateName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("Rate")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Rate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("Volume")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Volume { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("TotalAmountApplied")]
        public double TotalAmountApplied { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("TotalAmountUnitOfMeasure")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TotalAmountUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("PlantBatchName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string PlantBatchName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ActualDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantBatchAdditivesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("additiveType")]
        public string? AdditiveType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productTradeName")]
        public string? ProductTradeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epaRegistrationNumber")]
        public string? EpaRegistrationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productSupplier")]
        public string? ProductSupplier { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("applicationDevice")]
        public string? ApplicationDevice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmountApplied")]
        public double? TotalAmountApplied { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmountUnitOfMeasure")]
        public string? TotalAmountUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("activeIngredients")]
        public System.Collections.Generic.ICollection<ActiveIngredient>? ActiveIngredients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchName")]
        public string? PlantBatchName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantBatchAdjustRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchName")]
        public string? PlantBatchName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentReason")]
        public string? AdjustmentReason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentDate")]
        public string? AdjustmentDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reasonNote")]
        public string? ReasonNote { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantBatchGrowthPhaseRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startingTag")]
        public string? StartingTag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("growthPhase")]
        public string? GrowthPhase { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newLocation")]
        public string? NewLocation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("growthDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? GrowthDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantBatchPackageFromMotherPlantRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatch")]
        public string? PlantBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        public string? Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tag")]
        public string? Tag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTradeSample")]
        public bool? IsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonation")]
        public bool? IsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantBatchPackagesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatch")]
        public string? PlantBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        public string? Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tag")]
        public string? Tag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTradeSample")]
        public bool? IsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonation")]
        public bool? IsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantBatchPlantingsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strain")]
        public string? Strain { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantBatchSplitRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("plantBatch")]
        public string? PlantBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groupName")]
        public string? GroupName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strain")]
        public string? Strain { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantBatchWasteRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("wasteMethodName")]
        public string? WasteMethodName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mixedMaterial")]
        public string? MixedMaterial { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteWeight")]
        public double? WasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasureName")]
        public string? UnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reasonName")]
        public string? ReasonName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteDate")]
        public string? WasteDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchName")]
        public string? PlantBatchName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantManicureRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("plant")]
        public string? Plant { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        public double? Weight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfWeight")]
        public string? UnitOfWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dryingLocation")]
        public string? DryingLocation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestName")]
        public string? HarvestName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantPlantBatchPackagesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("plantLabel")]
        public string? PlantLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageTag")]
        public string? PackageTag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchType")]
        public string? PlantBatchType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        public string? Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTradeSample")]
        public bool? IsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonation")]
        public bool? IsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantPlantingsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("plantLabel")]
        public string? PlantLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchName")]
        public string? PlantBatchName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchType")]
        public string? PlantBatchType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantCount")]
        public int? PlantCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationName")]
        public string? LocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainName")]
        public string? StrainName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantWasteRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("wasteMethodName")]
        public string? WasteMethodName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mixedMaterial")]
        public string? MixedMaterial { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteWeight")]
        public double? WasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasureName")]
        public string? UnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reasonName")]
        public string? ReasonName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteDate")]
        public string? WasteDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchName")]
        public string? PlantBatchName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostProcessingAdjustRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentReason")]
        public string? AdjustmentReason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? AdjustmentDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentNote")]
        public string? AdjustmentNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countUnitOfMeasureName")]
        public string? CountUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("volumeUnitOfMeasureName")]
        public string? VolumeUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weightUnitOfMeasureName")]
        public string? WeightUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packages")]
        public System.Collections.Generic.ICollection<ProcessingPackageRequest>? Packages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostProcessingCreatePackagesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("jobName")]
        public string? JobName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tag")]
        public string? Tag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        public string? Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public string? UnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productionBatchNumber")]
        public string? ProductionBatchNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("finishProcessingJob")]
        public bool? FinishProcessingJob { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("finishDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? FinishDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteCountQuantity")]
        public int? WasteCountQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteCountUnitOfMeasureName")]
        public string? WasteCountUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteVolumeQuantity")]
        public double? WasteVolumeQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteVolumeUnitOfMeasureName")]
        public string? WasteVolumeUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteWeightQuantity")]
        public double? WasteWeightQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteWeightUnitOfMeasureName")]
        public string? WasteWeightUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("finishNote")]
        public string? FinishNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? PackageDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostProcessingJobTypesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("category")]
        public string? Category { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("processingSteps")]
        public string? ProcessingSteps { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public System.Collections.Generic.ICollection<string>? Attributes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostProcessingStartRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("jobName")]
        public string? JobName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("jobType")]
        public string? JobType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countUnitOfMeasure")]
        public string? CountUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("volumeUnitOfMeasure")]
        public string? VolumeUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weightUnitOfMeasure")]
        public string? WeightUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packages")]
        public System.Collections.Generic.ICollection<ProcessingPackageRequest>? Packages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? StartDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostSaleDeliveriesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("salesDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SalesDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesCustomerType")]
        public string? SalesCustomerType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consumerId")]
        public string? ConsumerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverEmployeeId")]
        public string? DriverEmployeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driversLicenseNumber")]
        public string? DriversLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientName")]
        public string? RecipientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressStreet1")]
        public string? RecipientAddressStreet1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressStreet2")]
        public string? RecipientAddressStreet2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressCity")]
        public string? RecipientAddressCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressCounty")]
        public string? RecipientAddressCounty { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressState")]
        public string? RecipientAddressState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressPostalCode")]
        public string? RecipientAddressPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedRoute")]
        public string? PlannedRoute { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<SaleTransaction>? Transactions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostSaleDeliveryRetailerDepartRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("retailerDeliveryId")]
        public long? RetailerDeliveryId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostSaleDeliveryRetailerEndRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("retailerDeliveryId")]
        public long? RetailerDeliveryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packages")]
        public System.Collections.Generic.ICollection<SalesDeliveryPackageEnd>? Packages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostSaleDeliveryRetailerRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? DateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverEmployeeId")]
        public string? DriverEmployeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driversLicenseNumber")]
        public string? DriversLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destinations")]
        public System.Collections.Generic.ICollection<Destination>? Destinations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packages")]
        public System.Collections.Generic.ICollection<SalesDeliveryPackage>? Packages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostSaleDeliveryRetailerRestockRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("retailerDeliveryId")]
        public long? RetailerDeliveryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? DateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destinations")]
        public System.Collections.Generic.ICollection<SalesDeliveryDestination>? Destinations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packages")]
        public System.Collections.Generic.ICollection<SalesDeliveryPackage>? Packages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostSaleDeliveryRetailerSaleRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("retailerDeliveryId")]
        public int? RetailerDeliveryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SalesDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesCustomerType")]
        public string? SalesCustomerType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consumerId")]
        public string? ConsumerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientName")]
        public string? RecipientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressStreet1")]
        public string? RecipientAddressStreet1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressStreet2")]
        public string? RecipientAddressStreet2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressCity")]
        public string? RecipientAddressCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressCounty")]
        public string? RecipientAddressCounty { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressState")]
        public string? RecipientAddressState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressPostalCode")]
        public string? RecipientAddressPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedRoute")]
        public string? PlannedRoute { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<SalesDeliveryTransaction>? Transactions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostSaleReceiptsRequest
    {

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("salesDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? SalesDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesCustomerType")]
        public string? SalesCustomerType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("caregiverLicenseNumber")]
        public string? CaregiverLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("identificationMethod")]
        public string? IdentificationMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<SaleReceiptTransaction>? Transactions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostStrainsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testingStatus")]
        public string? TestingStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("thcLevel")]
        public double? ThcLevel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cbdLevel")]
        public double? CbdLevel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indicaPercentage")]
        public double? IndicaPercentage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sativaPercentage")]
        public double? SativaPercentage { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostTransferExternalIncomingRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("shipperLicenseNumber")]
        public string? ShipperLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperName")]
        public string? ShipperName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperMainPhoneNumber")]
        public string? ShipperMainPhoneNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddress1")]
        public string? ShipperAddress1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddress2")]
        public string? ShipperAddress2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressCity")]
        public string? ShipperAddressCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressState")]
        public string? ShipperAddressState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressPostalCode")]
        public string? ShipperAddressPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityLicenseNumber")]
        public string? TransporterFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverOccupationalLicenseNumber")]
        public string? DriverOccupationalLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverLicenseNumber")]
        public string? DriverLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destinations")]
        public System.Collections.Generic.ICollection<ExternalDestination>? Destinations { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostTransferTemplateOutgoingRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("shipperLicenseNumber")]
        public string? ShipperLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperName")]
        public string? ShipperName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperMainPhoneNumber")]
        public string? ShipperMainPhoneNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddress1")]
        public string? ShipperAddress1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddress2")]
        public string? ShipperAddress2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressCity")]
        public string? ShipperAddressCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressState")]
        public string? ShipperAddressState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressPostalCode")]
        public string? ShipperAddressPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityLicenseNumber")]
        public string? TransporterFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverOccupationalLicenseNumber")]
        public string? DriverOccupationalLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverLicenseNumber")]
        public string? DriverLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destinations")]
        public System.Collections.Generic.ICollection<ExternalDestination>? Destinations { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostTransporterDriversRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("employeeId")]
        public string? EmployeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driversLicenseNumber")]
        public string? DriversLicenseNumber { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostTransporterVehiclesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("make")]
        public string? Make { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("model")]
        public string? Model { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("licensePlateNumber")]
        public string? LicensePlateNumber { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Processing
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProcessingJobType
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("categoryName")]
        public string? CategoryName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("processingSteps")]
        public string? ProcessingSteps { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public System.Collections.Generic.ICollection<string>? Attributes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProcessingJobTypeMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<ProcessingJobType>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProcessingMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<Processing>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProcessingPackageRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public string? UnitOfMeasure { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProcessingResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("ids")]
        public System.Collections.Generic.ICollection<long>? Ids { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warnings")]
        public string? Warnings { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductImage
    {

        [System.Text.Json.Serialization.JsonPropertyName("fileSystemId")]
        public long? FileSystemId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductLabel
    {

        [System.Text.Json.Serialization.JsonPropertyName("PackageId")]
        public long? PackageId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("TagId")]
        public long? TagId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("QrCount")]
        public int? QrCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("IsDiscontinued")]
        public bool? IsDiscontinued { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("IsChildFromParentWithLabel")]
        public bool? IsChildFromParentWithLabel { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("LastLabelGenerationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LastLabelGenerationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("IsActive")]
        public bool? IsActive { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductPdfDocument
    {

        [System.Text.Json.Serialization.JsonPropertyName("fileSystemId")]
        public long? FileSystemId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutHarvestFinishRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutHarvestLocationRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestName")]
        public string? HarvestName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dryingLocation")]
        public string? DryingLocation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutHarvestRenameRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("oldName")]
        public string? OldName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newName")]
        public string? NewName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutHarvestRestoreHarvestedPlantsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("harvestId")]
        public long? HarvestId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantTags")]
        public System.Collections.Generic.ICollection<string>? PlantTags { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutHarvestUnfinishRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutItemBrandRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutItemsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategoryName")]
        public string? ProductCategoryName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategoryType")]
        public string? ProductCategoryType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityType")]
        public string? QuantityType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultLabTestingState")]
        public string? DefaultLabTestingState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasureName")]
        public string? UnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvalStatus")]
        public string? ApprovalStatus { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("approvalStatusDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ApprovalStatusDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainId")]
        public int? StrainId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainName")]
        public string? StrainName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("administrationMethod")]
        public string? AdministrationMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdPercent")]
        public double? UnitCbdPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContent")]
        public double? UnitCbdContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContentUnitOfMeasureName")]
        public string? UnitCbdContentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContentDose")]
        public double? UnitCbdContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContentDoseUnitOfMeasureName")]
        public string? UnitCbdContentDoseUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcPercent")]
        public double? UnitThcPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContent")]
        public double? UnitThcContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentUnitOfMeasureName")]
        public string? UnitThcContentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentDose")]
        public double? UnitThcContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentDoseUnitOfMeasureName")]
        public string? UnitThcContentDoseUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitVolume")]
        public double? UnitVolume { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitVolumeUnitOfMeasureName")]
        public string? UnitVolumeUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitWeight")]
        public double? UnitWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitWeightUnitOfMeasureName")]
        public string? UnitWeightUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("servingSize")]
        public string? ServingSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplyDurationDays")]
        public int? SupplyDurationDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("numberOfDoses")]
        public int? NumberOfDoses { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitQuantity")]
        public double? UnitQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitQuantityUnitOfMeasureName")]
        public string? UnitQuantityUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ingredients")]
        public string? Ingredients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isUsed")]
        public bool? IsUsed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("publicIngredients")]
        public string? PublicIngredients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutLabTestLabTestDocumentRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("labTestResultId")]
        public long? LabTestResultId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentFileName")]
        public string? DocumentFileName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentFileBase64")]
        public string? DocumentFileBase64 { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutLabTestResultReleaseRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        public string? PackageLabel { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutLocationsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationTypeName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string LocationTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPackageAdjustRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public string? UnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentReason")]
        public string? AdjustmentReason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? AdjustmentDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reasonNote")]
        public string? ReasonNote { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPackageDecontaminateRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("PackageLabel")]
        [System.ComponentModel.DataAnnotations.Required]
        public string PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("DecontaminationMethodName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string DecontaminationMethodName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("DecontaminationDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly DecontaminationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("DecontaminationSteps")]
        public string? DecontaminationSteps { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPackageDonationFlagRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPackageDonationUnflagRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPackageExternalidRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("PackageLabel")]
        [System.ComponentModel.DataAnnotations.Required]
        public string PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ExternalId")]
        public string? ExternalId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPackageFinishRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPackageItemRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Item { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPackageLabTestRequiredRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiredLabTestBatches")]
        public System.Collections.Generic.ICollection<string>? RequiredLabTestBatches { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPackageLocationRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("moveDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? MoveDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPackageNoteRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        public string? PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPackageRemediateRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        public string? PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationMethodName")]
        public string? RemediationMethodName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RemediationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationSteps")]
        public string? RemediationSteps { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPackageTradeSampleFlagRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPackageTradeSampleUnflagRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPackageUnfinishRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPackageUseByDateRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sellByDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SellByDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useByDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? UseByDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPatientCheckInsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkInLocationId")]
        public long? CheckInLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationStartDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RegistrationStartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationExpiryDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RegistrationExpiryDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkInDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? CheckInDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPatientsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("licenseNumber")]
        public string? LicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newLicenseNumber")]
        public string? NewLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("licenseEffectiveStartDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LicenseEffectiveStartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("licenseEffectiveEndDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LicenseEffectiveEndDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recommendedPlants")]
        public int? RecommendedPlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recommendedSmokableQuantity")]
        public double? RecommendedSmokableQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasSalesLimitExemption")]
        public bool? HasSalesLimitExemption { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPlantAdjustRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("Label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("AdjustCount")]
        public int AdjustCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("AdjustReason")]
        [System.ComponentModel.DataAnnotations.Required]
        public string AdjustReason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ReasonNote")]
        public string? ReasonNote { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("AdjustmentDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset AdjustmentDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPlantBatchLocationRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("moveDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? MoveDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPlantBatchNameRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("Group")]
        public string? Group { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("NewGroup")]
        [System.ComponentModel.DataAnnotations.Required]
        public string NewGroup { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPlantBatchStrainRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainId")]
        public long? StrainId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainName")]
        public string? StrainName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPlantBatchTagRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("group")]
        public string? Group { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tagId")]
        public long? TagId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newTag")]
        public string? NewTag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("replaceDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ReplaceDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPlantGrowthPhaseRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newTag")]
        public string? NewTag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("growthPhase")]
        public string? GrowthPhase { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newLocation")]
        public string? NewLocation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("growthDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? GrowthDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPlantHarvestRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("plant")]
        public string? Plant { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        public double? Weight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfWeight")]
        public string? UnitOfWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dryingLocation")]
        public string? DryingLocation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestName")]
        public string? HarvestName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPlantLocationRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPlantMergeRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("targetPlantGroupLabel")]
        public string? TargetPlantGroupLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePlantGroupLabel")]
        public string? SourcePlantGroupLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mergeDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? MergeDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPlantSplitRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("splitDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SplitDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePlantLabel")]
        public string? SourcePlantLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantCount")]
        public int? PlantCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tagLabel")]
        public string? TagLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainLabel")]
        public string? StrainLabel { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPlantStrainRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainId")]
        public long? StrainId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainName")]
        public string? StrainName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPlantTagRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("group")]
        public string? Group { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tagId")]
        public long? TagId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newTag")]
        public string? NewTag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("replaceDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ReplaceDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutProcessingFinishRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("finishDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? FinishDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("finishNote")]
        public string? FinishNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCountWaste")]
        public double? TotalCountWaste { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteCountUnitOfMeasureName")]
        public string? WasteCountUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalVolumeWaste")]
        public double? TotalVolumeWaste { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteVolumeUnitOfMeasureName")]
        public string? WasteVolumeUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalWeightWaste")]
        public double? TotalWeightWaste { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteWeightUnitOfMeasureName")]
        public string? WasteWeightUnitOfMeasureName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutProcessingJobTypesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("categoryName")]
        public string? CategoryName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("processingSteps")]
        public string? ProcessingSteps { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public System.Collections.Generic.ICollection<string>? Attributes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutProcessingUnfinishRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutSaleDeliveriesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("salesDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SalesDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesCustomerType")]
        public string? SalesCustomerType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consumerId")]
        public string? ConsumerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverEmployeeId")]
        public string? DriverEmployeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driversLicenseNumber")]
        public string? DriversLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientName")]
        public string? RecipientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressStreet1")]
        public string? RecipientAddressStreet1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressStreet2")]
        public string? RecipientAddressStreet2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressCity")]
        public string? RecipientAddressCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressCounty")]
        public string? RecipientAddressCounty { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressState")]
        public string? RecipientAddressState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressPostalCode")]
        public string? RecipientAddressPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedRoute")]
        public string? PlannedRoute { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<SaleTransaction>? Transactions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutSaleDeliveryCompleteRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("acceptedPackages")]
        public System.Collections.Generic.ICollection<string>? AcceptedPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnedPackages")]
        public System.Collections.Generic.ICollection<ReturnedPackage>? ReturnedPackages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutSaleDeliveryHubAcceptRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutSaleDeliveryHubDepartRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutSaleDeliveryHubRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityId")]
        public string? TransporterFacilityId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverEmployeeId")]
        public string? DriverEmployeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driversLicenseNumber")]
        public string? DriversLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedRoute")]
        public string? PlannedRoute { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedArrivalDateTime { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutSaleDeliveryHubVerifyIdRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentType")]
        public string? PaymentType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutSaleDeliveryRetailerRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? DateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverEmployeeId")]
        public string? DriverEmployeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driversLicenseNumber")]
        public string? DriversLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destinations")]
        public System.Collections.Generic.ICollection<Destination>? Destinations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packages")]
        public System.Collections.Generic.ICollection<SalesDeliveryPackage>? Packages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutSaleReceiptFinalizeRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutSaleReceiptUnfinalizeRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutSaleReceiptsRequest
    {

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("salesDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? SalesDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesCustomerType")]
        public string? SalesCustomerType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("caregiverLicenseNumber")]
        public string? CaregiverLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("identificationMethod")]
        public string? IdentificationMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<SaleReceiptTransaction>? Transactions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutStrainsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testingStatus")]
        public string? TestingStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("thcLevel")]
        public double? ThcLevel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cbdLevel")]
        public double? CbdLevel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indicaPercentage")]
        public double? IndicaPercentage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sativaPercentage")]
        public double? SativaPercentage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutTransferExternalIncomingRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("shipperLicenseNumber")]
        public string? ShipperLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperName")]
        public string? ShipperName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperMainPhoneNumber")]
        public string? ShipperMainPhoneNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddress1")]
        public string? ShipperAddress1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddress2")]
        public string? ShipperAddress2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressCity")]
        public string? ShipperAddressCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressState")]
        public string? ShipperAddressState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressPostalCode")]
        public string? ShipperAddressPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityLicenseNumber")]
        public string? TransporterFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverOccupationalLicenseNumber")]
        public string? DriverOccupationalLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverLicenseNumber")]
        public string? DriverLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destinations")]
        public System.Collections.Generic.ICollection<ExternalDestination>? Destinations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transferId")]
        public long? TransferId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutTransferTemplateOutgoingRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("shipperLicenseNumber")]
        public string? ShipperLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperName")]
        public string? ShipperName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperMainPhoneNumber")]
        public string? ShipperMainPhoneNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddress1")]
        public string? ShipperAddress1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddress2")]
        public string? ShipperAddress2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressCity")]
        public string? ShipperAddressCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressState")]
        public string? ShipperAddressState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressPostalCode")]
        public string? ShipperAddressPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityLicenseNumber")]
        public string? TransporterFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverOccupationalLicenseNumber")]
        public string? DriverOccupationalLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverLicenseNumber")]
        public string? DriverLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destinations")]
        public System.Collections.Generic.ICollection<ExternalDestination>? Destinations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transferId")]
        public long? TransferId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutTransporterDriversRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("employeeId")]
        public string? EmployeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driversLicenseNumber")]
        public string? DriversLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutTransporterVehiclesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("make")]
        public string? Make { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("model")]
        public string? Model { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("licensePlateNumber")]
        public string? LicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequiredLabTestBatch
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageId")]
        public long? PackageId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestBatchId")]
        public long? LabTestBatchId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestBatchName")]
        public string? LabTestBatchName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequiredLabTestBatchMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<RequiredLabTestBatch>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Retailer
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("retailerDeliveryNumber")]
        public string? RetailerDeliveryNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("facilityLicenseNumber")]
        public string? FacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("facilityName")]
        public string? FacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? DateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverEmployeeId")]
        public string? DriverEmployeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driversLicenseNumber")]
        public string? DriversLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleInfo")]
        public string? VehicleInfo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("direction")]
        public string? Direction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("restockDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RestockDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPackages")]
        public int? TotalPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPrice")]
        public double? TotalPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPriceSold")]
        public double? TotalPriceSold { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("acceptedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? AcceptedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destinations")]
        public System.Collections.Generic.ICollection<object>? Destinations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? CompletedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("retailerDeliveryState")]
        public string? RetailerDeliveryState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("allowFullEdit")]
        public bool? AllowFullEdit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("leg")]
        public int? Leg { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("voidedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? VoidedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RecordedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordedByUserName")]
        public string? RecordedByUserName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LastModified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packages")]
        public System.Collections.Generic.ICollection<SalesDeliveryPackage>? Packages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RetailerMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<Retailer>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnedPackage
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnQuantityVerified")]
        public double? ReturnQuantityVerified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnUnitOfMeasure")]
        public string? ReturnUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnReason")]
        public string? ReturnReason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnReasonNote")]
        public string? ReturnReasonNote { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleDelivery
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryNumber")]
        public string? DeliveryNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("facilityLicenseNumber")]
        public string? FacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("facilityName")]
        public string? FacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityId")]
        public string? TransporterFacilityId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityLicenseNumber")]
        public string? TransporterFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityName")]
        public string? TransporterFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SalesDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesCustomerType")]
        public string? SalesCustomerType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consumerId")]
        public string? ConsumerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverEmployeeId")]
        public string? DriverEmployeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driversLicenseNumber")]
        public string? DriversLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientName")]
        public string? RecipientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedRoute")]
        public string? PlannedRoute { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("direction")]
        public string? Direction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedReturnDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedReturnDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualReturnDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualReturnDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedReturnArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedReturnArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualReturnArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualReturnArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPackages")]
        public int? TotalPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPrice")]
        public double? TotalPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("acceptedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? AcceptedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<SaleTransaction>? Transactions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? CompletedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryState")]
        public string? SalesDeliveryState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("voidedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? VoidedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RecordedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordedByUserName")]
        public string? RecordedByUserName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LastModified { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleDeliveryMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<SaleDelivery>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleReceipt
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiptNumber")]
        public string? ReceiptNumber { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("salesDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? SalesDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesCustomerType")]
        public string? SalesCustomerType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("caregiverLicenseNumber")]
        public string? CaregiverLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("identificationMethod")]
        public string? IdentificationMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externalReceiptNumber")]
        public string? ExternalReceiptNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPackages")]
        public int? TotalPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPrice")]
        public double? TotalPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<SaleReceiptTransaction>? Transactions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isFinal")]
        public bool? IsFinal { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("archivedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ArchivedDate { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? RecordedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordedByUserName")]
        public string? RecordedByUserName { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LastModified { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleReceiptMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<SaleReceipt>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleReceiptTransaction
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        public string? PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public string? UnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmount")]
        public double? TotalAmount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleTransaction
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageId")]
        public long? PackageId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        public string? PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        public string? ProductName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategoryName")]
        public string? ProductCategoryName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemStrainName")]
        public string? ItemStrainName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitCbdPercent")]
        public double? ItemUnitCbdPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitCbdContent")]
        public double? ItemUnitCbdContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitCbdContentUnitOfMeasureName")]
        public string? ItemUnitCbdContentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitCbdContentDose")]
        public double? ItemUnitCbdContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitCbdContentDoseUnitOfMeasureName")]
        public string? ItemUnitCbdContentDoseUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitThcPercent")]
        public double? ItemUnitThcPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitThcContent")]
        public double? ItemUnitThcContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitThcContentUnitOfMeasureName")]
        public string? ItemUnitThcContentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitThcContentDose")]
        public double? ItemUnitThcContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitThcContentDoseUnitOfMeasureName")]
        public string? ItemUnitThcContentDoseUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitVolume")]
        public double? ItemUnitVolume { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitVolumeUnitOfMeasureName")]
        public string? ItemUnitVolumeUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitWeight")]
        public double? ItemUnitWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitWeightUnitOfMeasureName")]
        public string? ItemUnitWeightUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemServingSize")]
        public string? ItemServingSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemSupplyDurationDays")]
        public int? ItemSupplyDurationDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitQuantity")]
        public double? ItemUnitQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitQuantityUnitOfMeasureName")]
        public string? ItemUnitQuantityUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantitySold")]
        public double? QuantitySold { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasureName")]
        public string? UnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasureAbbreviation")]
        public string? UnitOfMeasureAbbreviation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPrice")]
        public double? TotalPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryState")]
        public string? SalesDeliveryState { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("archivedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ArchivedDate { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("recordedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? RecordedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordedByUserName")]
        public string? RecordedByUserName { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LastModified { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesDeliveryDestination
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SalesDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesCustomerType")]
        public string? SalesCustomerType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consumerId")]
        public string? ConsumerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverEmployeeId")]
        public string? DriverEmployeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driversLicenseNumber")]
        public string? DriversLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientName")]
        public string? RecipientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressStreet1")]
        public string? RecipientAddressStreet1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressStreet2")]
        public string? RecipientAddressStreet2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressCity")]
        public string? RecipientAddressCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressCounty")]
        public string? RecipientAddressCounty { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressState")]
        public string? RecipientAddressState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressPostalCode")]
        public string? RecipientAddressPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedRoute")]
        public string? PlannedRoute { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<SalesDeliveryTransaction>? Transactions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesDeliveryPackage
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? DateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        public string? PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public string? UnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPrice")]
        public double? TotalPrice { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesDeliveryPackageEnd
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("endQuantity")]
        public double? EndQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("endUnitOfMeasure")]
        public string? EndUnitOfMeasure { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesDeliveryTransaction
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        public string? PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public string? UnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmount")]
        public double? TotalAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcPercent")]
        public string? UnitThcPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContent")]
        public string? UnitThcContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentUnitOfMeasure")]
        public string? UnitThcContentUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitWeight")]
        public string? UnitWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitWeightUnitOfMeasure")]
        public string? UnitWeightUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNumber")]
        public string? InvoiceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public double? Price { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("exciseTax")]
        public double? ExciseTax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cityTax")]
        public double? CityTax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countyTax")]
        public double? CountyTax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("municipalTax")]
        public double? MunicipalTax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountAmount")]
        public double? DiscountAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subTotal")]
        public double? SubTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesTax")]
        public double? SalesTax { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StagedTag
    {

        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("TagTypeName")]
        public string? TagTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("TagTypeId")]
        public long? TagTypeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("TagInventoryTypeName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TagInventoryTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("MaxGroupSize")]
        public int? MaxGroupSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("FacilityId")]
        public long? FacilityId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("Label")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("StatusName")]
        public string? StatusName { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("CommissionedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? CommissionedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("IsUsed")]
        public bool? IsUsed { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("UsedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? UsedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ProductLabel")]
        public ProductLabel? ProductLabel { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("DetachedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? DetachedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("IsArchived")]
        public bool? IsArchived { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("LastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LastModified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("IsStaged")]
        public bool? IsStaged { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("QrCount")]
        public int? QrCount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Strain
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testingStatus")]
        public string? TestingStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("thcLevel")]
        public double? ThcLevel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cbdLevel")]
        public double? CbdLevel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indicaPercentage")]
        public double? IndicaPercentage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sativaPercentage")]
        public double? SativaPercentage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isUsed")]
        public bool? IsUsed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("genetics")]
        public string? Genetics { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StrainMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<Strain>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StringMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<string>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tag
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tagTypeName")]
        public string? TagTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groupTagTypeId")]
        public long? GroupTagTypeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groupTagTypeName")]
        public string? GroupTagTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tagTypeId")]
        public long? TagTypeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tagInventoryTypeName")]
        public string? TagInventoryTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maxGroupSize")]
        public int? MaxGroupSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("facilityId")]
        public long? FacilityId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Transfer
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("manifestNumber")]
        public string? ManifestNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipmentLicenseType")]
        public string? ShipmentLicenseType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperFacilityLicenseNumber")]
        public string? ShipperFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperFacilityName")]
        public string? ShipperFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityLicenseNumber")]
        public string? TransporterFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityName")]
        public string? TransporterFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverOccupationalLicenseNumber")]
        public string? DriverOccupationalLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverVehicleLicenseNumber")]
        public string? DriverVehicleLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryCount")]
        public int? DeliveryCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedDeliveryCount")]
        public int? ReceivedDeliveryCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageCount")]
        public int? PackageCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedPackageCount")]
        public int? ReceivedPackageCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsPlantPackage")]
        public bool? ContainsPlantPackage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsProductPackage")]
        public bool? ContainsProductPackage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsTradeSample")]
        public bool? ContainsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsDonation")]
        public bool? ContainsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsTestingSample")]
        public bool? ContainsTestingSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsProductRequiresRemediation")]
        public bool? ContainsProductRequiresRemediation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsRemediatedProductPackage")]
        public bool? ContainsRemediatedProductPackage { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? CreatedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdByUserName")]
        public string? CreatedByUserName { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LastModified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryId")]
        public int? DeliveryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientFacilityLicenseNumber")]
        public string? RecipientFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientFacilityName")]
        public string? RecipientFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipmentTypeName")]
        public string? ShipmentTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipmentTransactionType")]
        public string? ShipmentTransactionType { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("actualDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ActualDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedArrivalDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("actualArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ActualArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryPackageCount")]
        public int? DeliveryPackageCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryReceivedPackageCount")]
        public int? DeliveryReceivedPackageCount { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("receivedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ReceivedDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("estimatedReturnDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedReturnDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("actualReturnDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ActualReturnDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("estimatedReturnArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedReturnArrivalDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("actualReturnArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ActualReturnArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isVoided")]
        public bool? IsVoided { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferDelivery
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientFacilityLicenseNumber")]
        public string? RecipientFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientFacilityName")]
        public string? RecipientFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipmentTypeName")]
        public string? ShipmentTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipmentTransactionType")]
        public string? ShipmentTransactionType { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("actualDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ActualDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedArrivalDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("actualArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ActualArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("grossWeight")]
        public double? GrossWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("grossUnitOfWeightId")]
        public string? GrossUnitOfWeightId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("grossUnitOfWeightName")]
        public string? GrossUnitOfWeightName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedRoute")]
        public string? PlannedRoute { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryPackageCount")]
        public int? DeliveryPackageCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryReceivedPackageCount")]
        public int? DeliveryReceivedPackageCount { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("receivedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ReceivedDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("estimatedReturnDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedReturnDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("actualReturnDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ActualReturnDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("estimatedReturnArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedReturnArrivalDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("actualReturnArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ActualReturnArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rejectedPackagesReturned")]
        public bool? RejectedPackagesReturned { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferDeliveryMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<TransferDelivery>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferDeliveryPackage
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageId")]
        public int? PackageId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        public string? PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageType")]
        public string? PackageType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceHarvestNames")]
        public string? SourceHarvestNames { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageLabels")]
        public string? SourcePackageLabels { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        public string? ProductName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategoryName")]
        public string? ProductCategoryName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public string? ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemName")]
        public string? ItemName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemCategoryName")]
        public string? ItemCategoryName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemStrainName")]
        public string? ItemStrainName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitCbdPercent")]
        public double? ItemUnitCbdPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitCbdContent")]
        public double? ItemUnitCbdContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitCbdContentUnitOfMeasureName")]
        public string? ItemUnitCbdContentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitCbdContentDose")]
        public double? ItemUnitCbdContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitCbdContentDoseUnitOfMeasureName")]
        public string? ItemUnitCbdContentDoseUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitThcPercent")]
        public double? ItemUnitThcPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitThcContent")]
        public double? ItemUnitThcContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitThcContentUnitOfMeasureName")]
        public string? ItemUnitThcContentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitThcContentDose")]
        public double? ItemUnitThcContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitThcContentDoseUnitOfMeasureName")]
        public string? ItemUnitThcContentDoseUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitVolume")]
        public double? ItemUnitVolume { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitVolumeUnitOfMeasureName")]
        public string? ItemUnitVolumeUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitWeight")]
        public double? ItemUnitWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitWeightUnitOfMeasureName")]
        public string? ItemUnitWeightUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemServingSize")]
        public string? ItemServingSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemSupplyDurationDays")]
        public int? ItemSupplyDurationDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitQuantity")]
        public double? ItemUnitQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitQuantityUnitOfMeasureName")]
        public string? ItemUnitQuantityUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestingState")]
        public string? LabTestingState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productionBatchNumber")]
        public string? ProductionBatchNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTradeSample")]
        public bool? IsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTradeSamplePersistent")]
        public bool? IsTradeSamplePersistent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonation")]
        public bool? IsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageIsDonation")]
        public bool? SourcePackageIsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageIsTradeSample")]
        public bool? SourcePackageIsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTestingSample")]
        public bool? IsTestingSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productRequiresRemediation")]
        public bool? ProductRequiresRemediation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsRemediatedProduct")]
        public bool? ContainsRemediatedProduct { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RemediationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipmentPackageState")]
        public string? ShipmentPackageState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippedQuantity")]
        public double? ShippedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippedUnitOfMeasureName")]
        public string? ShippedUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("grossUnitOfWeightName")]
        public string? GrossUnitOfWeightName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedQuantity")]
        public double? ReceivedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedUnitOfMeasureName")]
        public string? ReceivedUnitOfMeasureName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferDeliveryPackageMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<TransferDeliveryPackage>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferDeliveryPackageWholesale
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageId")]
        public int? PackageId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        public string? PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperWholesalePrice")]
        public double? ShipperWholesalePrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiverWholesalePrice")]
        public double? ReceiverWholesalePrice { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferDeliveryPackageWholesaleMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<TransferDeliveryPackageWholesale>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferDeliveryTransporter
    {

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityLicenseNumber")]
        public string? TransporterFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityName")]
        public string? TransporterFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterDirection")]
        public string? TransporterDirection { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferDeliveryTransporterDetail
    {

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverOccupationalLicenseNumber")]
        public string? DriverOccupationalLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverVehicleLicenseNumber")]
        public string? DriverVehicleLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDriverStartDateTime")]
        public string? ActualDriverStartDateTime { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferDeliveryTransporterDetailMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<TransferDeliveryTransporterDetail>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferDeliveryTransporterMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<TransferDeliveryTransporter>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferHub
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("manifestNumber")]
        public string? ManifestNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperFacilityLicenseNumber")]
        public string? ShipperFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperFacilityName")]
        public string? ShipperFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryCount")]
        public int? DeliveryCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedDeliveryCount")]
        public int? ReceivedDeliveryCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageCount")]
        public int? PackageCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedPackageCount")]
        public int? ReceivedPackageCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? CreatedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdByUserName")]
        public string? CreatedByUserName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LastModified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryId")]
        public long? DeliveryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientFacilityLicenseNumber")]
        public string? RecipientFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientFacilityName")]
        public string? RecipientFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipmentTypeName")]
        public string? ShipmentTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipmentTransactionType")]
        public int? ShipmentTransactionType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryPackageCount")]
        public int? DeliveryPackageCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryReceivedPackageCount")]
        public int? DeliveryReceivedPackageCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ReceivedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedReturnDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedReturnDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualReturnDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualReturnDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedReturnArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedReturnArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualReturnArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualReturnArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rejectedPackagesReturned")]
        public bool? RejectedPackagesReturned { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityLicenseNumber")]
        public string? TransporterFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityName")]
        public string? TransporterFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverOccupationalLicenseNumber")]
        public string? DriverOccupationalLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverVehicleLicenseNumber")]
        public string? DriverVehicleLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterAcceptedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? TransporterAcceptedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isLayover")]
        public bool? IsLayover { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterEstimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? TransporterEstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterActualDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? TransporterActualDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterEstimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? TransporterEstimatedArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterActualArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? TransporterActualArrivalDateTime { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferHubMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<TransferHub>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<Transfer>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferType
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forLicensedShipments")]
        public bool? ForLicensedShipments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forExternalIncomingShipments")]
        public bool? ForExternalIncomingShipments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forExternalOutgoingShipments")]
        public bool? ForExternalOutgoingShipments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresDestinationGrossWeight")]
        public bool? RequiresDestinationGrossWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresPackagesGrossWeight")]
        public bool? RequiresPackagesGrossWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        public string? TransactionType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferTypeMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<TransferType>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransporterDriver
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("facilityId")]
        public long? FacilityId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("employeeId")]
        public string? EmployeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driversLicenseNumber")]
        public string? DriversLicenseNumber { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransporterDriverMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<TransporterDriver>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransporterVehicle
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("facilityId")]
        public long? FacilityId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("make")]
        public string? Make { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("model")]
        public string? Model { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("licensePlateNumber")]
        public string? LicensePlateNumber { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransporterVehicleMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<TransporterVehicle>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnitOfMeasure
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityType")]
        public string? QuantityType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("abbreviation")]
        public string? Abbreviation { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnitOfMeasureMetrcWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<UnitOfMeasure>? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]
        public int? TotalRecords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int? PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordsOnPage")]
        public int? RecordsOnPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int? Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]
        public int? CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int? TotalPages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WasteMethod
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forPlants")]
        public bool? ForPlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forProductDestruction")]
        public bool? ForProductDestruction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LastModified { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore  649
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
#pragma warning restore 8765