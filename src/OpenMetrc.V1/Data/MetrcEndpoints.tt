<#@ template debug="true" hostspecific="true" language="C#"  #>
<#@ import namespace="System.Diagnostics" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ output extension=".cs" #>
// ReSharper disable once CheckNamespace
// ReSharper disable InconsistentNaming
namespace OpenMetrc;

<#
//Debugger.Launch();
var file = this.Host.ResolvePath(@"../../../state-summaries.json");
var stateSummaries = JArray.Parse(File.ReadAllText(file));

if (stateSummaries == null) #> //TODO: state-summaries.json was not found 
<# #>
enum MetrcEndpoint
{
<#
    var endpoints = GetDistinctEndpoints();#>
    <#= string.Join(",\r\n\t", endpoints) #>
}

static class MetrcEndpointExtensions
{
    public static IEnumerable<string> GetAvailableStates() => 
        new List<string> <#= GetDistinctStatesObject().Replace(",", ",\r\n\t\t\t") #>;

    public static IEnumerable<string> GetStates(MetrcEndpoint endpoint) => endpoint switch
    {
    <#
        foreach(var endpoint in endpoints)
        {
            var states = GetStatesObject(endpoint);
    #>
    MetrcEndpoint.<#= endpoint #> => new[] <#=states#>,
    <#}#>
    _ => throw new ArgumentOutOfRangeException(nameof(endpoint), endpoint, null)
    };
}<#


IEnumerable<string> GetDistinctEndpoints() => 
    (from ss in stateSummaries
    from s in ss["Sections"]
    from e in s["Endpoints"]
    where e.ToString().Contains("_v1")
    select e.ToString().Replace('-','_')).Distinct().OrderBy(e => e);

string GetDistinctStatesObject() {
    var states = stateSummaries.Select(ss => ss["State"].ToString()).Distinct().OrderBy(s => s);
    return JsonConvert.SerializeObject(states).Replace("[","{").Replace("]","}");
}

string GetStatesObject(JToken endpoint){
    var states = stateSummaries.Where(ss => ss["Sections"].Any(s => s["Endpoints"].Any(e => e.ToString().Replace('-','_') == endpoint.ToString()))).Select(ss => ss["State"]);
    return JsonConvert.SerializeObject(states).Replace("[","{").Replace("]","}");
}
#>