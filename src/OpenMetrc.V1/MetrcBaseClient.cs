//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace OpenMetrc.V1
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICaregiverClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Data returned by this endpoint is cached for up to one minute.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Lookup Caregivers
        /// </remarks>
        /// <param name="caregiverLicenseNumber">Route parameter caregiverLicenseNumber</param>
        /// <param name="licenseNumber">The license number of the Facility under which to get the Caregiver status.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaregiverStatus> GetCaregiverStatusAsync(string caregiverLicenseNumber, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaregiverClient : ICaregiverClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public CaregiverClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Data returned by this endpoint is cached for up to one minute.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Lookup Caregivers
        /// </remarks>
        /// <param name="caregiverLicenseNumber">Route parameter caregiverLicenseNumber</param>
        /// <param name="licenseNumber">The license number of the Facility under which to get the Caregiver status.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CaregiverStatus> GetCaregiverStatusAsync(string caregiverLicenseNumber, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (caregiverLicenseNumber == null)
                throw new System.ArgumentNullException("caregiverLicenseNumber");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "caregivers/v1/status/{caregiverLicenseNumber}"
                    urlBuilder_.Append("caregivers/v1/status/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(caregiverLicenseNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaregiverStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IEmployeeClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Employees
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Employee>?> GetEmployeesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmployeeClient : IEmployeeClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public EmployeeClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Employees
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Employee>?> GetEmployeesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "employees/v1"
                    urlBuilder_.Append("employees/v1");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Employee>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IFacilityClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// A Facility represents a building licensed for the growing, processing, and/or selling of product.
        /// </summary>
        /// <remarks>
        /// This endpoint provides a list of facilities for which the authenticated user has access.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Facility>?> GetFacilitiesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FacilityClient : IFacilityClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public FacilityClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// A Facility represents a building licensed for the growing, processing, and/or selling of product.
        /// </summary>
        /// <remarks>
        /// This endpoint provides a list of facilities for which the authenticated user has access.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Facility>?> GetFacilitiesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "facilities/v1"
                    urlBuilder_.Append("facilities/v1");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Facility>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IHarvestClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Harvest> GetHarvestByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Harvest>?> GetHarvestActiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Harvest>?> GetHarvestOnHoldAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Harvest>?> GetHarvestInactiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HarvestWasteType>?> GetHarvestWasteTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostHarvestCreatePackagesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostHarvestCreatePackagesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostHarvestCreatePackageTestingAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostHarvestCreatePackageTestingRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutHarvestMoveAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutHarvestMoveRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostHarvestRemoveWasteAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostHarvestRemoveWasteRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutHarvestRenameAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutHarvestRenameRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostHarvestFinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostHarvestFinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostHarvestUnfinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostHarvestUnfinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HarvestClient : IHarvestClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public HarvestClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Harvest> GetHarvestByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v1/{id}"
                    urlBuilder_.Append("harvests/v1/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Harvest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Harvest>?> GetHarvestActiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v1/active"
                    urlBuilder_.Append("harvests/v1/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Harvest>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Harvest>?> GetHarvestOnHoldAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v1/onhold"
                    urlBuilder_.Append("harvests/v1/onhold");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Harvest>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Harvest>?> GetHarvestInactiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v1/inactive"
                    urlBuilder_.Append("harvests/v1/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Harvest>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HarvestWasteType>?> GetHarvestWasteTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v1/waste/types"
                    urlBuilder_.Append("harvests/v1/waste/types");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<HarvestWasteType>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostHarvestCreatePackagesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostHarvestCreatePackagesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v1/create/packages"
                    urlBuilder_.Append("harvests/v1/create/packages");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostHarvestCreatePackageTestingAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostHarvestCreatePackageTestingRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v1/create/packages/testing"
                    urlBuilder_.Append("harvests/v1/create/packages/testing");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutHarvestMoveAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutHarvestMoveRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v1/move"
                    urlBuilder_.Append("harvests/v1/move");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostHarvestRemoveWasteAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostHarvestRemoveWasteRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v1/removewaste"
                    urlBuilder_.Append("harvests/v1/removewaste");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutHarvestRenameAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutHarvestRenameRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v1/rename"
                    urlBuilder_.Append("harvests/v1/rename");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostHarvestFinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostHarvestFinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v1/finish"
                    urlBuilder_.Append("harvests/v1/finish");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Harvests
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Harvest will be validated against the specified License Number. If not specified, the Harvest will be validated against all of the User's current Facilities. Please note that if the Harvest is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostHarvestUnfinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostHarvestUnfinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "harvests/v1/unfinish"
                    urlBuilder_.Append("harvests/v1/unfinish");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IItemClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Item will be validated against the specified License Number. If not specified, the Item will be validated against all of the User's current Facilities. Please note that if the Item is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Item> GetItemByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteItemByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Item>?> GetItemActiveAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive items.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Item>?> GetItemInactiveAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Categories will be retrived for the specified License Number. If not specified, the all Item Categories will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ItemCategory>?> GetItemCategoriesAsync(string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active item brands.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ItemBrand>?> GetItemBrandsAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The file system id of the image to return.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Photo> GetItemPhotoByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostItemCreateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostItemCreateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostItemUpdateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostItemUpdateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostItemPhotoAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostItemPhotoRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemClient : IItemClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public ItemClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Item will be validated against the specified License Number. If not specified, the Item will be validated against all of the User's current Facilities. Please note that if the Item is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Item> GetItemByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v1/{id}"
                    urlBuilder_.Append("items/v1/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Item>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteItemByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v1/{id}"
                    urlBuilder_.Append("items/v1/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Item>?> GetItemActiveAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v1/active"
                    urlBuilder_.Append("items/v1/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Item>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive items.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Item>?> GetItemInactiveAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v1/inactive"
                    urlBuilder_.Append("items/v1/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Item>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="licenseNumber">If specified, the Categories will be retrived for the specified License Number. If not specified, the all Item Categories will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ItemCategory>?> GetItemCategoriesAsync(string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v1/categories"
                    urlBuilder_.Append("items/v1/categories");
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ItemCategory>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active item brands.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ItemBrand>?> GetItemBrandsAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v1/brands"
                    urlBuilder_.Append("items/v1/brands");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ItemBrand>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The file system id of the image to return.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Photo> GetItemPhotoByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v1/photo/{id}"
                    urlBuilder_.Append("items/v1/photo/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Photo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostItemCreateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostItemCreateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v1/create"
                    urlBuilder_.Append("items/v1/create");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostItemUpdateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostItemUpdateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v1/update"
                    urlBuilder_.Append("items/v1/update");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Items
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostItemPhotoAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostItemPhotoRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "items/v1/photo"
                    urlBuilder_.Append("items/v1/photo");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ILabTestClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetLabTestStatesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LabTestType>?> GetLabTestTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LabTest>?> GetLabTestResultsAsync(long packageId, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostLabTestRecordAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostLabTestRecordRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutLabTestLabTestDocumentAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutLabTestLabTestDocumentRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutLabTestResultReleaseAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutLabTestResultReleaseRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">LabTestDocumentFileId</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LabTest>?> GetLabTestLabTestDocumentByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabTestClient : ILabTestClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public LabTestClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetLabTestStatesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "labtests/v1/states"
                    urlBuilder_.Append("labtests/v1/states");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LabTestType>?> GetLabTestTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "labtests/v1/types"
                    urlBuilder_.Append("labtests/v1/types");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<LabTestType>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LabTest>?> GetLabTestResultsAsync(long packageId, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (packageId == null)
                throw new System.ArgumentNullException("packageId");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "labtests/v1/results"
                    urlBuilder_.Append("labtests/v1/results");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("packageId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(packageId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<LabTest>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostLabTestRecordAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostLabTestRecordRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "labtests/v1/record"
                    urlBuilder_.Append("labtests/v1/record");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutLabTestLabTestDocumentAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutLabTestLabTestDocumentRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "labtests/v1/labtestdocument"
                    urlBuilder_.Append("labtests/v1/labtestdocument");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutLabTestResultReleaseAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutLabTestResultReleaseRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "labtests/v1/results/release"
                    urlBuilder_.Append("labtests/v1/results/release");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">LabTestDocumentFileId</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LabTest>?> GetLabTestLabTestDocumentByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "labtests/v1/labtestdocument/{id}"
                    urlBuilder_.Append("labtests/v1/labtestdocument/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<LabTest>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ILocationClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Location will be validated against the specified License Number. If not specified, the Location will be validated against all of the User's current Facilities. Please note that if the Location is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Location> GetLocationByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteLocationByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active locations.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Location>?> GetLocationActiveAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active location types.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LocationType>?> GetLocationTypesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostLocationCreateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostLocationCreateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostLocationUpdateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostLocationUpdateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationClient : ILocationClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public LocationClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Location will be validated against the specified License Number. If not specified, the Location will be validated against all of the User's current Facilities. Please note that if the Location is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Location> GetLocationByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "locations/v1/{id}"
                    urlBuilder_.Append("locations/v1/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Location>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteLocationByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "locations/v1/{id}"
                    urlBuilder_.Append("locations/v1/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active locations.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Location>?> GetLocationActiveAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "locations/v1/active"
                    urlBuilder_.Append("locations/v1/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Location>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active location types.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LocationType>?> GetLocationTypesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "locations/v1/types"
                    urlBuilder_.Append("locations/v1/types");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<LocationType>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostLocationCreateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostLocationCreateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "locations/v1/create"
                    urlBuilder_.Append("locations/v1/create");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Locations
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostLocationUpdateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostLocationUpdateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "locations/v1/update"
                    urlBuilder_.Append("locations/v1/update");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPackageClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Package will be validated against the specified License Number. If not specified, the Package will be validated against all of the User's current Facilities. Please note that if the Package is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Package> GetPackageByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="label">Route parameter label</param>
        /// <param name="licenseNumber">If specified, the Package will be validated against the specified License Number. If not specified, the Package will be validated against all of the User's current Facilities. Please note that if the Package is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Package> GetPackageByLabelAsync(string label, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active packages.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Package>?> GetPackageActiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of packages on hold.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Package>?> GetPackageOnHoldAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive packages.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Package>?> GetPackageInactiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetPackageTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PackageAdjustReason>?> GetPackageAdjustReasonsAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPackageCreateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageCreateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPackageCreateTestingAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageCreateTestingRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants • View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPackageCreatePlantingsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageCreatePlantingsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPackageChangeItemAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageChangeItemRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory • Manage Package Notes
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPackageChangeNoteAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageChangeNoteRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPackageChangeLocationsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageChangeLocationsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPackageAdjustAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageAdjustRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPackageRemediateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageRemediateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPackageFinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageFinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPackageUnfinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageUnfinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageClient : IPackageClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PackageClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Package will be validated against the specified License Number. If not specified, the Package will be validated against all of the User's current Facilities. Please note that if the Package is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Package> GetPackageByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v1/{id}"
                    urlBuilder_.Append("packages/v1/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Package>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="label">Route parameter label</param>
        /// <param name="licenseNumber">If specified, the Package will be validated against the specified License Number. If not specified, the Package will be validated against all of the User's current Facilities. Please note that if the Package is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Package> GetPackageByLabelAsync(string label, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (label == null)
                throw new System.ArgumentNullException("label");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v1/{label}"
                    urlBuilder_.Append("packages/v1/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(label, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Package>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active packages.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Package>?> GetPackageActiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v1/active"
                    urlBuilder_.Append("packages/v1/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Package>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of packages on hold.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Package>?> GetPackageOnHoldAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v1/onhold"
                    urlBuilder_.Append("packages/v1/onhold");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Package>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive packages.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Package>?> GetPackageInactiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v1/inactive"
                    urlBuilder_.Append("packages/v1/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Package>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetPackageTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v1/types"
                    urlBuilder_.Append("packages/v1/types");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PackageAdjustReason>?> GetPackageAdjustReasonsAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v1/adjust/reasons"
                    urlBuilder_.Append("packages/v1/adjust/reasons");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PackageAdjustReason>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPackageCreateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageCreateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v1/create"
                    urlBuilder_.Append("packages/v1/create");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPackageCreateTestingAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageCreateTestingRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v1/create/testing"
                    urlBuilder_.Append("packages/v1/create/testing");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants • View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPackageCreatePlantingsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageCreatePlantingsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v1/create/plantings"
                    urlBuilder_.Append("packages/v1/create/plantings");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPackageChangeItemAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageChangeItemRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v1/change/item"
                    urlBuilder_.Append("packages/v1/change/item");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory • Manage Package Notes
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPackageChangeNoteAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPackageChangeNoteRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v1/change/note"
                    urlBuilder_.Append("packages/v1/change/note");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPackageChangeLocationsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageChangeLocationsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v1/change/locations"
                    urlBuilder_.Append("packages/v1/change/locations");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPackageAdjustAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageAdjustRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v1/adjust"
                    urlBuilder_.Append("packages/v1/adjust");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPackageRemediateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageRemediateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v1/remediate"
                    urlBuilder_.Append("packages/v1/remediate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPackageFinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageFinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v1/finish"
                    urlBuilder_.Append("packages/v1/finish");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Packages • Manage Packages Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPackageUnfinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPackageUnfinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "packages/v1/unfinish"
                    urlBuilder_.Append("packages/v1/unfinish");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPatientClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Patient will be validated against the specified License Number. If not specified, the Patient will be validated against all of the User's current Facilities. Please note that if the Patient is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Patient> GetPatientByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePatientByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active patients.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Patient>?> GetPatientActiveAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPatientAddAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPatientAddRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPatientUpdateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPatientUpdateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatientClient : IPatientClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PatientClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Patient will be validated against the specified License Number. If not specified, the Patient will be validated against all of the User's current Facilities. Please note that if the Patient is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Patient> GetPatientByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patients/v1/{id}"
                    urlBuilder_.Append("patients/v1/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Patient>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeletePatientByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patients/v1/{id}"
                    urlBuilder_.Append("patients/v1/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active patients.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Patient>?> GetPatientActiveAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patients/v1/active"
                    urlBuilder_.Append("patients/v1/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Patient>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPatientAddAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPatientAddRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patients/v1/add"
                    urlBuilder_.Append("patients/v1/add");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Patients
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPatientUpdateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPatientUpdateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patients/v1/update"
                    urlBuilder_.Append("patients/v1/update");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPatientCheckInClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PatientCheckInLocation>?> GetPatientCheckInLocationsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManagePatientsCheckIns
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PatientCheckIn>?> GetPatientCheckInsAsync(string licenseNumber, DateOnly? checkinDateStart = null, DateOnly? checkinDateEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManagePatientsCheckIns
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPatientCheckInsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPatientCheckInsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManagePatientsCheckIns
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPatientCheckInsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPatientCheckInsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManagePatientsCheckIns
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePatientCheckInByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatientCheckInClient : IPatientCheckInClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PatientCheckInClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PatientCheckInLocation>?> GetPatientCheckInLocationsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patient-checkins/v1/locations"
                    urlBuilder_.Append("patient-checkins/v1/locations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PatientCheckInLocation>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManagePatientsCheckIns
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PatientCheckIn>?> GetPatientCheckInsAsync(string licenseNumber, DateOnly? checkinDateStart = null, DateOnly? checkinDateEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patient-checkins/v1"
                    urlBuilder_.Append("patient-checkins/v1");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (checkinDateStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("checkinDateStart")).Append('=').Append(System.Uri.EscapeDataString(checkinDateStart.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (checkinDateEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("checkinDateEnd")).Append('=').Append(System.Uri.EscapeDataString(checkinDateEnd.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PatientCheckIn>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManagePatientsCheckIns
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPatientCheckInsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPatientCheckInsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patient-checkins/v1"
                    urlBuilder_.Append("patient-checkins/v1");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManagePatientsCheckIns
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPatientCheckInsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPatientCheckInsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patient-checkins/v1"
                    urlBuilder_.Append("patient-checkins/v1");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManagePatientsCheckIns
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeletePatientCheckInByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patient-checkins/v1/{id}"
                    urlBuilder_.Append("patient-checkins/v1/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPatientStatusClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Data returned by this endpoint is cached for up to one minute.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Lookup Patients
        /// </remarks>
        /// <param name="patientLicenseNumber">Route parameter patientLicenseNumber</param>
        /// <param name="licenseNumber">The license number of the Facility under which to get the Patient Status.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PatientStatus>?> GetPatientStatusesAsync(string patientLicenseNumber, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatientStatusClient : IPatientStatusClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PatientStatusClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Data returned by this endpoint is cached for up to one minute.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Lookup Patients
        /// </remarks>
        /// <param name="patientLicenseNumber">Route parameter patientLicenseNumber</param>
        /// <param name="licenseNumber">The license number of the Facility under which to get the Patient Status.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PatientStatus>?> GetPatientStatusesAsync(string patientLicenseNumber, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (patientLicenseNumber == null)
                throw new System.ArgumentNullException("patientLicenseNumber");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "patients/v1/statuses/{patientLicenseNumber}"
                    urlBuilder_.Append("patients/v1/statuses/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(patientLicenseNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PatientStatus>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPlantClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;:
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetPlantAdditiveTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Plant will be validated against the specified License Number. If not specified, the Plant will be validated against all of the User's current Facilities. Please note that if the Plant is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Plant> GetPlantByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="label">Route parameter label</param>
        /// <param name="licenseNumber">If specified, the Plant will be validated against the specified License Number. If not specified, the Plant will be validated against all of the User's current Facilities. Please note that if the Plant is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Plant> GetPlantByLabelAsync(string label, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of vegetating plants.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Plant>?> GetPlantVegetativeAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of flowering plants.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Plant>?> GetPlantFloweringAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of plants on hold.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Plant>?> GetPlantOnHoldAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive plants.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Plant>?> GetPlantInactiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View/Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record plant additives.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlantAdditive>?> GetPlantAdditivesAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record plant additives.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantAdditivesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantAdditivesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of available Plant Growth Phases.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetPlantGrowthPhasesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlantWasteReason>?> GetPlantWasteReasonsAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants • Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record plant additives.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantAdditiveByLocationAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantAdditiveByLocationRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory • View Veg/Flower Plants • Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantCreatePlantingsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantCreatePlantingsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory • View Veg/Flower Plants • Manage Veg/Flower Plants Inventory • View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantCreatePlantBatchPackagesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantCreatePlantBatchPackagesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manicure/Harvest Veg/Flower Plants
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantManicurePlantsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantManicurePlantsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantMovePlantsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantMovePlantsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantChangeGrowthPhasesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantChangeGrowthPhasesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manicure/Harvest Veg/Flower Plants
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantHarvestPlantsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantHarvestPlantsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Destroy Veg/Flower Plants
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePlantsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<DeletePlantsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Waste
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantWasteAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantWasteRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlantWasteMethod>?> GetPlantWasteMethodAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantClient : IPlantClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PlantClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;:
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetPlantAdditiveTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1/additives/types"
                    urlBuilder_.Append("plants/v1/additives/types");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Plant will be validated against the specified License Number. If not specified, the Plant will be validated against all of the User's current Facilities. Please note that if the Plant is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Plant> GetPlantByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1/{id}"
                    urlBuilder_.Append("plants/v1/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Plant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="label">Route parameter label</param>
        /// <param name="licenseNumber">If specified, the Plant will be validated against the specified License Number. If not specified, the Plant will be validated against all of the User's current Facilities. Please note that if the Plant is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Plant> GetPlantByLabelAsync(string label, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (label == null)
                throw new System.ArgumentNullException("label");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1/{label}"
                    urlBuilder_.Append("plants/v1/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(label, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Plant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of vegetating plants.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Plant>?> GetPlantVegetativeAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1/vegetative"
                    urlBuilder_.Append("plants/v1/vegetative");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Plant>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of flowering plants.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Plant>?> GetPlantFloweringAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1/flowering"
                    urlBuilder_.Append("plants/v1/flowering");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Plant>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of plants on hold.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Plant>?> GetPlantOnHoldAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1/onhold"
                    urlBuilder_.Append("plants/v1/onhold");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Plant>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive plants.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Plant>?> GetPlantInactiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1/inactive"
                    urlBuilder_.Append("plants/v1/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Plant>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View/Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record plant additives.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlantAdditive>?> GetPlantAdditivesAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1/additives"
                    urlBuilder_.Append("plants/v1/additives");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PlantAdditive>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record plant additives.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantAdditivesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantAdditivesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1/additives"
                    urlBuilder_.Append("plants/v1/additives");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of available Plant Growth Phases.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetPlantGrowthPhasesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1/growthphases"
                    urlBuilder_.Append("plants/v1/growthphases");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlantWasteReason>?> GetPlantWasteReasonsAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1/waste/reasons"
                    urlBuilder_.Append("plants/v1/waste/reasons");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PlantWasteReason>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants • Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record plant additives.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantAdditiveByLocationAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantAdditiveByLocationRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1/additives/bylocation"
                    urlBuilder_.Append("plants/v1/additives/bylocation");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory • View Veg/Flower Plants • Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantCreatePlantingsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantCreatePlantingsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1/create/plantings"
                    urlBuilder_.Append("plants/v1/create/plantings");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory • View Veg/Flower Plants • Manage Veg/Flower Plants Inventory • View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantCreatePlantBatchPackagesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantCreatePlantBatchPackagesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1/create/plantbatch/packages"
                    urlBuilder_.Append("plants/v1/create/plantbatch/packages");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manicure/Harvest Veg/Flower Plants
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantManicurePlantsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantManicurePlantsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1/manicureplants"
                    urlBuilder_.Append("plants/v1/manicureplants");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantMovePlantsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantMovePlantsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1/moveplants"
                    urlBuilder_.Append("plants/v1/moveplants");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantChangeGrowthPhasesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantChangeGrowthPhasesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1/changegrowthphases"
                    urlBuilder_.Append("plants/v1/changegrowthphases");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Manicure/Harvest Veg/Flower Plants
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantHarvestPlantsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantHarvestPlantsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1/harvestplants"
                    urlBuilder_.Append("plants/v1/harvestplants");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Veg/Flower Plants • Destroy Veg/Flower Plants
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeletePlantsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<DeletePlantsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1"
                    urlBuilder_.Append("plants/v1");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Waste
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantWasteAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantWasteRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1/waste"
                    urlBuilder_.Append("plants/v1/waste");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlantWasteMethod>?> GetPlantWasteMethodAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plants/v1/waste/methods/all"
                    urlBuilder_.Append("plants/v1/waste/methods/all");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PlantWasteMethod>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPlantBatchClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Plant Batch will be validated against the specified License Number. If not specified, the Plant Batch will be validated against all of the User's current Facilities. Please note that if the Plant Batch is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlantBatch> GetPlantBatchByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active plant groups.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlantBatch>?> GetPlantBatchActiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive plant groups.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlantBatch>?> GetPlantBatchInactiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetPlantBatchTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Destroy Immature Plants
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePlantBatchesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<DeletePlantBatchesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlantBatchWasteReason>?> GetPlantBatchWasteReasonsAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Waste
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantBatchWasteAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchWasteRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantBatchAdjustAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchAdjustRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record plant additives.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantBatchAdditivesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchAdditivesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantBatchCreatePlantingsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchCreatePlantingsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory • View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantBatchCreatePackagesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchCreatePackagesRequest> body, bool? isFromMotherPlant = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory • View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantBatchCreatePackageFromMotherPlantAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchCreatePackageFromMotherPlantRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantBatchSplitAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchSplitRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory • View Veg/Flower Plants • Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPlantBatchChangeGrowthPhaseAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchChangeGrowthPhaseRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPlantBatchMovePlantBatchesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantBatchMovePlantBatchesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantBatchClient : IPlantBatchClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PlantBatchClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Plant Batch will be validated against the specified License Number. If not specified, the Plant Batch will be validated against all of the User's current Facilities. Please note that if the Plant Batch is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlantBatch> GetPlantBatchByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v1/{id}"
                    urlBuilder_.Append("plantbatches/v1/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlantBatch>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active plant groups.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlantBatch>?> GetPlantBatchActiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v1/active"
                    urlBuilder_.Append("plantbatches/v1/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PlantBatch>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive plant groups.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlantBatch>?> GetPlantBatchInactiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v1/inactive"
                    urlBuilder_.Append("plantbatches/v1/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PlantBatch>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetPlantBatchTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v1/types"
                    urlBuilder_.Append("plantbatches/v1/types");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Destroy Immature Plants
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeletePlantBatchesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<DeletePlantBatchesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v1"
                    urlBuilder_.Append("plantbatches/v1");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlantBatchWasteReason>?> GetPlantBatchWasteReasonsAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v1/waste/reasons"
                    urlBuilder_.Append("plantbatches/v1/waste/reasons");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PlantBatchWasteReason>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Waste
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantBatchWasteAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchWasteRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v1/waste"
                    urlBuilder_.Append("plantbatches/v1/waste");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantBatchAdjustAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchAdjustRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v1/adjust"
                    urlBuilder_.Append("plantbatches/v1/adjust");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Plants Additives
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to record plant additives.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantBatchAdditivesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchAdditivesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v1/additives"
                    urlBuilder_.Append("plantbatches/v1/additives");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantBatchCreatePlantingsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchCreatePlantingsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v1/createplantings"
                    urlBuilder_.Append("plantbatches/v1/createplantings");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory • View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantBatchCreatePackagesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchCreatePackagesRequest> body, bool? isFromMotherPlant = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v1/createpackages"
                    urlBuilder_.Append("plantbatches/v1/createpackages");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (isFromMotherPlant != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isFromMotherPlant")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isFromMotherPlant, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory • View Packages • Create/Submit/Discontinue Packages
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantBatchCreatePackageFromMotherPlantAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchCreatePackageFromMotherPlantRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v1/create/packages/frommotherplant"
                    urlBuilder_.Append("plantbatches/v1/create/packages/frommotherplant");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantBatchSplitAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchSplitRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v1/split"
                    urlBuilder_.Append("plantbatches/v1/split");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants • Manage Immature Plants Inventory • View Veg/Flower Plants • Manage Veg/Flower Plants Inventory
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostPlantBatchChangeGrowthPhaseAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostPlantBatchChangeGrowthPhaseRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v1/changegrowthphase"
                    urlBuilder_.Append("plantbatches/v1/changegrowthphase");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: View Immature Plants
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutPlantBatchMovePlantBatchesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutPlantBatchMovePlantBatchesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "plantbatches/v1/moveplantbatches"
                    urlBuilder_.Append("plantbatches/v1/moveplantbatches");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IProcessingClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Processing> GetProcessingByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteProcessingByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Processing>?> GetProcessingActiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Processing>?> GetProcessingInactiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManageProcessingJobs
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostProcessingCreatePackagesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostProcessingCreatePackagesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManageProcessingJobs
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostProcessingStartAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostProcessingStartRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManageProcessingJobs
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostProcessingAdjustAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostProcessingAdjustRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutProcessingFinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutProcessingFinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutProcessingUnfinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutProcessingUnfinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProcessingJobType>?> GetProcessingJobTypeActiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive items.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProcessingJobType>?> GetProcessingJobTypeInactiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostProcessingJobTypesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostProcessingJobTypesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutProcessingJobTypesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutProcessingJobTypesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteProcessingJobTypeByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<JobTypeAttribute>?> GetProcessingJobTypeAttributesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetProcessingJobTypeCategoriesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProcessingClient : IProcessingClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public ProcessingClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Processing> GetProcessingByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v1/{id}"
                    urlBuilder_.Append("processing/v1/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Processing>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteProcessingByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v1/{id}"
                    urlBuilder_.Append("processing/v1/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Processing>?> GetProcessingActiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v1/active"
                    urlBuilder_.Append("processing/v1/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Processing>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Processing>?> GetProcessingInactiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v1/inactive"
                    urlBuilder_.Append("processing/v1/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Processing>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManageProcessingJobs
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostProcessingCreatePackagesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostProcessingCreatePackagesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v1/createpackages"
                    urlBuilder_.Append("processing/v1/createpackages");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManageProcessingJobs
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostProcessingStartAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostProcessingStartRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v1/start"
                    urlBuilder_.Append("processing/v1/start");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: ManageProcessingJobs
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostProcessingAdjustAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostProcessingAdjustRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v1/adjust"
                    urlBuilder_.Append("processing/v1/adjust");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutProcessingFinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutProcessingFinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v1/finish"
                    urlBuilder_.Append("processing/v1/finish");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutProcessingUnfinishAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutProcessingUnfinishRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v1/unfinish"
                    urlBuilder_.Append("processing/v1/unfinish");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProcessingJobType>?> GetProcessingJobTypeActiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v1/jobtypes/active"
                    urlBuilder_.Append("processing/v1/jobtypes/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProcessingJobType>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of inactive items.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProcessingJobType>?> GetProcessingJobTypeInactiveAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v1/jobtypes/inactive"
                    urlBuilder_.Append("processing/v1/jobtypes/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProcessingJobType>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostProcessingJobTypesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostProcessingJobTypesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v1/jobtypes"
                    urlBuilder_.Append("processing/v1/jobtypes");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutProcessingJobTypesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutProcessingJobTypesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v1/jobtypes"
                    urlBuilder_.Append("processing/v1/jobtypes");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteProcessingJobTypeByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v1/jobtypes/{id}"
                    urlBuilder_.Append("processing/v1/jobtypes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<JobTypeAttribute>?> GetProcessingJobTypeAttributesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v1/jobtypes/attributes"
                    urlBuilder_.Append("processing/v1/jobtypes/attributes");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<JobTypeAttribute>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Processing Job
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active items.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetProcessingJobTypeCategoriesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "processing/v1/jobtypes/categories"
                    urlBuilder_.Append("processing/v1/jobtypes/categories");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ISaleClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetSaleCustomerTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;:
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PatientRegistrationLocation>?> GetSalePatientRegistrationLocationsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Sales Delivery will be validated against the specified License Number. If not specified, the Sales Delivery will be validated against all of the User's current Facilities. Please note that if the Sales Delivery is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaleDelivery> GetSaleDeliveryByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSaleDeliveryByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SaleDelivery>?> GetSaleDeliveryActiveAsync(string licenseNumber, DateTimeOffset? salesDateStart = null, DateTimeOffset? salesDateEnd = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SaleDelivery>?> GetSaleDeliveryInactiveAsync(string licenseNumber, DateTimeOffset? salesDateStart = null, DateTimeOffset? salesDateEnd = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;:
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeliveryReturnReason>?> GetSaleDeliveryReturnReasonsAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<County>?> GetSaleCountiesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetSalePaymentTypesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Sales Receipt will be validated against the specified License Number. If not specified, the Sales Receipt will be validated against all of the User's current Facilities. Please note that if the Sales Receipt is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SaleReceipt> GetSaleReceiptByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSaleReceiptByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SaleReceipt>?> GetSaleReceiptActiveAsync(string licenseNumber, DateTimeOffset? salesDateStart = null, DateTimeOffset? salesDateEnd = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SaleReceipt>?> GetSaleReceiptInactiveAsync(string licenseNumber, DateTimeOffset? salesDateStart = null, DateTimeOffset? salesDateEnd = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostSaleDeliveriesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveriesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSaleDeliveriesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveriesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostSaleReceiptsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleReceiptsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSaleReceiptsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleReceiptsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSaleDeliveryHubAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryHubRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSaleDeliveryHubAcceptAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryHubAcceptRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSaleDeliveryCompleteAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryCompleteRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSaleDeliveryHubDepartAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryHubDepartRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSaleDeliveryHubVerifyIdAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryHubVerifyIdRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <param name="lastModifiedStart">The last modified start timestamp.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Retailer>?> GetSaleDeliveryRetailerActiveAsync(string licenseNumber, DateTimeOffset lastModifiedStart, DateTimeOffset lastModifiedEnd, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <param name="lastModifiedStart">The last modified start timestamp.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Retailer>?> GetSaleDeliveryRetailerInactiveAsync(string licenseNumber, DateTimeOffset lastModifiedStart, DateTimeOffset lastModifiedEnd, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Sales Delivery will be validated against the specified License Number. If not specified, the Sales Delivery will be validated against all of the User's current Facilities. Please note that if the Sales Delivery is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Retailer> GetSaleDeliveryRetailerByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSaleDeliveryRetailerByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The DateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostSaleDeliveryRetailerAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveryRetailerRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The DateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSaleDeliveryRetailerAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryRetailerRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostSaleDeliveryRetailerDepartAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveryRetailerDepartRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The DateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostSaleDeliveryRetailerRestockAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveryRetailerRestockRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostSaleDeliveryRetailerSaleAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveryRetailerSaleRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The ActualArrivalDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostSaleDeliveryRetailerEndAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveryRetailerEndRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of dates with sales transactions.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SaleTransactionSummary>?> GetSaleTransactionsAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="salesDateStart">Route parameter salesDateStart</param>
        /// <param name="salesDateEnd">Route parameter salesDateEnd</param>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of sales transactions for the specified date range.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SaleTransaction>?> GetSaleTransactionByDateRangeAsync(DateOnly salesDateStart, DateOnly salesDateEnd, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="date">Route parameter date</param>
        /// <param name="licenseNumber">The license number of the facility for which to append the sales transactions on the specified date.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostSaleTransactionsAsync(DateOnly date, string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleTransactionsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="date">Route parameter date</param>
        /// <param name="licenseNumber">The license number of the facility for which to update the sales transactions on the specified date.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSaleTransactionsAsync(DateOnly date, string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleTransactionsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleClient : ISaleClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public SaleClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetSaleCustomerTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/customertypes"
                    urlBuilder_.Append("sales/v1/customertypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;:
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PatientRegistrationLocation>?> GetSalePatientRegistrationLocationsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/patientregistration/locations"
                    urlBuilder_.Append("sales/v1/patientregistration/locations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PatientRegistrationLocation>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Sales Delivery will be validated against the specified License Number. If not specified, the Sales Delivery will be validated against all of the User's current Facilities. Please note that if the Sales Delivery is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SaleDelivery> GetSaleDeliveryByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries/{id}"
                    urlBuilder_.Append("sales/v1/deliveries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SaleDelivery>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteSaleDeliveryByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries/{id}"
                    urlBuilder_.Append("sales/v1/deliveries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SaleDelivery>?> GetSaleDeliveryActiveAsync(string licenseNumber, DateTimeOffset? salesDateStart = null, DateTimeOffset? salesDateEnd = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries/active"
                    urlBuilder_.Append("sales/v1/deliveries/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (salesDateStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("salesDateStart")).Append('=').Append(System.Uri.EscapeDataString(salesDateStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (salesDateEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("salesDateEnd")).Append('=').Append(System.Uri.EscapeDataString(salesDateEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SaleDelivery>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SaleDelivery>?> GetSaleDeliveryInactiveAsync(string licenseNumber, DateTimeOffset? salesDateStart = null, DateTimeOffset? salesDateEnd = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries/inactive"
                    urlBuilder_.Append("sales/v1/deliveries/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (salesDateStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("salesDateStart")).Append('=').Append(System.Uri.EscapeDataString(salesDateStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (salesDateEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("salesDateEnd")).Append('=').Append(System.Uri.EscapeDataString(salesDateEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SaleDelivery>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;:
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeliveryReturnReason>?> GetSaleDeliveryReturnReasonsAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries/returnreasons"
                    urlBuilder_.Append("sales/v1/deliveries/returnreasons");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<DeliveryReturnReason>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<County>?> GetSaleCountiesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/counties"
                    urlBuilder_.Append("sales/v1/counties");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<County>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetSalePaymentTypesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/paymenttypes"
                    urlBuilder_.Append("sales/v1/paymenttypes");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Sales Receipt will be validated against the specified License Number. If not specified, the Sales Receipt will be validated against all of the User's current Facilities. Please note that if the Sales Receipt is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SaleReceipt> GetSaleReceiptByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/receipts/{id}"
                    urlBuilder_.Append("sales/v1/receipts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SaleReceipt>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteSaleReceiptByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/receipts/{id}"
                    urlBuilder_.Append("sales/v1/receipts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SaleReceipt>?> GetSaleReceiptActiveAsync(string licenseNumber, DateTimeOffset? salesDateStart = null, DateTimeOffset? salesDateEnd = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/receipts/active"
                    urlBuilder_.Append("sales/v1/receipts/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (salesDateStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("salesDateStart")).Append('=').Append(System.Uri.EscapeDataString(salesDateStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (salesDateEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("salesDateEnd")).Append('=').Append(System.Uri.EscapeDataString(salesDateEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SaleReceipt>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="salesDateStart">The sales date start timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="salesDateEnd">The sales date end timestamp. If specified, also specifying any of the last modified parameters will result in an error.</param>
        /// <param name="lastModifiedStart">The last modified start timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp. If specified, also specifying any of the sales date parameters will result in an error.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SaleReceipt>?> GetSaleReceiptInactiveAsync(string licenseNumber, DateTimeOffset? salesDateStart = null, DateTimeOffset? salesDateEnd = null, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/receipts/inactive"
                    urlBuilder_.Append("sales/v1/receipts/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (salesDateStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("salesDateStart")).Append('=').Append(System.Uri.EscapeDataString(salesDateStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (salesDateEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("salesDateEnd")).Append('=').Append(System.Uri.EscapeDataString(salesDateEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SaleReceipt>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostSaleDeliveriesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveriesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries"
                    urlBuilder_.Append("sales/v1/deliveries");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutSaleDeliveriesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveriesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries"
                    urlBuilder_.Append("sales/v1/deliveries");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostSaleReceiptsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleReceiptsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/receipts"
                    urlBuilder_.Append("sales/v1/receipts");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutSaleReceiptsAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleReceiptsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/receipts"
                    urlBuilder_.Append("sales/v1/receipts");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutSaleDeliveryHubAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryHubRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries/hub"
                    urlBuilder_.Append("sales/v1/deliveries/hub");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutSaleDeliveryHubAcceptAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryHubAcceptRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries/hub/accept"
                    urlBuilder_.Append("sales/v1/deliveries/hub/accept");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutSaleDeliveryCompleteAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryCompleteRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries/complete"
                    urlBuilder_.Append("sales/v1/deliveries/complete");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutSaleDeliveryHubDepartAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryHubDepartRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries/hub/depart"
                    urlBuilder_.Append("sales/v1/deliveries/hub/depart");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutSaleDeliveryHubVerifyIdAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryHubVerifyIdRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries/hub/verifyID"
                    urlBuilder_.Append("sales/v1/deliveries/hub/verifyID");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <param name="lastModifiedStart">The last modified start timestamp.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Retailer>?> GetSaleDeliveryRetailerActiveAsync(string licenseNumber, DateTimeOffset lastModifiedStart, DateTimeOffset lastModifiedEnd, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (lastModifiedStart == null)
                throw new System.ArgumentNullException("lastModifiedStart");

            if (lastModifiedEnd == null)
                throw new System.ArgumentNullException("lastModifiedEnd");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries/retailer/active"
                    urlBuilder_.Append("sales/v1/deliveries/retailer/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Retailer>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <param name="lastModifiedStart">The last modified start timestamp.</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Retailer>?> GetSaleDeliveryRetailerInactiveAsync(string licenseNumber, DateTimeOffset lastModifiedStart, DateTimeOffset lastModifiedEnd, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (lastModifiedStart == null)
                throw new System.ArgumentNullException("lastModifiedStart");

            if (lastModifiedEnd == null)
                throw new System.ArgumentNullException("lastModifiedEnd");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries/retailer/inactive"
                    urlBuilder_.Append("sales/v1/deliveries/retailer/inactive");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Retailer>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Sales Delivery will be validated against the specified License Number. If not specified, the Sales Delivery will be validated against all of the User's current Facilities. Please note that if the Sales Delivery is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Retailer> GetSaleDeliveryRetailerByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries/retailer/{id}"
                    urlBuilder_.Append("sales/v1/deliveries/retailer/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Retailer>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteSaleDeliveryRetailerByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries/retailer/{id}"
                    urlBuilder_.Append("sales/v1/deliveries/retailer/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The DateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostSaleDeliveryRetailerAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveryRetailerRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries/retailer"
                    urlBuilder_.Append("sales/v1/deliveries/retailer");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The DateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutSaleDeliveryRetailerAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleDeliveryRetailerRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries/retailer"
                    urlBuilder_.Append("sales/v1/deliveries/retailer");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostSaleDeliveryRetailerDepartAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveryRetailerDepartRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries/retailer/depart"
                    urlBuilder_.Append("sales/v1/deliveries/retailer/depart");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The DateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostSaleDeliveryRetailerRestockAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveryRetailerRestockRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries/retailer/restock"
                    urlBuilder_.Append("sales/v1/deliveries/retailer/restock");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The SalesDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostSaleDeliveryRetailerSaleAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveryRetailerSaleRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries/retailer/sale"
                    urlBuilder_.Append("sales/v1/deliveries/retailer/sale");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The ActualArrivalDateTime field must be the actual date and time of the transaction without time zone. This date/time must already be in the same time zone as the Facility recording the sales. For example, if the Facility is in Pacific Time, then this time must be Pacific Standard (or Daylight Savings) Time and not in UTC.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Retailer Delivery
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostSaleDeliveryRetailerEndAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleDeliveryRetailerEndRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/deliveries/retailer/end"
                    urlBuilder_.Append("sales/v1/deliveries/retailer/end");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of dates with sales transactions.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SaleTransactionSummary>?> GetSaleTransactionsAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/transactions"
                    urlBuilder_.Append("sales/v1/transactions");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SaleTransactionSummary>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="salesDateStart">Route parameter salesDateStart</param>
        /// <param name="salesDateEnd">Route parameter salesDateEnd</param>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of sales transactions for the specified date range.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SaleTransaction>?> GetSaleTransactionByDateRangeAsync(DateOnly salesDateStart, DateOnly salesDateEnd, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (salesDateStart == null)
                throw new System.ArgumentNullException("salesDateStart");

            if (salesDateEnd == null)
                throw new System.ArgumentNullException("salesDateEnd");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/transactions/{salesDateStart}/{salesDateEnd}"
                    urlBuilder_.Append("sales/v1/transactions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(salesDateStart.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(salesDateEnd.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SaleTransaction>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="date">Route parameter date</param>
        /// <param name="licenseNumber">The license number of the facility for which to append the sales transactions on the specified date.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostSaleTransactionsAsync(DateOnly date, string licenseNumber, System.Collections.Generic.IEnumerable<PostSaleTransactionsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (date == null)
                throw new System.ArgumentNullException("date");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/transactions/{date}"
                    urlBuilder_.Append("sales/v1/transactions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(date.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Sales
        /// </remarks>
        /// <param name="date">Route parameter date</param>
        /// <param name="licenseNumber">The license number of the facility for which to update the sales transactions on the specified date.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutSaleTransactionsAsync(DateOnly date, string licenseNumber, System.Collections.Generic.IEnumerable<PutSaleTransactionsRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (date == null)
                throw new System.ArgumentNullException("date");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "sales/v1/transactions/{date}"
                    urlBuilder_.Append("sales/v1/transactions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(date.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IStrainClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Strain will be validated against the specified License Number. If not specified, the Strain will be validated against all of the User's current Facilities. Please note that if the Strain is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Strain> GetStrainByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteStrainByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active strains.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Strain>?> GetStrainActiveAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostStrainCreateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostStrainCreateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostStrainUpdateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostStrainUpdateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StrainClient : IStrainClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public StrainClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <param name="licenseNumber">If specified, the Strain will be validated against the specified License Number. If not specified, the Strain will be validated against all of the User's current Facilities. Please note that if the Strain is not valid for the specified License Number, a 401 Unauthorized status will be returned.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Strain> GetStrainByIdAsync(long id, string? licenseNumber = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "strains/v1/{id}"
                    urlBuilder_.Append("strains/v1/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (licenseNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Strain>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteStrainByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "strains/v1/{id}"
                    urlBuilder_.Append("strains/v1/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <param name="licenseNumber">The license number of the facility for which to return the list of active strains.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Strain>?> GetStrainActiveAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "strains/v1/active"
                    urlBuilder_.Append("strains/v1/active");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Strain>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostStrainCreateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostStrainCreateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "strains/v1/create"
                    urlBuilder_.Append("strains/v1/create");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Manage Strains
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostStrainUpdateAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostStrainUpdateRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "strains/v1/update"
                    urlBuilder_.Append("strains/v1/update");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITransferClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Transfer>?> GetTransferIncomingAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Transfer>?> GetTransferOutgoingAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Transfer>?> GetTransferRejectedAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: that the {id} parameter above represents a Shipment Plan ID.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransferDelivery>?> GetTransferByIdDeliveriesAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: that the {id} parameter above represents a Shipment Delivery ID.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransferDeliveryTransporter>?> GetTransferDeliveryByIdTransportersAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The {id} parameter above represents a Shipment Delivery ID.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransferDeliveryTransporterDetail>?> GetTransferDeliveryByIdTransporterDetailsAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransferDeliveryPackage>?> GetTransferDeliveryByIdPackagesAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransferDeliveryPackageWholesale>?> GetTransferDeliveryByIdPackageWholesaleAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Delivery Package ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RequiredLabTestBatch>?> GetTransferDeliveryPackageByIdRequiredLabTestBatchesAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetTransferDeliveryPackageStatesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransferType>?> GetTransferTypesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostTransferExternalIncomingAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostTransferExternalIncomingRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTransferExternalIncomingAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutTransferExternalIncomingRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTransferExternalIncomingByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Transfer>?> GetTransferTemplatesAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostTransferTemplatesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostTransferTemplatesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutTransferTemplatesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutTransferTemplatesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransferDelivery>?> GetTransferTemplateByIdDeliveriesAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Template Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransferDeliveryTransporter>?> GetTransferTemplateDeliveryByIdTransportersAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Template Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransferDeliveryTransporterDetail>?> GetTransferTemplateDeliveryByIdTransporterDetailsAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Template Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransferDeliveryPackage>?> GetTransferTemplateDeliveryByIdPackagesAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTransferTemplateByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferClient : ITransferClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public TransferClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Transfer>?> GetTransferIncomingAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/incoming"
                    urlBuilder_.Append("transfers/v1/incoming");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Transfer>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Transfer>?> GetTransferOutgoingAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/outgoing"
                    urlBuilder_.Append("transfers/v1/outgoing");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Transfer>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Transfer>?> GetTransferRejectedAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/rejected"
                    urlBuilder_.Append("transfers/v1/rejected");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Transfer>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: that the {id} parameter above represents a Shipment Plan ID.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransferDelivery>?> GetTransferByIdDeliveriesAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/{id}/deliveries"
                    urlBuilder_.Append("transfers/v1/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/deliveries");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TransferDelivery>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: that the {id} parameter above represents a Shipment Delivery ID.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransferDeliveryTransporter>?> GetTransferDeliveryByIdTransportersAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/deliveries/{id}/transporters"
                    urlBuilder_.Append("transfers/v1/deliveries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transporters");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TransferDeliveryTransporter>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The {id} parameter above represents a Shipment Delivery ID.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransferDeliveryTransporterDetail>?> GetTransferDeliveryByIdTransporterDetailsAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/deliveries/{id}/transporters/details"
                    urlBuilder_.Append("transfers/v1/deliveries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transporters/details");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TransferDeliveryTransporterDetail>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransferDeliveryPackage>?> GetTransferDeliveryByIdPackagesAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/deliveries/{id}/packages"
                    urlBuilder_.Append("transfers/v1/deliveries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/packages");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TransferDeliveryPackage>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransferDeliveryPackageWholesale>?> GetTransferDeliveryByIdPackageWholesaleAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/deliveries/{id}/packages/wholesale"
                    urlBuilder_.Append("transfers/v1/deliveries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/packages/wholesale");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TransferDeliveryPackageWholesale>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Delivery Package ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RequiredLabTestBatch>?> GetTransferDeliveryPackageByIdRequiredLabTestBatchesAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/deliveries/package/{id}/requiredlabtestbatches"
                    urlBuilder_.Append("transfers/v1/deliveries/package/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/requiredlabtestbatches");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RequiredLabTestBatch>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetTransferDeliveryPackageStatesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/deliveries/packages/states"
                    urlBuilder_.Append("transfers/v1/deliveries/packages/states");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransferType>?> GetTransferTypesAsync(string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/types"
                    urlBuilder_.Append("transfers/v1/types");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TransferType>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostTransferExternalIncomingAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostTransferExternalIncomingRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/external/incoming"
                    urlBuilder_.Append("transfers/v1/external/incoming");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutTransferExternalIncomingAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutTransferExternalIncomingRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/external/incoming"
                    urlBuilder_.Append("transfers/v1/external/incoming");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteTransferExternalIncomingByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/external/incoming/{id}"
                    urlBuilder_.Append("transfers/v1/external/incoming/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <param name="lastModifiedStart">The last modified start timestamp</param>
        /// <param name="lastModifiedEnd">The last modified end timestamp</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Transfer>?> GetTransferTemplatesAsync(string licenseNumber, DateTimeOffset? lastModifiedStart = null, DateTimeOffset? lastModifiedEnd = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/templates"
                    urlBuilder_.Append("transfers/v1/templates");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (lastModifiedStart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedStart")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedStart.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedEnd != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedEnd")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedEnd.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Transfer>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostTransferTemplatesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PostTransferTemplatesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/templates"
                    urlBuilder_.Append("transfers/v1/templates");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutTransferTemplatesAsync(string licenseNumber, System.Collections.Generic.IEnumerable<PutTransferTemplatesRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/templates"
                    urlBuilder_.Append("transfers/v1/templates");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransferDelivery>?> GetTransferTemplateByIdDeliveriesAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/templates/{id}/deliveries"
                    urlBuilder_.Append("transfers/v1/templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/deliveries");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TransferDelivery>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Template Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransferDeliveryTransporter>?> GetTransferTemplateDeliveryByIdTransportersAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/templates/deliveries/{id}/transporters"
                    urlBuilder_.Append("transfers/v1/templates/deliveries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transporters");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TransferDeliveryTransporter>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Template Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransferDeliveryTransporterDetail>?> GetTransferTemplateDeliveryByIdTransporterDetailsAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/templates/deliveries/{id}/transporters/details"
                    urlBuilder_.Append("transfers/v1/templates/deliveries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transporters/details");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TransferDeliveryTransporterDetail>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Please note: The {id} parameter above represents a Transfer Template Delivery ID, not a Manifest Number.&lt;/br&gt;&lt;b&gt;Permissions Required&lt;/b&gt;: Transfers
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TransferDeliveryPackage>?> GetTransferTemplateDeliveryByIdPackagesAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/templates/deliveries/{id}/packages"
                    urlBuilder_.Append("transfers/v1/templates/deliveries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/packages");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TransferDeliveryPackage>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: Transfer Templates
        /// </remarks>
        /// <param name="id">Route parameter id</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteTransferTemplateByIdAsync(long id, string licenseNumber, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (licenseNumber == null)
                throw new System.ArgumentNullException("licenseNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "transfers/v1/templates/{id}"
                    urlBuilder_.Append("transfers/v1/templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("licenseNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IUnitOfMeasureClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UnitOfMeasure>?> GetUnitOfMeasureActiveAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnitOfMeasureClient : IUnitOfMeasureClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public UnitOfMeasureClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api-ak.metrc.com";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// &lt;b&gt;Permissions Required&lt;/b&gt;: &lt;i&gt;none&lt;/i&gt;
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UnitOfMeasure>?> GetUnitOfMeasureActiveAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "unitsofmeasure/v1/active"
                    urlBuilder_.Append("unitsofmeasure/v1/active");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UnitOfMeasure>?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse?>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            throw new ApiException<ErrorResponse?>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActiveIngredient
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("percentage")]
        public double? Percentage { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaregiverStatus
    {

        [System.Text.Json.Serialization.JsonPropertyName("caregiverLicenseNumber")]
        public string? CaregiverLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        public bool? Active { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class County
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeletePlantBatchesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("plantBatch")]
        public string? PlantBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reasonNote")]
        public string? ReasonNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeletePlantsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteMethodName")]
        public string? WasteMethodName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteMaterialMixed")]
        public string? WasteMaterialMixed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteWeight")]
        public double? WasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteUnitOfMeasureName")]
        public string? WasteUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteReasonName")]
        public string? WasteReasonName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reasonNote")]
        public string? ReasonNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryReturnReason
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresNote")]
        public bool? RequiresNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresWasteWeight")]
        public bool? RequiresWasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresImmatureWasteWeight")]
        public bool? RequiresImmatureWasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresMatureWasteWeight")]
        public bool? RequiresMatureWasteWeight { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Destination
    {

        [System.Text.Json.Serialization.JsonPropertyName("salesCustomerType")]
        public string? SalesCustomerType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consumerId")]
        public string? ConsumerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientName")]
        public string? RecipientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressStreet1")]
        public string? RecipientAddressStreet1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressStreet2")]
        public string? RecipientAddressStreet2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressCity")]
        public string? RecipientAddressCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressCounty")]
        public string? RecipientAddressCounty { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressState")]
        public string? RecipientAddressState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressPostalCode")]
        public string? RecipientAddressPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<SalesDeliveryTransaction>? Transactions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Employee
    {

        [System.Text.Json.Serialization.JsonPropertyName("fullName")]
        public string? FullName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("license")]
        public License? License { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalDestination
    {

        [System.Text.Json.Serialization.JsonPropertyName("recipientLicenseNumber")]
        public string? RecipientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transferTypeName")]
        public string? TransferTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedRoute")]
        public string? PlannedRoute { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("grossWeight")]
        public double? GrossWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("grossUnitOfWeightId")]
        public string? GrossUnitOfWeightId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporters")]
        public System.Collections.Generic.ICollection<ExternalTransporter>? Transporters { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packages")]
        public System.Collections.Generic.ICollection<Package>? Packages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalTransporter
    {

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityLicenseNumber")]
        public string? TransporterFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverOccupationalLicenseNumber")]
        public string? DriverOccupationalLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverLicenseNumber")]
        public string? DriverLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isLayover")]
        public bool? IsLayover { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterDetails")]
        public TransferDeliveryTransporterDetail? TransporterDetails { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Facility
    {

        [System.Text.Json.Serialization.JsonPropertyName("HireDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? HireDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("IsOwner")]
        public bool? IsOwner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("IsManager")]
        public bool? IsManager { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("Occupations")]
        public System.Collections.Generic.ICollection<object>? Occupations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("Alias")]
        public string? Alias { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("DisplayName")]
        public string? DisplayName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("CredentialedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? CredentialedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("SupportActivationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SupportActivationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("SupportExpirationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SupportExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("SupportLastPaidDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SupportLastPaidDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("FacilityType")]
        [System.ComponentModel.DataAnnotations.Required]
        public FacilityType FacilityType { get; set; } = new FacilityType();

        [System.Text.Json.Serialization.JsonPropertyName("License")]
        [System.ComponentModel.DataAnnotations.Required]
        public License License { get; set; } = new License();

        [System.Text.Json.Serialization.JsonPropertyName("isFinancialContact")]
        public bool? IsFinancialContact { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FacilityType
    {

        [System.Text.Json.Serialization.JsonPropertyName("isMedical")]
        public bool? IsMedical { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isRetail")]
        public bool? IsRetail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isHemp")]
        public bool? IsHemp { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isSalesDeliveryHub")]
        public bool? IsSalesDeliveryHub { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("restrictHarvestPlantRestoreTimeHours")]
        public int? RestrictHarvestPlantRestoreTimeHours { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalMemberPatientsAllowed")]
        public int? TotalMemberPatientsAllowed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canGrowPlants")]
        public bool? CanGrowPlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canCreateOpeningBalancePlantBatches")]
        public bool? CanCreateOpeningBalancePlantBatches { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canTagPlantBatches")]
        public bool? CanTagPlantBatches { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canAssignLocationsToPlantBatches")]
        public bool? CanAssignLocationsToPlantBatches { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantsRequirePatientAffiliation")]
        public bool? PlantsRequirePatientAffiliation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchesCanContainMotherPlants")]
        public bool? PlantBatchesCanContainMotherPlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canUpdatePlantStrains")]
        public bool? CanUpdatePlantStrains { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canTrackVegetativePlants")]
        public bool? CanTrackVegetativePlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canCreateImmaturePlantPackagesFromPlants")]
        public bool? CanCreateImmaturePlantPackagesFromPlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canPackageVegetativePlants")]
        public bool? CanPackageVegetativePlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canPackageWaste")]
        public bool? CanPackageWaste { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canReportHarvestSchedules")]
        public bool? CanReportHarvestSchedules { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canSubmitHarvestsForTesting")]
        public bool? CanSubmitHarvestsForTesting { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canRequireHarvestSampleLabTestBatches")]
        public bool? CanRequireHarvestSampleLabTestBatches { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canCreateOpeningBalancePackages")]
        public bool? CanCreateOpeningBalancePackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canCreateDerivedPackages")]
        public bool? CanCreateDerivedPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canAssignLocationsToPackages")]
        public bool? CanAssignLocationsToPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canUpdateLocationsOnPackages")]
        public bool? CanUpdateLocationsOnPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packagesRequirePatientAffiliation")]
        public bool? PackagesRequirePatientAffiliation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canCreateTradeSamplePackages")]
        public bool? CanCreateTradeSamplePackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canDonatePackages")]
        public bool? CanDonatePackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canSubmitPackagesForTesting")]
        public bool? CanSubmitPackagesForTesting { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canCreateProcessValidationPackages")]
        public bool? CanCreateProcessValidationPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canRequirePackageSampleLabTestBatches")]
        public bool? CanRequirePackageSampleLabTestBatches { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canRequestProductRemediation")]
        public bool? CanRequestProductRemediation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canRemediatePackagesWithFailedLabResults")]
        public bool? CanRemediatePackagesWithFailedLabResults { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canInfuseProducts")]
        public bool? CanInfuseProducts { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canDestroyProduct")]
        public bool? CanDestroyProduct { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canTestPackages")]
        public bool? CanTestPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canTransferFromExternalFacilities")]
        public bool? CanTransferFromExternalFacilities { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canSellToConsumers")]
        public bool? CanSellToConsumers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canSellToPatients")]
        public bool? CanSellToPatients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canSellToExternalPatients")]
        public bool? CanSellToExternalPatients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canSellToCaregivers")]
        public bool? CanSellToCaregivers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedSales")]
        public bool? AdvancedSales { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesRequirePatientNumber")]
        public bool? SalesRequirePatientNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesRequireExternalPatientNumber")]
        public bool? SalesRequireExternalPatientNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesRequireExternalPatientIdentificationMethod")]
        public bool? SalesRequireExternalPatientIdentificationMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesRequireCaregiverNumber")]
        public bool? SalesRequireCaregiverNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesRequireCaregiverPatientNumber")]
        public bool? SalesRequireCaregiverPatientNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canDeliverSalesToConsumers")]
        public bool? CanDeliverSalesToConsumers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryRequireConsumerId")]
        public bool? SalesDeliveryRequireConsumerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canDeliverSalesToPatients")]
        public bool? CanDeliverSalesToPatients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryRequirePatientNumber")]
        public bool? SalesDeliveryRequirePatientNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryRequireRecipientName")]
        public bool? SalesDeliveryRequireRecipientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canHaveMemberPatients")]
        public bool? CanHaveMemberPatients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canReportPatientCheckIns")]
        public bool? CanReportPatientCheckIns { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canSpecifyPatientSalesLimitExemption")]
        public bool? CanSpecifyPatientSalesLimitExemption { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canReportPatientsAdverseResponses")]
        public bool? CanReportPatientsAdverseResponses { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canReportStrainProperties")]
        public bool? CanReportStrainProperties { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canRecordProcessingJobs")]
        public bool? CanRecordProcessingJobs { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canRecordProductForDestruction")]
        public bool? CanRecordProductForDestruction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canClonePlantBatches")]
        public bool? CanClonePlantBatches { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testsRequireLabSample")]
        public bool? TestsRequireLabSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("restrictPlantBatchAdjustmentTimeHours")]
        public int? RestrictPlantBatchAdjustmentTimeHours { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canTakePlantBatchesOnTrip")]
        public bool? CanTakePlantBatchesOnTrip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canTakePlantsOnTrip")]
        public bool? CanTakePlantsOnTrip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canTakeHarvestsOnTrip")]
        public bool? CanTakeHarvestsOnTrip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canTakePackagesOnTrip")]
        public bool? CanTakePackagesOnTrip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canSellFromPackagesOnTrip")]
        public bool? CanSellFromPackagesOnTrip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryAllowPlannedRoute")]
        public bool? SalesDeliveryAllowPlannedRoute { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryAllowAddress")]
        public bool? SalesDeliveryAllowAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryAllowCity")]
        public bool? SalesDeliveryAllowCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryAllowState")]
        public bool? SalesDeliveryAllowState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryAllowCounty")]
        public bool? SalesDeliveryAllowCounty { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryAllowZip")]
        public bool? SalesDeliveryAllowZip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("retailerDelivery")]
        public bool? RetailerDelivery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("retailerDeliveryAllowTradeSamples")]
        public bool? RetailerDeliveryAllowTradeSamples { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("retailerDeliveryAllowDonations")]
        public bool? RetailerDeliveryAllowDonations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("retailerDeliveryRequirePrice")]
        public bool? RetailerDeliveryRequirePrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("retailerDeliveryAllowPartialPackages")]
        public bool? RetailerDeliveryAllowPartialPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canCreatePartialPackages")]
        public bool? CanCreatePartialPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canAdjustSourcePackagesWithPartials")]
        public bool? CanAdjustSourcePackagesWithPartials { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canReportOperationalExceptions")]
        public bool? CanReportOperationalExceptions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canReportAdulteration")]
        public bool? CanReportAdulteration { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canGenerateProductLabel")]
        public bool? CanGenerateProductLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canPrintProductLabel")]
        public bool? CanPrintProductLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canReceiveAssociateProductLabel")]
        public bool? CanReceiveAssociateProductLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canViewSourcePackages")]
        public bool? CanViewSourcePackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxExemptReportingFeesFacilityType")]
        public bool? TaxExemptReportingFeesFacilityType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxExemptTagOrdersFacilityType")]
        public bool? TaxExemptTagOrdersFacilityType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Harvest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestType")]
        public string? HarvestType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceStrainCount")]
        public int? SourceStrainCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceStrainNames")]
        public string? SourceStrainNames { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strains")]
        public System.Collections.Generic.ICollection<string>? Strains { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dryingLocationId")]
        public int? DryingLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dryingLocationName")]
        public string? DryingLocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dryingLocationTypeName")]
        public string? DryingLocationTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dryingRoomId")]
        public int? DryingRoomId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dryingRoomName")]
        public string? DryingRoomName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentWeight")]
        public double? CurrentWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalWasteWeight")]
        public double? TotalWasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantCount")]
        public int? PlantCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalWetWeight")]
        public double? TotalWetWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRestoredWeight")]
        public double? TotalRestoredWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageCount")]
        public int? PackageCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPackagedWeight")]
        public double? TotalPackagedWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfWeightName")]
        public string? UnitOfWeightName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestingState")]
        public string? LabTestingState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestingStateDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LabTestingStateDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnHold")]
        public bool? IsOnHold { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestStartDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? HarvestStartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("finishedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? FinishedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("archivedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ArchivedDate { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LastModified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnTrip")]
        public bool? IsOnTrip { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HarvestWasteType
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ingredient
    {

        [System.Text.Json.Serialization.JsonPropertyName("harvestId")]
        public int? HarvestId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestName")]
        public string? HarvestName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        public double? Weight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfWeight")]
        public string? UnitOfWeight { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Item
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategoryName")]
        public string? ProductCategoryName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategoryType")]
        public string? ProductCategoryType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityType")]
        public string? QuantityType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultLabTestingState")]
        public string? DefaultLabTestingState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasureName")]
        public string? UnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvalStatus")]
        public string? ApprovalStatus { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approvalStatusDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ApprovalStatusDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainId")]
        public int? StrainId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainName")]
        public string? StrainName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("administrationMethod")]
        public string? AdministrationMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdPercent")]
        public double? UnitCbdPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContent")]
        public double? UnitCbdContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContentUnitOfMeasureName")]
        public string? UnitCbdContentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContentDose")]
        public double? UnitCbdContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContentDoseUnitOfMeasureName")]
        public string? UnitCbdContentDoseUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcPercent")]
        public double? UnitThcPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContent")]
        public double? UnitThcContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentUnitOfMeasureName")]
        public string? UnitThcContentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentDose")]
        public double? UnitThcContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentDoseUnitOfMeasureName")]
        public string? UnitThcContentDoseUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitVolume")]
        public double? UnitVolume { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitVolumeUnitOfMeasureName")]
        public string? UnitVolumeUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitWeight")]
        public double? UnitWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitWeightUnitOfMeasureName")]
        public string? UnitWeightUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("servingSize")]
        public string? ServingSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplyDurationDays")]
        public int? SupplyDurationDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("numberOfDoses")]
        public int? NumberOfDoses { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitQuantity")]
        public double? UnitQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitQuantityUnitOfMeasureName")]
        public string? UnitQuantityUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ingredients")]
        public string? Ingredients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isUsed")]
        public bool? IsUsed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("publicIngredients")]
        public string? PublicIngredients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productImages")]
        public System.Collections.Generic.ICollection<ProductImage>? ProductImages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labelImages")]
        public System.Collections.Generic.ICollection<LabelImage>? LabelImages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packagingImages")]
        public System.Collections.Generic.ICollection<PackagingImage>? PackagingImages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isExpirationDateRequired")]
        public bool? IsExpirationDateRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isSellByDateRequired")]
        public bool? IsSellByDateRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isUseByDateRequired")]
        public bool? IsUseByDateRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemBrandId")]
        public long? ItemBrandId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("allergens")]
        public string? Allergens { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productPhotoDescription")]
        public string? ProductPhotoDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labelPhotoDescription")]
        public string? LabelPhotoDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packagingPhotoDescription")]
        public string? PackagingPhotoDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasExpirationDate")]
        public bool? HasExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasSellByDate")]
        public bool? HasSellByDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasUseByDate")]
        public bool? HasUseByDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestBatchNames")]
        public System.Collections.Generic.ICollection<string>? LabTestBatchNames { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ProductPDFDocuments")]
        public System.Collections.Generic.ICollection<ProductPdfDocument>? ProductPDFDocuments { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemBrand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemCategory
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategoryType")]
        public string? ProductCategoryType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityType")]
        public string? QuantityType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresStrain")]
        public bool? RequiresStrain { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresItemBrand")]
        public bool? RequiresItemBrand { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresAdministrationMethod")]
        public bool? RequiresAdministrationMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresUnitCbdPercent")]
        public bool? RequiresUnitCbdPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresUnitCbdContent")]
        public bool? RequiresUnitCbdContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresUnitCbdContentDose")]
        public bool? RequiresUnitCbdContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresUnitThcPercent")]
        public bool? RequiresUnitThcPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresUnitThcContent")]
        public bool? RequiresUnitThcContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresUnitThcContentDose")]
        public bool? RequiresUnitThcContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresUnitVolume")]
        public bool? RequiresUnitVolume { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresUnitWeight")]
        public bool? RequiresUnitWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresServingSize")]
        public bool? RequiresServingSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresSupplyDurationDays")]
        public bool? RequiresSupplyDurationDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresNumberOfDoses")]
        public bool? RequiresNumberOfDoses { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresIngredients")]
        public bool? RequiresIngredients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresDescription")]
        public bool? RequiresDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresProductPhoto")]
        public bool? RequiresProductPhoto { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresLabelPhotos")]
        public int? RequiresLabelPhotos { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresPackagingPhotos")]
        public int? RequiresPackagingPhotos { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canContainSeeds")]
        public bool? CanContainSeeds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canBeRemediated")]
        public bool? CanBeRemediated { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresPublicIngredients")]
        public bool? RequiresPublicIngredients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresProductPhotos")]
        public int? RequiresProductPhotos { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canBeDestroyed")]
        public bool? CanBeDestroyed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresAllergens")]
        public bool? RequiresAllergens { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresProductPhotoDescription")]
        public bool? RequiresProductPhotoDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresLabelPhotoDescription")]
        public bool? RequiresLabelPhotoDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresPackagingPhotoDescription")]
        public bool? RequiresPackagingPhotoDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canBeRevised")]
        public bool? CanBeRevised { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("RequiresProductPDFDocuments")]
        public int? RequiresProductPDFDocuments { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JobTypeAttribute
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LastModified { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabTest
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageId")]
        public long? PackageId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestResultId")]
        public long? LabTestResultId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labFacilityLicenseNumber")]
        public string? LabFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labFacilityName")]
        public string? LabFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageLabel")]
        public string? SourcePackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        public string? ProductName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategoryName")]
        public string? ProductCategoryName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testPerformedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? TestPerformedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("overallPassed")]
        public bool? OverallPassed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("revokedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RevokedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resultReleased")]
        public bool? ResultReleased { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("resultReleaseDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ResultReleaseDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testTypeName")]
        public string? TestTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testPassed")]
        public bool? TestPassed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testResultLevel")]
        public double? TestResultLevel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testComment")]
        public string? TestComment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testInformationalOnly")]
        public bool? TestInformationalOnly { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestDetailRevokedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LabTestDetailRevokedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ExpirationDateTime { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabTestResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("labTestTypeName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string LabTestTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("passed")]
        public bool Passed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Notes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabTestType
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresTestResult")]
        public bool? RequiresTestResult { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("informationalOnly")]
        public bool? InformationalOnly { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("alwaysPasses")]
        public bool? AlwaysPasses { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestResultMode")]
        public string? LabTestResultMode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestResultMinimum")]
        public double? LabTestResultMinimum { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestResultMaximum")]
        public double? LabTestResultMaximum { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestResultExpirationDays")]
        public int? LabTestResultExpirationDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dependencyMode")]
        public string? DependencyMode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maxAllowedFailureCount")]
        public int? MaxAllowedFailureCount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabelImage
    {

        [System.Text.Json.Serialization.JsonPropertyName("fileSystemId")]
        public long? FileSystemId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class License
    {

        [System.Text.Json.Serialization.JsonPropertyName("Number")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("StartDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? StartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("EndDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EndDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("LicenseType")]
        public string? LicenseType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Location
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationTypeId")]
        public long? LocationTypeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationTypeName")]
        public string? LocationTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forPlantBatches")]
        public bool? ForPlantBatches { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forPlants")]
        public bool? ForPlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forHarvests")]
        public bool? ForHarvests { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forPackages")]
        public bool? ForPackages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocationType
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forPlantBatches")]
        public bool? ForPlantBatches { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forPlants")]
        public bool? ForPlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forHarvests")]
        public bool? ForHarvests { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forPackages")]
        public bool? ForPackages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Package
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageType")]
        public string? PackageType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceHarvestNames")]
        public string? SourceHarvestNames { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceHarvestCount")]
        public int? SourceHarvestCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationId")]
        public int? LocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationName")]
        public string? LocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationTypeName")]
        public string? LocationTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("roomId")]
        public int? RoomId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("roomName")]
        public string? RoomName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasureName")]
        public string? UnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasureAbbreviation")]
        public string? UnitOfMeasureAbbreviation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemFromFacilityLicenseNumber")]
        public string? ItemFromFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemFromFacilityName")]
        public string? ItemFromFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packagedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? PackagedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("initialLabTestingState")]
        public string? InitialLabTestingState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestingState")]
        public string? LabTestingState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestingStateDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LabTestingStateDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isProductionBatch")]
        public bool? IsProductionBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productionBatchNumber")]
        public string? ProductionBatchNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceProductionBatchNumbers")]
        public string? SourceProductionBatchNumbers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTradeSample")]
        public bool? IsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonation")]
        public bool? IsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonationPersistent")]
        public bool? IsDonationPersistent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageIsDonation")]
        public bool? SourcePackageIsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageIsTradeSample")]
        public bool? SourcePackageIsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageCount")]
        public int? SourcePackageCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTestingSample")]
        public bool? IsTestingSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isProcessValidationTestingSample")]
        public bool? IsProcessValidationTestingSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceProcessingJobCount")]
        public int? SourceProcessingJobCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTradeSamplePersistent")]
        public bool? IsTradeSamplePersistent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productRequiresRemediation")]
        public bool? ProductRequiresRemediation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsRemediatedProduct")]
        public bool? ContainsRemediatedProduct { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RemediationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ReceivedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedFromManifestNumber")]
        public string? ReceivedFromManifestNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedFromFacilityLicenseNumber")]
        public string? ReceivedFromFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedFromFacilityName")]
        public string? ReceivedFromFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnHold")]
        public bool? IsOnHold { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("archivedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ArchivedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("finishedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? FinishedDate { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LastModified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        public Item? Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageLabels")]
        public string? SourcePackageLabels { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnTrip")]
        public bool? IsOnTrip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnRetailerDelivery")]
        public bool? IsOnRetailerDelivery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isFinished")]
        public bool? IsFinished { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sellByDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SellByDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useByDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? UseByDate { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("labTestingRecordedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LabTestingRecordedDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageAdjustReason
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresNote")]
        public bool? RequiresNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresWasteWeight")]
        public bool? RequiresWasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresImmatureWasteWeight")]
        public bool? RequiresImmatureWasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresMatureWasteWeight")]
        public bool? RequiresMatureWasteWeight { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackagingImage
    {

        [System.Text.Json.Serialization.JsonPropertyName("fileSystemId")]
        public long? FileSystemId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Patient
    {

        [System.Text.Json.Serialization.JsonPropertyName("patientId")]
        public long PatientId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("licenseNumber")]
        public string? LicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RegistrationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("licenseEffectiveStartDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LicenseEffectiveStartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("licenseEffectiveEndDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LicenseEffectiveEndDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recommendedPlants")]
        public int? RecommendedPlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recommendedSmokableQuantity")]
        public double? RecommendedSmokableQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasSalesLimitExemption")]
        public bool? HasSalesLimitExemption { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otherFacilitiesCount")]
        public int? OtherFacilitiesCount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatientCheckIn
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkInLocationId")]
        public long? CheckInLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkInLocationName")]
        public string? CheckInLocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationStartDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RegistrationStartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationExpiryDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RegistrationExpiryDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkInDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? CheckInDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatientCheckInLocation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatientRegistrationLocation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatientStatus
    {

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        public bool? Active { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flowerOuncesAvailable")]
        public double? FlowerOuncesAvailable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("thcOuncesAvailable")]
        public double? ThcOuncesAvailable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purchaseAmountDays")]
        public double? PurchaseAmountDays { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Photo
    {

        [System.Text.Json.Serialization.JsonPropertyName("fileContents")]
        public string? FileContents { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contentType")]
        public string? ContentType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileDownloadName")]
        public string? FileDownloadName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Plant
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string? State { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("growthPhase")]
        public string? GrowthPhase { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchId")]
        public int? PlantBatchId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchName")]
        public string? PlantBatchName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchTypeId")]
        public int? PlantBatchTypeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchTypeName")]
        public string? PlantBatchTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainId")]
        public int? StrainId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainName")]
        public string? StrainName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationId")]
        public int? LocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationName")]
        public string? LocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationTypeName")]
        public string? LocationTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("roomId")]
        public int? RoomId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("roomName")]
        public string? RoomName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestId")]
        public int? HarvestId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestedUnitOfWeightName")]
        public string? HarvestedUnitOfWeightName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestedUnitOfWeightAbbreviation")]
        public string? HarvestedUnitOfWeightAbbreviation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestedWetWeight")]
        public double? HarvestedWetWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestCount")]
        public int? HarvestCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnHold")]
        public bool? IsOnHold { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? PlantedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vegetativeDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? VegetativeDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("floweringDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? FloweringDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? HarvestedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destroyedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? DestroyedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destroyedNote")]
        public string? DestroyedNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destroyedByUserName")]
        public string? DestroyedByUserName { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LastModified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groupTagTypeMax")]
        public int? GroupTagTypeMax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnTrip")]
        public bool? IsOnTrip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tagTypeMax")]
        public int? TagTypeMax { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantAdditive
    {

        [System.Text.Json.Serialization.JsonPropertyName("additiveTypeName")]
        public string? AdditiveTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productTradeName")]
        public string? ProductTradeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epaRegistrationNumber")]
        public string? EpaRegistrationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productSupplier")]
        public string? ProductSupplier { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("applicationDevice")]
        public string? ApplicationDevice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amountUnitOfMeasure")]
        public string? AmountUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmountApplied")]
        public double? TotalAmountApplied { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchId")]
        public int? PlantBatchId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchName")]
        public string? PlantBatchName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantCount")]
        public int? PlantCount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantBatch
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchTypeId")]
        public int? PlantBatchTypeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchTypeName")]
        public string? PlantBatchTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationId")]
        public int? LocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationName")]
        public string? LocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationTypeName")]
        public string? LocationTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("roomId")]
        public int? RoomId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("roomName")]
        public string? RoomName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainId")]
        public int? StrainId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainName")]
        public string? StrainName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("untrackedCount")]
        public int? UntrackedCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("trackedCount")]
        public int? TrackedCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("liveCount")]
        public int? LiveCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packagedCount")]
        public int? PackagedCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestedCount")]
        public int? HarvestedCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destroyedCount")]
        public int? DestroyedCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageId")]
        public int? SourcePackageId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageLabel")]
        public string? SourcePackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePlantId")]
        public int? SourcePlantId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePlantLabel")]
        public string? SourcePlantLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePlantBatchId")]
        public int? SourcePlantBatchId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePlantBatchName")]
        public string? SourcePlantBatchName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePlantBatchIds")]
        public System.Collections.Generic.ICollection<int>? SourcePlantBatchIds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePlantBatchNames")]
        public string? SourcePlantBatchNames { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("multiPlantBatch")]
        public bool? MultiPlantBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? PlantedDate { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LastModified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnTrip")]
        public bool? IsOnTrip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isOnHold")]
        public bool? IsOnHold { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sellByDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SellByDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useByDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? UseByDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantBatchWasteReason
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresNote")]
        public bool? RequiresNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresWasteWeight")]
        public bool? RequiresWasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresImmatureWasteWeight")]
        public bool? RequiresImmatureWasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresMatureWasteWeight")]
        public bool? RequiresMatureWasteWeight { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantWasteMethod
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forPlants")]
        public bool? ForPlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forProductDestruction")]
        public bool? ForProductDestruction { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LastModified { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlantWasteReason
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresNote")]
        public bool? RequiresNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresWasteWeight")]
        public bool? RequiresWasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresImmatureWasteWeight")]
        public bool? RequiresImmatureWasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresMatureWasteWeight")]
        public bool? RequiresMatureWasteWeight { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostHarvestCreatePackageTestingRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("tag")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Tag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        public string? Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfWeight")]
        public string? UnitOfWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isProductionBatch")]
        public bool? IsProductionBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productionBatchNumber")]
        public string? ProductionBatchNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTradeSample")]
        public bool? IsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonation")]
        public bool? IsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productRequiresRemediation")]
        public bool? ProductRequiresRemediation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediateProduct")]
        public bool? RemediateProduct { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationMethodId")]
        public int? RemediationMethodId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RemediationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationSteps")]
        public object? RemediationSteps { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ingredients")]
        public System.Collections.Generic.ICollection<Ingredient>? Ingredients { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostHarvestCreatePackagesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("tag")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Tag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        public string? Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfWeight")]
        public string? UnitOfWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isProductionBatch")]
        public bool? IsProductionBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productionBatchNumber")]
        public string? ProductionBatchNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTradeSample")]
        public bool? IsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonation")]
        public bool? IsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productRequiresRemediation")]
        public bool? ProductRequiresRemediation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediateProduct")]
        public bool? RemediateProduct { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationMethodId")]
        public int? RemediationMethodId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RemediationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationSteps")]
        public object? RemediationSteps { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ingredients")]
        public System.Collections.Generic.ICollection<Ingredient>? Ingredients { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostHarvestFinishRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostHarvestRemoveWasteRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteType")]
        public string? WasteType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfWeight")]
        public string? UnitOfWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteWeight")]
        public double? WasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostHarvestUnfinishRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostItemCreateRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategoryName")]
        public string? ProductCategoryName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategoryType")]
        public string? ProductCategoryType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityType")]
        public string? QuantityType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultLabTestingState")]
        public string? DefaultLabTestingState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasureName")]
        public string? UnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvalStatus")]
        public string? ApprovalStatus { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approvalStatusDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ApprovalStatusDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainId")]
        public int? StrainId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainName")]
        public string? StrainName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("administrationMethod")]
        public string? AdministrationMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdPercent")]
        public double? UnitCbdPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContent")]
        public double? UnitCbdContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContentUnitOfMeasureName")]
        public string? UnitCbdContentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContentDose")]
        public double? UnitCbdContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContentDoseUnitOfMeasureName")]
        public string? UnitCbdContentDoseUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcPercent")]
        public double? UnitThcPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContent")]
        public double? UnitThcContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentUnitOfMeasureName")]
        public string? UnitThcContentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentDose")]
        public double? UnitThcContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentDoseUnitOfMeasureName")]
        public string? UnitThcContentDoseUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitVolume")]
        public double? UnitVolume { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitVolumeUnitOfMeasureName")]
        public string? UnitVolumeUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitWeight")]
        public double? UnitWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitWeightUnitOfMeasureName")]
        public string? UnitWeightUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("servingSize")]
        public string? ServingSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplyDurationDays")]
        public int? SupplyDurationDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("numberOfDoses")]
        public int? NumberOfDoses { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitQuantity")]
        public double? UnitQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitQuantityUnitOfMeasureName")]
        public string? UnitQuantityUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ingredients")]
        public string? Ingredients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isUsed")]
        public bool? IsUsed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("publicIngredients")]
        public string? PublicIngredients { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostItemPhotoRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("fileName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string FileName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("encodedImageBase64")]
        [System.ComponentModel.DataAnnotations.Required]
        public string EncodedImageBase64 { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostItemUpdateRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategoryName")]
        public string? ProductCategoryName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategoryType")]
        public string? ProductCategoryType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityType")]
        public string? QuantityType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultLabTestingState")]
        public string? DefaultLabTestingState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasureName")]
        public string? UnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvalStatus")]
        public string? ApprovalStatus { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approvalStatusDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ApprovalStatusDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainId")]
        public int? StrainId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainName")]
        public string? StrainName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("administrationMethod")]
        public string? AdministrationMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdPercent")]
        public double? UnitCbdPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContent")]
        public double? UnitCbdContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContentUnitOfMeasureName")]
        public string? UnitCbdContentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContentDose")]
        public double? UnitCbdContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCbdContentDoseUnitOfMeasureName")]
        public string? UnitCbdContentDoseUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcPercent")]
        public double? UnitThcPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContent")]
        public double? UnitThcContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentUnitOfMeasureName")]
        public string? UnitThcContentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentDose")]
        public double? UnitThcContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentDoseUnitOfMeasureName")]
        public string? UnitThcContentDoseUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitVolume")]
        public double? UnitVolume { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitVolumeUnitOfMeasureName")]
        public string? UnitVolumeUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitWeight")]
        public double? UnitWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitWeightUnitOfMeasureName")]
        public string? UnitWeightUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("servingSize")]
        public string? ServingSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplyDurationDays")]
        public int? SupplyDurationDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("numberOfDoses")]
        public int? NumberOfDoses { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitQuantity")]
        public double? UnitQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitQuantityUnitOfMeasureName")]
        public string? UnitQuantityUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ingredients")]
        public string? Ingredients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isUsed")]
        public bool? IsUsed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("publicIngredients")]
        public string? PublicIngredients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostLabTestRecordRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resultDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly ResultDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentFileName")]
        public string? DocumentFileName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentFileBase64")]
        public string? DocumentFileBase64 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.ICollection<LabTestResult>? Results { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostLocationCreateRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationTypeName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string LocationTypeName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostLocationUpdateRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationTypeName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string LocationTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPackageAdjustRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public string? UnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentReason")]
        public string? AdjustmentReason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? AdjustmentDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reasonNote")]
        public string? ReasonNote { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPackageChangeItemRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Item { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPackageChangeLocationsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("moveDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? MoveDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPackageCreatePlantingsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        [System.ComponentModel.DataAnnotations.Required]
        public string PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageAdjustmentAmount")]
        public double? PackageAdjustmentAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageAdjustmentUnitOfMeasureName")]
        public string? PackageAdjustmentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchName")]
        public string? PlantBatchName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchType")]
        public string? PlantBatchType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantCount")]
        public int PlantCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationName")]
        public string? LocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainName")]
        public string? StrainName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("plantedDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset PlantedDate { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("unpackagedDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset UnpackagedDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPackageCreateRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("tag")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Tag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        [System.ComponentModel.DataAnnotations.Required]
        public string UnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isProductionBatch")]
        public bool IsProductionBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productionBatchNumber")]
        public string? ProductionBatchNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonation")]
        public bool IsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productRequiresRemediation")]
        public bool ProductRequiresRemediation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useSameItem")]
        public bool UseSameItem { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly ActualDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ingredients")]
        public System.Collections.Generic.ICollection<Ingredient>? Ingredients { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPackageCreateTestingRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("tag")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Tag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        [System.ComponentModel.DataAnnotations.Required]
        public string UnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isProductionBatch")]
        public bool IsProductionBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productionBatchNumber")]
        public string? ProductionBatchNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonation")]
        public bool IsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productRequiresRemediation")]
        public bool ProductRequiresRemediation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useSameItem")]
        public bool UseSameItem { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly ActualDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ingredients")]
        public System.Collections.Generic.ICollection<Ingredient>? Ingredients { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPackageFinishRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPackageRemediateRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        public string? PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationMethodName")]
        public string? RemediationMethodName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RemediationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationSteps")]
        public string? RemediationSteps { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPackageUnfinishRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPatientAddRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("licenseNumber")]
        [System.ComponentModel.DataAnnotations.Required]
        public string LicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("licenseEffectiveStartDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly LicenseEffectiveStartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("licenseEffectiveEndDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly LicenseEffectiveEndDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recommendedPlants")]
        public int RecommendedPlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recommendedSmokableQuantity")]
        public double RecommendedSmokableQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasSalesLimitExemption")]
        public bool HasSalesLimitExemption { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPatientCheckInsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkInLocationId")]
        public long? CheckInLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationStartDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RegistrationStartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationExpiryDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RegistrationExpiryDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkInDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? CheckInDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPatientUpdateRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("licenseNumber")]
        public string? LicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newLicenseNumber")]
        public string? NewLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("licenseEffectiveStartDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LicenseEffectiveStartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("licenseEffectiveEndDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LicenseEffectiveEndDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recommendedPlants")]
        public int? RecommendedPlants { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recommendedSmokableQuantity")]
        public double? RecommendedSmokableQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasSalesLimitExemption")]
        public bool? HasSalesLimitExemption { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantAdditiveByLocationRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("additiveType")]
        public string? AdditiveType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productTradeName")]
        public string? ProductTradeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epaRegistrationNumber")]
        public string? EpaRegistrationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productSupplier")]
        public string? ProductSupplier { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("applicationDevice")]
        public string? ApplicationDevice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmountApplied")]
        public double? TotalAmountApplied { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmountUnitOfMeasure")]
        public string? TotalAmountUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("activeIngredients")]
        public System.Collections.Generic.ICollection<ActiveIngredient>? ActiveIngredients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationName")]
        public string? LocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantAdditivesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("additiveType")]
        public string? AdditiveType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productTradeName")]
        public string? ProductTradeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epaRegistrationNumber")]
        public string? EpaRegistrationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productSupplier")]
        public string? ProductSupplier { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("applicationDevice")]
        public string? ApplicationDevice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmountApplied")]
        public double? TotalAmountApplied { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmountUnitOfMeasure")]
        public string? TotalAmountUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("activeIngredients")]
        public System.Collections.Generic.ICollection<ActiveIngredient>? ActiveIngredients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantLabels")]
        public System.Collections.Generic.ICollection<string>? PlantLabels { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantBatchAdditivesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("additiveType")]
        public string? AdditiveType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productTradeName")]
        public string? ProductTradeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epaRegistrationNumber")]
        public string? EpaRegistrationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productSupplier")]
        public string? ProductSupplier { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("applicationDevice")]
        public string? ApplicationDevice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmountApplied")]
        public double? TotalAmountApplied { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmountUnitOfMeasure")]
        public string? TotalAmountUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("activeIngredients")]
        public System.Collections.Generic.ICollection<ActiveIngredient>? ActiveIngredients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchName")]
        public string? PlantBatchName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantBatchAdjustRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchName")]
        public string? PlantBatchName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentReason")]
        public string? AdjustmentReason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentDate")]
        public string? AdjustmentDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reasonNote")]
        public string? ReasonNote { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantBatchChangeGrowthPhaseRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startingTag")]
        public string? StartingTag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("growthPhase")]
        public string? GrowthPhase { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newLocation")]
        public string? NewLocation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("growthDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? GrowthDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantBatchCreatePackageFromMotherPlantRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatch")]
        public string? PlantBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        public string? Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tag")]
        public string? Tag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTradeSample")]
        public bool? IsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonation")]
        public bool? IsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantBatchCreatePackagesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatch")]
        public string? PlantBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        public string? Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tag")]
        public string? Tag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTradeSample")]
        public bool? IsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonation")]
        public bool? IsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantBatchCreatePlantingsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strain")]
        public string? Strain { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantBatchSplitRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("plantBatch")]
        public string? PlantBatch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groupName")]
        public string? GroupName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strain")]
        public string? Strain { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantBatchWasteRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("wasteMethodName")]
        public string? WasteMethodName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mixedMaterial")]
        public string? MixedMaterial { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteWeight")]
        public double? WasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasureName")]
        public string? UnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reasonName")]
        public string? ReasonName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteDate")]
        public string? WasteDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchName")]
        public string? PlantBatchName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantChangeGrowthPhasesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newTag")]
        public string? NewTag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("growthPhase")]
        public string? GrowthPhase { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newLocation")]
        public string? NewLocation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("growthDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? GrowthDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantCreatePlantBatchPackagesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("plantLabel")]
        public string? PlantLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageTag")]
        public string? PackageTag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchType")]
        public string? PlantBatchType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        public string? Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTradeSample")]
        public bool? IsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonation")]
        public bool? IsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantCreatePlantingsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("plantLabel")]
        public string? PlantLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchName")]
        public string? PlantBatchName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchType")]
        public string? PlantBatchType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantCount")]
        public int? PlantCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationName")]
        public string? LocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("strainName")]
        public string? StrainName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantHarvestPlantsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("plant")]
        public string? Plant { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        public double? Weight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfWeight")]
        public string? UnitOfWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dryingLocation")]
        public string? DryingLocation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestName")]
        public string? HarvestName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantManicurePlantsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("plant")]
        public string? Plant { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        public double? Weight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfWeight")]
        public string? UnitOfWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dryingLocation")]
        public string? DryingLocation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestName")]
        public string? HarvestName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantMovePlantsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPlantWasteRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("wasteMethodName")]
        public string? WasteMethodName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mixedMaterial")]
        public string? MixedMaterial { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteWeight")]
        public double? WasteWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasureName")]
        public string? UnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reasonName")]
        public string? ReasonName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteDate")]
        public string? WasteDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plantBatchName")]
        public string? PlantBatchName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostProcessingAdjustRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentReason")]
        public string? AdjustmentReason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? AdjustmentDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentNote")]
        public string? AdjustmentNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countUnitOfMeasureName")]
        public string? CountUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("volumeUnitOfMeasureName")]
        public string? VolumeUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weightUnitOfMeasureName")]
        public string? WeightUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packages")]
        public System.Collections.Generic.ICollection<ProcessingPackageRequest>? Packages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostProcessingCreatePackagesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("jobName")]
        public string? JobName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tag")]
        public string? Tag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("item")]
        public string? Item { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public string? UnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productionBatchNumber")]
        public string? ProductionBatchNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("finishProcessingJob")]
        public bool? FinishProcessingJob { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("finishDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? FinishDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteCountQuantity")]
        public int? WasteCountQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteCountUnitOfMeasureName")]
        public string? WasteCountUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteVolumeQuantity")]
        public double? WasteVolumeQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteVolumeUnitOfMeasureName")]
        public string? WasteVolumeUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteWeightQuantity")]
        public double? WasteWeightQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteWeightUnitOfMeasureName")]
        public string? WasteWeightUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("finishNote")]
        public string? FinishNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? PackageDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostProcessingJobTypesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("category")]
        public string? Category { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("processingSteps")]
        public string? ProcessingSteps { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public System.Collections.Generic.ICollection<string>? Attributes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostProcessingStartRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("jobName")]
        public string? JobName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("jobType")]
        public string? JobType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countUnitOfMeasure")]
        public string? CountUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("volumeUnitOfMeasure")]
        public string? VolumeUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weightUnitOfMeasure")]
        public string? WeightUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packages")]
        public System.Collections.Generic.ICollection<ProcessingPackageRequest>? Packages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? StartDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostSaleDeliveriesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("salesDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SalesDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesCustomerType")]
        public string? SalesCustomerType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consumerId")]
        public string? ConsumerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverEmployeeId")]
        public string? DriverEmployeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driversLicenseNumber")]
        public string? DriversLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientName")]
        public string? RecipientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressStreet1")]
        public string? RecipientAddressStreet1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressStreet2")]
        public string? RecipientAddressStreet2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressCity")]
        public string? RecipientAddressCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressCounty")]
        public string? RecipientAddressCounty { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressState")]
        public string? RecipientAddressState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressPostalCode")]
        public string? RecipientAddressPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedRoute")]
        public string? PlannedRoute { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<SaleTransaction>? Transactions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostSaleDeliveryRetailerDepartRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("retailerDeliveryId")]
        public long? RetailerDeliveryId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostSaleDeliveryRetailerEndRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("retailerDeliveryId")]
        public long? RetailerDeliveryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packages")]
        public System.Collections.Generic.ICollection<SalesDeliveryPackageEnd>? Packages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostSaleDeliveryRetailerRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? DateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverEmployeeId")]
        public string? DriverEmployeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driversLicenseNumber")]
        public string? DriversLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destinations")]
        public System.Collections.Generic.ICollection<Destination>? Destinations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packages")]
        public System.Collections.Generic.ICollection<SalesDeliveryPackage>? Packages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostSaleDeliveryRetailerRestockRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("retailerDeliveryId")]
        public long? RetailerDeliveryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? DateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destinations")]
        public System.Collections.Generic.ICollection<SalesDeliveryDestination>? Destinations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packages")]
        public System.Collections.Generic.ICollection<SalesDeliveryPackage>? Packages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostSaleDeliveryRetailerSaleRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("retailerDeliveryId")]
        public int? RetailerDeliveryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SalesDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesCustomerType")]
        public string? SalesCustomerType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consumerId")]
        public string? ConsumerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientName")]
        public string? RecipientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressStreet1")]
        public string? RecipientAddressStreet1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressStreet2")]
        public string? RecipientAddressStreet2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressCity")]
        public string? RecipientAddressCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressCounty")]
        public string? RecipientAddressCounty { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressState")]
        public string? RecipientAddressState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressPostalCode")]
        public string? RecipientAddressPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedRoute")]
        public string? PlannedRoute { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<SalesDeliveryTransaction>? Transactions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostSaleReceiptsRequest
    {
        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? SalesDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesCustomerType")]
        public string? SalesCustomerType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("caregiverLicenseNumber")]
        public string? CaregiverLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("identificationMethod")]
        public string? IdentificationMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<SaleReceiptTransaction>? Transactions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostSaleTransactionsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        public string? PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public string? UnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmount")]
        public double? TotalAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcPercent")]
        public string? UnitThcPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContent")]
        public string? UnitThcContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentUnitOfMeasure")]
        public string? UnitThcContentUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitWeight")]
        public string? UnitWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitWeightUnitOfMeasure")]
        public string? UnitWeightUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNumber")]
        public string? InvoiceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public double? Price { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("exciseTax")]
        public double? ExciseTax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cityTax")]
        public double? CityTax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countyTax")]
        public double? CountyTax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("municipalTax")]
        public double? MunicipalTax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountAmount")]
        public double? DiscountAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subTotal")]
        public double? SubTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesTax")]
        public double? SalesTax { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostStrainCreateRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testingStatus")]
        public string? TestingStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("thcLevel")]
        public double? ThcLevel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cbdLevel")]
        public double? CbdLevel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indicaPercentage")]
        public double? IndicaPercentage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sativaPercentage")]
        public double? SativaPercentage { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostStrainUpdateRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testingStatus")]
        public string? TestingStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("thcLevel")]
        public double? ThcLevel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cbdLevel")]
        public double? CbdLevel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indicaPercentage")]
        public double? IndicaPercentage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sativaPercentage")]
        public double? SativaPercentage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostTransferExternalIncomingRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("shipperLicenseNumber")]
        public string? ShipperLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperName")]
        public string? ShipperName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperMainPhoneNumber")]
        public string? ShipperMainPhoneNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddress1")]
        public string? ShipperAddress1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddress2")]
        public string? ShipperAddress2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressCity")]
        public string? ShipperAddressCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressState")]
        public string? ShipperAddressState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressPostalCode")]
        public string? ShipperAddressPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityLicenseNumber")]
        public string? TransporterFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverOccupationalLicenseNumber")]
        public string? DriverOccupationalLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverLicenseNumber")]
        public string? DriverLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destinations")]
        public System.Collections.Generic.ICollection<ExternalDestination>? Destinations { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostTransferTemplatesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("shipperLicenseNumber")]
        public string? ShipperLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperName")]
        public string? ShipperName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperMainPhoneNumber")]
        public string? ShipperMainPhoneNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddress1")]
        public string? ShipperAddress1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddress2")]
        public string? ShipperAddress2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressCity")]
        public string? ShipperAddressCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressState")]
        public string? ShipperAddressState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressPostalCode")]
        public string? ShipperAddressPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityLicenseNumber")]
        public string? TransporterFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverOccupationalLicenseNumber")]
        public string? DriverOccupationalLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverLicenseNumber")]
        public string? DriverLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destinations")]
        public System.Collections.Generic.ICollection<ExternalDestination>? Destinations { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Processing
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProcessingJobType
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("categoryName")]
        public string? CategoryName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("processingSteps")]
        public string? ProcessingSteps { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public System.Collections.Generic.ICollection<string>? Attributes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProcessingPackageRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public string? UnitOfMeasure { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductImage
    {

        [System.Text.Json.Serialization.JsonPropertyName("fileSystemId")]
        public long? FileSystemId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductPdfDocument
    {

        [System.Text.Json.Serialization.JsonPropertyName("fileSystemId")]
        public long? FileSystemId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutHarvestMoveRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harvestName")]
        public string? HarvestName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dryingLocation")]
        public string? DryingLocation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutHarvestRenameRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("oldName")]
        public string? OldName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newName")]
        public string? NewName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutLabTestLabTestDocumentRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("labTestResultId")]
        public long? LabTestResultId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentFileName")]
        public string? DocumentFileName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentFileBase64")]
        public string? DocumentFileBase64 { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutLabTestResultReleaseRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        public string? PackageLabel { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPackageChangeNoteRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        public string? PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPatientCheckInsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkInLocationId")]
        public long? CheckInLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationStartDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RegistrationStartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationExpiryDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RegistrationExpiryDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkInDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? CheckInDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutPlantBatchMovePlantBatchesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("moveDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? MoveDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutProcessingFinishRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("finishDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? FinishDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("finishNote")]
        public string? FinishNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCountWaste")]
        public double? TotalCountWaste { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteCountUnitOfMeasureName")]
        public string? WasteCountUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalVolumeWaste")]
        public double? TotalVolumeWaste { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteVolumeUnitOfMeasureName")]
        public string? WasteVolumeUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalWeightWaste")]
        public double? TotalWeightWaste { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("wasteWeightUnitOfMeasureName")]
        public string? WasteWeightUnitOfMeasureName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutProcessingJobTypesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("categoryName")]
        public string? CategoryName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("processingSteps")]
        public string? ProcessingSteps { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public System.Collections.Generic.ICollection<string>? Attributes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutProcessingUnfinishRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutSaleDeliveriesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("salesDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SalesDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesCustomerType")]
        public string? SalesCustomerType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consumerId")]
        public string? ConsumerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverEmployeeId")]
        public string? DriverEmployeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driversLicenseNumber")]
        public string? DriversLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientName")]
        public string? RecipientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressStreet1")]
        public string? RecipientAddressStreet1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressStreet2")]
        public string? RecipientAddressStreet2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressCity")]
        public string? RecipientAddressCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressCounty")]
        public string? RecipientAddressCounty { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressState")]
        public string? RecipientAddressState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressPostalCode")]
        public string? RecipientAddressPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedRoute")]
        public string? PlannedRoute { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<SaleTransaction>? Transactions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutSaleDeliveryCompleteRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("acceptedPackages")]
        public System.Collections.Generic.ICollection<string>? AcceptedPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnedPackages")]
        public System.Collections.Generic.ICollection<ReturnedPackage>? ReturnedPackages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutSaleDeliveryHubAcceptRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutSaleDeliveryHubDepartRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutSaleDeliveryHubRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityId")]
        public string? TransporterFacilityId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverEmployeeId")]
        public string? DriverEmployeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driversLicenseNumber")]
        public string? DriversLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedRoute")]
        public string? PlannedRoute { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedArrivalDateTime { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutSaleDeliveryHubVerifyIdRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentType")]
        public string? PaymentType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutSaleDeliveryRetailerRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? DateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverEmployeeId")]
        public string? DriverEmployeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driversLicenseNumber")]
        public string? DriversLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destinations")]
        public System.Collections.Generic.ICollection<Destination>? Destinations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packages")]
        public System.Collections.Generic.ICollection<SalesDeliveryPackage>? Packages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutSaleReceiptsRequest
    {
        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? SalesDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesCustomerType")]
        public string? SalesCustomerType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("caregiverLicenseNumber")]
        public string? CaregiverLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("identificationMethod")]
        public string? IdentificationMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<SaleReceiptTransaction>? Transactions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutSaleTransactionsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        public string? PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public string? UnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmount")]
        public double? TotalAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcPercent")]
        public string? UnitThcPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContent")]
        public string? UnitThcContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentUnitOfMeasure")]
        public string? UnitThcContentUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitWeight")]
        public string? UnitWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitWeightUnitOfMeasure")]
        public string? UnitWeightUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNumber")]
        public string? InvoiceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public double? Price { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("exciseTax")]
        public double? ExciseTax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cityTax")]
        public double? CityTax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countyTax")]
        public double? CountyTax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("municipalTax")]
        public double? MunicipalTax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountAmount")]
        public double? DiscountAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subTotal")]
        public double? SubTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesTax")]
        public double? SalesTax { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutTransferExternalIncomingRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("shipperLicenseNumber")]
        public string? ShipperLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperName")]
        public string? ShipperName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperMainPhoneNumber")]
        public string? ShipperMainPhoneNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddress1")]
        public string? ShipperAddress1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddress2")]
        public string? ShipperAddress2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressCity")]
        public string? ShipperAddressCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressState")]
        public string? ShipperAddressState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressPostalCode")]
        public string? ShipperAddressPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityLicenseNumber")]
        public string? TransporterFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverOccupationalLicenseNumber")]
        public string? DriverOccupationalLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverLicenseNumber")]
        public string? DriverLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destinations")]
        public System.Collections.Generic.ICollection<ExternalDestination>? Destinations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transferId")]
        public long? TransferId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutTransferTemplatesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("shipperLicenseNumber")]
        public string? ShipperLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperName")]
        public string? ShipperName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperMainPhoneNumber")]
        public string? ShipperMainPhoneNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddress1")]
        public string? ShipperAddress1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddress2")]
        public string? ShipperAddress2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressCity")]
        public string? ShipperAddressCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressState")]
        public string? ShipperAddressState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperAddressPostalCode")]
        public string? ShipperAddressPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityLicenseNumber")]
        public string? TransporterFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverOccupationalLicenseNumber")]
        public string? DriverOccupationalLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverLicenseNumber")]
        public string? DriverLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destinations")]
        public System.Collections.Generic.ICollection<ExternalDestination>? Destinations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transferId")]
        public long? TransferId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequiredLabTestBatch
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageId")]
        public long? PackageId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestBatchId")]
        public long? LabTestBatchId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestBatchName")]
        public string? LabTestBatchName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Retailer
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("retailerDeliveryNumber")]
        public string? RetailerDeliveryNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("facilityLicenseNumber")]
        public string? FacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("facilityName")]
        public string? FacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? DateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverEmployeeId")]
        public string? DriverEmployeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driversLicenseNumber")]
        public string? DriversLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleInfo")]
        public string? VehicleInfo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("direction")]
        public string? Direction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("restockDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RestockDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPackages")]
        public int? TotalPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPrice")]
        public double? TotalPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPriceSold")]
        public double? TotalPriceSold { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("acceptedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? AcceptedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destinations")]
        public System.Collections.Generic.ICollection<object>? Destinations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? CompletedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("retailerDeliveryState")]
        public string? RetailerDeliveryState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("allowFullEdit")]
        public bool? AllowFullEdit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("leg")]
        public int? Leg { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("voidedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? VoidedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RecordedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordedByUserName")]
        public string? RecordedByUserName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LastModified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packages")]
        public System.Collections.Generic.ICollection<SalesDeliveryPackage>? Packages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnedPackage
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnQuantityVerified")]
        public double? ReturnQuantityVerified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnUnitOfMeasure")]
        public string? ReturnUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnReason")]
        public string? ReturnReason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnReasonNote")]
        public string? ReturnReasonNote { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleDelivery
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryNumber")]
        public string? DeliveryNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("facilityLicenseNumber")]
        public string? FacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("facilityName")]
        public string? FacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityId")]
        public string? TransporterFacilityId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityLicenseNumber")]
        public string? TransporterFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityName")]
        public string? TransporterFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SalesDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesCustomerType")]
        public string? SalesCustomerType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consumerId")]
        public string? ConsumerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverEmployeeId")]
        public string? DriverEmployeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driversLicenseNumber")]
        public string? DriversLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientName")]
        public string? RecipientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedRoute")]
        public string? PlannedRoute { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("direction")]
        public string? Direction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedReturnDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedReturnDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualReturnDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualReturnDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedReturnArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedReturnArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualReturnArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? ActualReturnArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPackages")]
        public int? TotalPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPrice")]
        public double? TotalPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("acceptedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? AcceptedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<SaleTransaction>? Transactions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? CompletedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryState")]
        public string? SalesDeliveryState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("voidedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? VoidedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RecordedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordedByUserName")]
        public string? RecordedByUserName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? LastModified { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleReceipt
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiptNumber")]
        public string? ReceiptNumber { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salesDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? SalesDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesCustomerType")]
        public string? SalesCustomerType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("caregiverLicenseNumber")]
        public string? CaregiverLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("identificationMethod")]
        public string? IdentificationMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externalReceiptNumber")]
        public string? ExternalReceiptNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPackages")]
        public int? TotalPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPrice")]
        public double? TotalPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<SaleReceiptTransaction>? Transactions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isFinal")]
        public bool? IsFinal { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("archivedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ArchivedDate { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("recordedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? RecordedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordedByUserName")]
        public string? RecordedByUserName { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LastModified { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleReceiptTransaction
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        public string? PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public string? UnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmount")]
        public double? TotalAmount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleTransaction
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageId")]
        public long? PackageId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        public string? PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        public string? ProductName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategoryName")]
        public string? ProductCategoryName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemStrainName")]
        public string? ItemStrainName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitCbdPercent")]
        public double? ItemUnitCbdPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitCbdContent")]
        public double? ItemUnitCbdContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitCbdContentUnitOfMeasureName")]
        public string? ItemUnitCbdContentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitCbdContentDose")]
        public double? ItemUnitCbdContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitCbdContentDoseUnitOfMeasureName")]
        public string? ItemUnitCbdContentDoseUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitThcPercent")]
        public double? ItemUnitThcPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitThcContent")]
        public double? ItemUnitThcContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitThcContentUnitOfMeasureName")]
        public string? ItemUnitThcContentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitThcContentDose")]
        public double? ItemUnitThcContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitThcContentDoseUnitOfMeasureName")]
        public string? ItemUnitThcContentDoseUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitVolume")]
        public double? ItemUnitVolume { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitVolumeUnitOfMeasureName")]
        public string? ItemUnitVolumeUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitWeight")]
        public double? ItemUnitWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitWeightUnitOfMeasureName")]
        public string? ItemUnitWeightUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemServingSize")]
        public string? ItemServingSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemSupplyDurationDays")]
        public int? ItemSupplyDurationDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitQuantity")]
        public double? ItemUnitQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitQuantityUnitOfMeasureName")]
        public string? ItemUnitQuantityUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantitySold")]
        public double? QuantitySold { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasureName")]
        public string? UnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasureAbbreviation")]
        public string? UnitOfMeasureAbbreviation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPrice")]
        public double? TotalPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDeliveryState")]
        public string? SalesDeliveryState { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("archivedDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ArchivedDate { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("recordedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? RecordedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordedByUserName")]
        public string? RecordedByUserName { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LastModified { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleTransactionSummary
    {

        [System.Text.Json.Serialization.JsonPropertyName("salesDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly SalesDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalTransactions")]
        public int? TotalTransactions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPackages")]
        public int? TotalPackages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPrice")]
        public double? TotalPrice { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesDeliveryDestination
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? SalesDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesCustomerType")]
        public string? SalesCustomerType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("patientLicenseNumber")]
        public string? PatientLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consumerId")]
        public string? ConsumerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverEmployeeId")]
        public string? DriverEmployeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driversLicenseNumber")]
        public string? DriversLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberForQuestions")]
        public string? PhoneNumberForQuestions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientName")]
        public string? RecipientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressStreet1")]
        public string? RecipientAddressStreet1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressStreet2")]
        public string? RecipientAddressStreet2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressCity")]
        public string? RecipientAddressCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressCounty")]
        public string? RecipientAddressCounty { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressState")]
        public string? RecipientAddressState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientAddressPostalCode")]
        public string? RecipientAddressPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedRoute")]
        public string? PlannedRoute { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedDepartureDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? EstimatedArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<SalesDeliveryTransaction>? Transactions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesDeliveryPackage
    {

        [System.Text.Json.Serialization.JsonPropertyName("dateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? DateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        public string? PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public string? UnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPrice")]
        public double? TotalPrice { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesDeliveryPackageEnd
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("endQuantity")]
        public double? EndQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("endUnitOfMeasure")]
        public string? EndUnitOfMeasure { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesDeliveryTransaction
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        public string? PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double? Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public string? UnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmount")]
        public double? TotalAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcPercent")]
        public string? UnitThcPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContent")]
        public string? UnitThcContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitThcContentUnitOfMeasure")]
        public string? UnitThcContentUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitWeight")]
        public string? UnitWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitWeightUnitOfMeasure")]
        public string? UnitWeightUnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNumber")]
        public string? InvoiceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public double? Price { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("exciseTax")]
        public double? ExciseTax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cityTax")]
        public double? CityTax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countyTax")]
        public double? CountyTax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("municipalTax")]
        public double? MunicipalTax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountAmount")]
        public double? DiscountAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subTotal")]
        public double? SubTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesTax")]
        public double? SalesTax { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Strain
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testingStatus")]
        public string? TestingStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("thcLevel")]
        public double? ThcLevel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cbdLevel")]
        public double? CbdLevel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indicaPercentage")]
        public double? IndicaPercentage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sativaPercentage")]
        public double? SativaPercentage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isUsed")]
        public bool? IsUsed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("genetics")]
        public string? Genetics { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Transfer
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("manifestNumber")]
        public string? ManifestNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipmentLicenseType")]
        public string? ShipmentLicenseType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperFacilityLicenseNumber")]
        public string? ShipperFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperFacilityName")]
        public string? ShipperFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityLicenseNumber")]
        public string? TransporterFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityName")]
        public string? TransporterFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverOccupationalLicenseNumber")]
        public string? DriverOccupationalLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverVehicleLicenseNumber")]
        public string? DriverVehicleLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryCount")]
        public int? DeliveryCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedDeliveryCount")]
        public int? ReceivedDeliveryCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageCount")]
        public int? PackageCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedPackageCount")]
        public int? ReceivedPackageCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsPlantPackage")]
        public bool? ContainsPlantPackage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsProductPackage")]
        public bool? ContainsProductPackage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsTradeSample")]
        public bool? ContainsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsDonation")]
        public bool? ContainsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsTestingSample")]
        public bool? ContainsTestingSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsProductRequiresRemediation")]
        public bool? ContainsProductRequiresRemediation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsRemediatedProductPackage")]
        public bool? ContainsRemediatedProductPackage { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? CreatedDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdByUserName")]
        public string? CreatedByUserName { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastModified")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? LastModified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryId")]
        public int? DeliveryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientFacilityLicenseNumber")]
        public string? RecipientFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientFacilityName")]
        public string? RecipientFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipmentTypeName")]
        public string? ShipmentTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipmentTransactionType")]
        public string? ShipmentTransactionType { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("actualDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ActualDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedArrivalDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("actualArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ActualArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryPackageCount")]
        public int? DeliveryPackageCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryReceivedPackageCount")]
        public int? DeliveryReceivedPackageCount { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("receivedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ReceivedDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimatedReturnDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedReturnDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("actualReturnDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ActualReturnDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimatedReturnArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedReturnArrivalDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("actualReturnArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ActualReturnArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isVoided")]
        public bool? IsVoided { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferDelivery
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientFacilityLicenseNumber")]
        public string? RecipientFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recipientFacilityName")]
        public string? RecipientFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipmentTypeName")]
        public string? ShipmentTypeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipmentTransactionType")]
        public string? ShipmentTransactionType { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimatedDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("actualDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ActualDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimatedArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedArrivalDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("actualArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ActualArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("grossWeight")]
        public double? GrossWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("grossUnitOfWeightId")]
        public string? GrossUnitOfWeightId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("grossUnitOfWeightName")]
        public string? GrossUnitOfWeightName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plannedRoute")]
        public string? PlannedRoute { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryPackageCount")]
        public int? DeliveryPackageCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryReceivedPackageCount")]
        public int? DeliveryReceivedPackageCount { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("receivedDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ReceivedDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimatedReturnDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedReturnDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("actualReturnDepartureDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ActualReturnDepartureDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimatedReturnArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? EstimatedReturnArrivalDateTime { get; set; } = default!;

        /// <summary>
        /// The date is in ISO 8601 date format yyyy-mm-ddThh:mm:ssZ.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("actualReturnArrivalDateTime")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})Z")]
        public DateTimeOffset? ActualReturnArrivalDateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rejectedPackagesReturned")]
        public bool? RejectedPackagesReturned { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferDeliveryPackage
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageId")]
        public int? PackageId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        public string? PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageType")]
        public string? PackageType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceHarvestNames")]
        public string? SourceHarvestNames { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageLabels")]
        public string? SourcePackageLabels { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        public string? ProductName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategoryName")]
        public string? ProductCategoryName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public string? ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemName")]
        public string? ItemName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemCategoryName")]
        public string? ItemCategoryName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemStrainName")]
        public string? ItemStrainName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitCbdPercent")]
        public double? ItemUnitCbdPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitCbdContent")]
        public double? ItemUnitCbdContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitCbdContentUnitOfMeasureName")]
        public string? ItemUnitCbdContentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitCbdContentDose")]
        public double? ItemUnitCbdContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitCbdContentDoseUnitOfMeasureName")]
        public string? ItemUnitCbdContentDoseUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitThcPercent")]
        public double? ItemUnitThcPercent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitThcContent")]
        public double? ItemUnitThcContent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitThcContentUnitOfMeasureName")]
        public string? ItemUnitThcContentUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitThcContentDose")]
        public double? ItemUnitThcContentDose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitThcContentDoseUnitOfMeasureName")]
        public string? ItemUnitThcContentDoseUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitVolume")]
        public double? ItemUnitVolume { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitVolumeUnitOfMeasureName")]
        public string? ItemUnitVolumeUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitWeight")]
        public double? ItemUnitWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitWeightUnitOfMeasureName")]
        public string? ItemUnitWeightUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemServingSize")]
        public string? ItemServingSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemSupplyDurationDays")]
        public int? ItemSupplyDurationDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitQuantity")]
        public double? ItemUnitQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemUnitQuantityUnitOfMeasureName")]
        public string? ItemUnitQuantityUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labTestingState")]
        public string? LabTestingState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productionBatchNumber")]
        public string? ProductionBatchNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTradeSample")]
        public bool? IsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTradeSamplePersistent")]
        public bool? IsTradeSamplePersistent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDonation")]
        public bool? IsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageIsDonation")]
        public bool? SourcePackageIsDonation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourcePackageIsTradeSample")]
        public bool? SourcePackageIsTradeSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isTestingSample")]
        public bool? IsTestingSample { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productRequiresRemediation")]
        public bool? ProductRequiresRemediation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsRemediatedProduct")]
        public bool? ContainsRemediatedProduct { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remediationDate")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9]{4})-(?:[0-9]{2})-([0-9]{2})")]
        public DateOnly? RemediationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipmentPackageState")]
        public string? ShipmentPackageState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippedQuantity")]
        public double? ShippedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippedUnitOfMeasureName")]
        public string? ShippedUnitOfMeasureName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("grossUnitOfWeightName")]
        public string? GrossUnitOfWeightName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedQuantity")]
        public double? ReceivedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedUnitOfMeasureName")]
        public string? ReceivedUnitOfMeasureName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferDeliveryPackageWholesale
    {

        [System.Text.Json.Serialization.JsonPropertyName("packageId")]
        public int? PackageId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageLabel")]
        public string? PackageLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipperWholesalePrice")]
        public double? ShipperWholesalePrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiverWholesalePrice")]
        public double? ReceiverWholesalePrice { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferDeliveryTransporter
    {

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityLicenseNumber")]
        public string? TransporterFacilityLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterFacilityName")]
        public string? TransporterFacilityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transporterDirection")]
        public string? TransporterDirection { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferDeliveryTransporterDetail
    {

        [System.Text.Json.Serialization.JsonPropertyName("driverName")]
        public string? DriverName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverOccupationalLicenseNumber")]
        public string? DriverOccupationalLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("driverVehicleLicenseNumber")]
        public string? DriverVehicleLicenseNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleMake")]
        public string? VehicleMake { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleModel")]
        public string? VehicleModel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vehicleLicensePlateNumber")]
        public string? VehicleLicensePlateNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDriverStartDateTime")]
        public string? ActualDriverStartDateTime { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferType
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forLicensedShipments")]
        public bool? ForLicensedShipments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forExternalIncomingShipments")]
        public bool? ForExternalIncomingShipments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("forExternalOutgoingShipments")]
        public bool? ForExternalOutgoingShipments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresDestinationGrossWeight")]
        public bool? RequiresDestinationGrossWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresPackagesGrossWeight")]
        public bool? RequiresPackagesGrossWeight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        public string? TransactionType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnitOfMeasure
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityType")]
        public string? QuantityType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("abbreviation")]
        public string? Abbreviation { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625